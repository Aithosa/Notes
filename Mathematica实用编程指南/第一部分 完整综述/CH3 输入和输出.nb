(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1910706,      35340]
NotebookOptionsPosition[   1901228,      35175]
NotebookOutlinePosition[   1901616,      35192]
CellTagsIndexPosition[   1901573,      35189]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"2", "^", "100"}]], "Input",
 CellChangeTimes->{{3.757109646772005*^9, 3.7571096536494617`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"ff7c5987-3230-417a-9832-e032d4992434"],

Cell[BoxData["1267650600228229401496703205376"], "Output",
 CellChangeTimes->{3.7571096547310824`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"2dc36fe8-6f0b-4ea7-ab56-cc72adf29fcb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["2", "100"]], "Input",
 CellChangeTimes->{{3.7571096588088093`*^9, 3.757109664065172*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f1dc3558-ae44-4b16-b04d-e1a87d17f947"],

Cell[BoxData["1267650600228229401496703205376"], "Output",
 CellChangeTimes->{3.7571096653059435`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"cb34a904-3e57-4fe2-b7af-ace9f46d53c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin(x)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "2", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max14691$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min14690$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4563828$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min14690$\
4563829$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max14691$\
4563830$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max14691$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min14690$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4563828$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min14690$\
4563829$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max14691$\
4563830$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563808[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$]],
                     6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min14690$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max14691$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4563808]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563808[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563808[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNDbQviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+68eLm9u7XrYTCWERhDldDbbSHzTIGmaQ+\
BrlnzloP45o+PyuOngvOYfi+oSKh+YL1jBcTCSAEc8wm+\
9XIzdRcTMyAIKHLhNDl5DtteoI1iYjqmsxzfOJ+srbbAoKbac3Ov5Gadgnz4N/\
GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/zecOQNDDumepnOZ63r5BmputZFP+\
fqoubLRoM8f8rU/\
0uHTJvlMJ63DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AbOquLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max14693$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min14692$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4563913$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min14692$\
4563914$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max14693$\
4563915$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max14693$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min14692$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4563913$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min14692$\
4563914$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max14693$\
4563915$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563893[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$]],
                     26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min14692$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max14693$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4563893]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563893[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4563893[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RkAHEg9Igw7GpAElKe/\
1kkti4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS1CKCp5cwWe3jAlB7wEjPyB2vuvGvBdyRrQ7v8b3CYsKRjR81ZRRTUFN9\
yXJMxqp2jOW9Nj8ZMpERBj9CY93Xrwcvno6dDAYy5hoDZKrYVvIPJNEQdJDoGvGvGWEf3PHB+\
XxU8FYCN8L4BGo+8Y7kSQ2MIIThvl433q5mbqDiWnCYyLjC6fJynPU9gKlJeXpBGY5vnE+Wc/\
aAhOZKsfN3ZKbdQpy4d/AByK0MTmPTdqeLYF+YVwy+\
s7K6p9zN8Dzblt4KU5WE4f5vWHIG9H0GNQynU9a18kxUnWtjX7O1UXNl40Gef6Uqf+\
XDqnSy2E8bxsGzI5MjVdrbxl+py28yLHr5+K+\
Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAADkYV2y53aMp1aOMSBIZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShboTHWVf/\
qi4lVzONBnyfsA1pCDXiv4m1kcacnk8EZ6RhHhBU6/eHFZJjYn0lv2gBAlzwilC0l/mY7+\
5h4uVQKr2JapLOhYHtjSn/kn0ywIfAk911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwFSxbiO"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.622", 
    "parsetiming" -> "0.371", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa1312423he09ccea31801600006a016ahh51674bfg", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "51", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1312523he09ccea318016000042074bb8b1g2i526306620017200445608", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 36, 42.2037707`9.377926129381622}, "Line" -> 
    13, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot sin(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{280., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[13]:=",ExpressionUUID->"189d3e08-755b-401b-89f4-bdce30f2e2b8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$95348#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6.6, 6.6}, {-0.9999998464014627, 0.9999985917009981}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.757109802571809*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"eb2b6ee5-d0e8-4c62-afd8-2fed7c648618"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot  the sine of x", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "2", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max9492$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min9491$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3137811$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min9491$\
3137812$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9492$3137813$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max9492$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min9491$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3137811$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9491$\
3137812$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9492$\
3137813$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137790[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9491$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9492$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3137790]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137790[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137790[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs+IUiR4QQK6y7LSAiUp7/\
Umk8TCtYPt7IWfB4/dJM22WymmC2iVPozqSXM8c+\
bMdJ4ciiDp93o9ddWYj4LFyQ08PTZmLOa5KHi8e5JLUIoKnlzBZ7eNCUHvACOnEDvfdWM+\
CDkn2p3f4PuERQUjGr5pyqimoGZ7kuQZjVTtmUh6ZH4yYyIijP6Ep6Ph6NXr50MHg7FMiNYguRq1hc\
wzSRQkPQS6Zsx7Rvh3d3xUHj8XjIXwowAegXpgvFNJYgMjOGGYj/\
etl5upu5iYJjwmMr5wmqw8x20vUFpSnk5hnuMb55M1bAtMZKocN/dKbjYpyIV/Ex+\
I0MbkPDZpe7YE+oVxyeg7K6t/zt0Az2/\
bwktxvJ44zO8dQ96IpkegVul81rpOjpGqa230C64uar5sNcjzp0z9v3RAlV4N40XbMGB+\
aGq8Xnur8C/\
bwoscu34h7vvGfHGOEnDdcKgE90nEBVtE0Ux54CTaPl2VG4fDuFPxHaLTp4IVTmDiLPvF9sfDCrzeF\
EKs3WwL0uH1DAggB+OKLbc7NKV6nBFJIgO8uK5fNtlU1KF43Nm+\
9pTH1AwwR8im5QnNfrJUd6Kj7OsfFbeSy5kmQ973uYYU5EbR38L6SEMuj6fCM5IQL2jq1ZvDKqkJkd\
6yH5QgYU44RUj6y3zsN/dwuRJI1Z5EdUnH4sCW5sQ/\
iX5Z4APgqc6aO7bn6PJuW8wmEMe16gKaJMvTZntM95tMN25oDnRfEnxL4j/Qu02h2xT+\
6qawsgd3a0K3JnRrQrcmdGvC/7sm2IjxX+k3/VS4Vg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max9494$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min9493$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3137896$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min9493$\
3137897$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9494$3137898$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max9494$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min9493$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3137896$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9493$\
3137897$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9494$\
3137898$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137876[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9493$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9494$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3137876]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137876[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3137876[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkUYR7AsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+\
G28PXOzuvHAzGMgatieRq2BYyzyQokvQQ6IYx7xjwb+74uDx+\
KhgLyfeC8Iioh8Y7kRAbGMGBYT7et15tpu5hYhp4DDK+\
dJqsPEdtL1BaUp5OyCzHNy4ma7stMMhUOW7ul9ysU5AL/xY+EKGNyXls0vZsCfQL44rRd15W/\
5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+bDTIi6dM/\
b90RJVeDuNF2zDI7NjUeLX2luFftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G\
34jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/SbyzkuL4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.028", 
    "parsetiming" -> "0.768", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa445623he0i5301165a0h00001eb53aefc4cc82h8", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "51", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa445723he0i5301165a0h00004cg6g5a67bc26139306620017200445608", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 37, 20.7354374`9.069288135553803}, "Line" -> 
    14, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot  the sine of x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{280., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[14]:=",ExpressionUUID->"41fdce90-753b-490a-92d4-c534dbd8d83c"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$96286#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6.6, 6.6}, {-0.9999998464014627, 0.9999985917009981}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.757109841076737*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"097e7f67-7e16-453f-a8f2-8d1faed012db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph of sinx", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "2", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2879$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2878$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$701897$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2878$\
701902$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2879$701903$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2879$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2878$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$701897$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2878$\
701902$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2879$\
701903$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$701875[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2878$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2879$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$701875] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$701875[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$701875[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMGCBtH5AQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9Pnmy42trU2PgqEMwRiqhH7dFjGfKNA07SHQDW\
u2OYjv/vikPH4uOI/\
pj4KKhOpH1jtSQCyMFMAxneBbrzRR9zEvA4KAIpfOkhPndtsLtFFMZCM6zfGNC7naaIsLKtOemgclN\
av046O/jQ9k7ELyHpezOzv+wsK4WuydF9U/p26A53dt4ZU8WcobpveeI21g2DHVi2y+\
aF0lT0jVsi74GVWXNFvWGuPFE6b+Rzpk2iyG8aptGHR6ZCu8XHmL8G/\
awsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3HCS3Dg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2881$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2880$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$701987$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2880$\
701988$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2881$701989$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2881$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2880$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$701987$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2880$\
701988$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2881$\
701989$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$701967[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2880$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2881$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$701967] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$701967[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$701967[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMGCBVSEhoLzAmDShJ+\
d5b7KQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/JkYzSfq/X01et+SA5SW/\
g6bE1u3KWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnN/g+\
8KTgYOhXwzgzjOrJvoJ8yhJde0aKHdufTLhMgLOf9Onw+dbr4dCjYCgjMIYqoV+\
2RcynCjRNewh0zZodDuKbPz4qj58KzmP6vaAiofqB9Y4VEAsjBXBMJ/\
jWS03UXczLgCCgyIWz5MS50/YCbRQT2ZjOcnzjXK622uKCyrSn5l5JzTr9+Ohv4gMZu5C8x+Xszo6/\
sDAuF3tnRfXPqRvg+W1beCVPVvKG6W1zpA0MO6Z6mc1nravkCala1gU/p+qCZstGYzx/wtT/SIdMm+\
UwXrQNg86ObIVXK28Z/lVbeJljy8+lfd+\
az95RAq6aDJXcPkpS8HkUzZQHXqDt09W5dXiMOxXfMTpDKljhRDbOsltcdzyswOsdIcbaTTYgHVFPg\
Ijm1LqI43aPZczsTkFBYoHn1/XLHhvLOpSAO9vXngnC7PjyhKxbm9AcpAt1B5NMv/\
xRcSu5nGky5P1AGJpRtVb0t7A+ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++\
YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1KRmWlzuw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyd0e8Jf3BOWduBu\
SeiWhG5J6JaEbkn4f5cEFzH+K/0GHCy3Dg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.623", 
    "parsetiming" -> "0.379", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa148401f4d93ei2c42df7b000036d4637h35h6deaa", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "50", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa148411f4d93ei2c42df7b000040e4a158ebe5c08h1047509949900532972", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 37, 38.5428229`9.338518404992485}, "Line" -> 
    15, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "graph of sinx"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{280., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[15]:=",ExpressionUUID->"c765bf1e-0431-4ac3-a975-41b308dbedb5"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$97201#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6.6, 6.6}, {-0.9999998464014627, 0.9999985917009981}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.757109858797762*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"349ad743-d632-4dcc-bfaf-25be47d45784"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "picture of sine curve", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "2", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11212$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11211$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4661748$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11211$\
4661749$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11212$\
4661750$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11212$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11211$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4661748$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11211$\
4661749$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11212$\
4661750$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661728[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$]],
                     6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11211$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11212$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4661728]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661728[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661728[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNDYNviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+7s7m692H7pYTCWERhDldDbbSHzTIGmaQ+\
BrlnzloP45o+PyuOngvOYfi+oSKh+YL1jBcTCSAEc8wm+\
9XIzdRcTMyAIKHLhNDl5DtteoI1iYjqmsxzfOJ+srbbAoKbac3Ov5Gadgnz4N/\
GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/zecOQNDDumepnOZ63r5BmputZFP+\
fqoubLRoM8f8rU/\
0uHTJvlMJ63DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AbOiuLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11214$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11213$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4661833$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11213$\
4661834$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11214$\
4661835$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11214$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11213$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4661833$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11213$\
4661834$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11214$\
4661835$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661813[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$]],
                     26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11213$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11214$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4661813]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661813[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4661813[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtBdNfEECOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfsWEZpv9fr6evWfJCcprfw9NSaoZzlshD03VmuQGsmRXoNn921JgazD5z8AOp9N615L9WM\
GH9+he8TnhScGPhqGGeGgZ4cKJJPWaJrz0ixE/uTCZcJ4ewnPN/\
d29t6ub3jYTCWETEGlNA7bSHzqSIa0h4C3bDmLSfimz8+KY+fCs5j+F6ASEA/\
st6xItTCSEE45hN869Vm6j4mZoigRNFLp8nJc9j2Am0UE9kYZjm+cTFZW22Bicq05+ZByc06Bfnwb+\
MDGbuYvMcl7c6OwLAwrhh952X1z7kb4Pl1W3glT1cTh/\
m94cgbMewE9DKdL1rXyTNSda2Lfs7VZc2XjQZ58ZSp/5eOmDbLYWy3DQNmx7bGq7W3DL/\
bFl7m2PVzcT+05rN3lICrhkMluI+SFnweRTPlgZdo+3R1bh0e417Fd4zOkApWOJGNs+wX1x+PK/\
B6U4ixdpMNSEfUMyCCHKyLOm73WcbMcEoUSSzw/Lp+\
2WRjWYcScGf72jNBmR1gnpB1yxOaw3Sh7sQk0y9/VNxKLueaDHk/\
FAYyUGtFfwfroyy5go5lYCQxXtDUazCHVVIjooJlPyhB4pwIhpDsl/24b/\
7hYiWQqgOF6lKexYErzVl4Ev2ywEcgMjNt7tiBoyu4bTGbSJ7WqotYmi5Om80x3W8y3bihOdBDSQgt\
SfhA7zaFblP4q5vC0h7crQndmtCtCd2a0K0J/++a4CLGf6XfUr24jg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.35", 
    "parsetiming" -> "1.11", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa340612f536fgcd9i6g5c000028e7gg6ge2a4g061", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "37", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa340712f536fgcd9i6g5c000062bi8f9557ac2gb36906199230979105176", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 38, 1.710774`7.985767627746953}, "Line" -> 16, 
    "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "picture of sine curve"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{280., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[16]:=",ExpressionUUID->"346387cd-b71a-4c5e-8895-09cef271bc69"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$98127#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6.6, 6.6}, {-0.9999998464014627, 0.9999985917009981}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571098820660653`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"3f9bb9be-7c38-4e3a-bc74-7e48395fa338"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "100 digits of pi", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", 
        "(First[RealDigits[#1, 10, #3, If[#1 < 1, 1 - #1, Ceiling[Log[10, \
#1]] - #2]]] & )[Pi, 1, 100 - 1 + 1]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"first \"", "100", "\" digits\""}, 
                    "RowDefault"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox["\[Pi]", HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "NthDigit", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(First[RealDigits[#1, 10, #3, If[#1 < 1, 1 - #1, Ceiling[Log[10, \
#1]] - #2]]] & )[Pi, 1, 100 - 1 + 1]"}], 
       XMLElement[
       "moutput", {}, {
        "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, \
6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, \
5, 1, 0, 5, 8, 2, 0, 9, 7, 4, 9, 4, 4, 5, 9, 2, 3, 0, 7, 8, 1, 6, 4, 0, 6, 2, \
8, 6, 2, 0, 8, 9, 9, 8, 6, 2, 8, 0, 3, 4, 8, 2, 5, 3, 4, 2, 1, 1, 7, 0, 6, \
7}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            
            RowBox[{"3", ",", "1", ",", "4", ",", "1", ",", "5", ",", "9", 
              ",", "2", ",", "6", ",", "5", ",", "3", ",", "5", ",", "8", ",",
               "9", ",", "7", ",", "9", ",", "3", ",", "2", ",", "3", ",", 
              "8", ",", "4", ",", "6", ",", "2", ",", "6", ",", "4", ",", "3",
               ",", "3", ",", "8", ",", "3", ",", "2", ",", "7", ",", "9", 
              ",", "5", ",", "0", ",", "2", ",", "8", ",", "8", ",", "4", ",",
               "1", ",", "9", ",", "7", ",", "1", ",", "6", ",", "9", ",", 
              "3", ",", "9", ",", "9", ",", "3", ",", "7", ",", "5", ",", "1",
               ",", "0", ",", "5", ",", "8", ",", "2", ",", "0", ",", "9", 
              ",", "7", ",", "4", ",", "9", ",", "4", ",", "4", ",", "5", ",",
               "9", ",", "2", ",", "3", ",", "0", ",", "7", ",", "8", ",", 
              "1", ",", "6", ",", "4", ",", "0", ",", "6", ",", "2", ",", "8",
               ",", "6", ",", "2", ",", "0", ",", "8", ",", "9", ",", "9", 
              ",", "8", ",", "6", ",", "2", ",", "8", ",", "0", ",", "3", ",",
               "4", ",", "8", ",", "2", ",", "5", ",", "3", ",", "4", ",", 
              "2", ",", "1", ",", "1", ",", "7", ",", "0", ",", "6", ",", 
              "7"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DecimalForm", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "NthDigit", "title" -> 
     "Decimal form"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Pi, 100]"}], 
       XMLElement[
       "moutput", {}, {
        "3.1415926535897932384626433832795028841971693993751058209749445923078\
16406286208998628034825342117067"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"3.14159265358979323846264338327950288419716939937510582097494459\
2307816406286208998628034825342117067\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Digit counts", "scanner" -> "NthDigit", "id" -> 
     "DigitCounts", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "BarChart[<|0 -> 8, 1 -> 8, 2 -> 12, 3 -> 12, 4 -> 10, 5 -> 8, 6 -> \
9, 7 -> 8, 8 -> 12, 9 -> 13|>, ChartLabels -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               Opacity[0], 
               
               PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 
                0.}}]}, {{}, {
                Directive[
                 EdgeForm[
                  Directive[
                   Thickness[Small], 
                   Opacity[0.63]]], 
                 RGBColor[
                 0.798413061722744, 0.824719615472648, 0.968322270542458]], {{
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5460988028072107, 0.}, {
                    1.4539011971927893`, 8.}, "RoundingRadius" -> 0]}], 
                    StatusArea[#, 8]& , TagBoxNote -> "8"], 
                    StyleBox["8", {}, StripOnInput -> False]], Annotation[#, 
                    Style[8, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5460988028072107`, 0.}, {
                    2.4539011971927893`, 8.}, "RoundingRadius" -> 0]}], 
                    StatusArea[#, 8]& , TagBoxNote -> "8"], 
                    StyleBox["8", {}, StripOnInput -> False]], Annotation[#, 
                    Style[8, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    RectangleBox[{2.5460988028072107`, 0.}, {
                    3.4539011971927893`, 12.}, "RoundingRadius" -> 0]}], 
                    StatusArea[#, 12]& , TagBoxNote -> "12"], 
                    StyleBox["12", {}, StripOnInput -> False]], Annotation[#, 
                    Style[12, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{3.5460988028072107`, 0.}, {
                    4.453901197192789, 12.}, "RoundingRadius" -> 0]}], 
                    StatusArea[#, 12]& , TagBoxNote -> "12"], 
                    StyleBox["12", {}, StripOnInput -> False]], Annotation[#, 
                    Style[12, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                    10.}, "RoundingRadius" -> 0]}], StatusArea[#, 10]& , 
                    TagBoxNote -> "10"], 
                    StyleBox["10", {}, StripOnInput -> False]], Annotation[#, 
                    Style[10, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                    8.}, "RoundingRadius" -> 0]}], StatusArea[#, 8]& , 
                    TagBoxNote -> "8"], 
                    StyleBox["8", {}, StripOnInput -> False]], Annotation[#, 
                    Style[8, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                    9.}, "RoundingRadius" -> 0]}], StatusArea[#, 9]& , 
                    TagBoxNote -> "9"], 
                    StyleBox["9", {}, StripOnInput -> False]], Annotation[#, 
                    Style[9, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                    8.}, "RoundingRadius" -> 0]}], StatusArea[#, 8]& , 
                    TagBoxNote -> "8"], 
                    StyleBox["8", {}, StripOnInput -> False]], Annotation[#, 
                    Style[8, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                    12.}, "RoundingRadius" -> 0]}], StatusArea[#, 12]& , 
                    TagBoxNote -> "12"], 
                    StyleBox["12", {}, StripOnInput -> False]], Annotation[#, 
                    Style[12, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.63]]], 
                   RGBColor[
                   0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`,
                     13.}, "RoundingRadius" -> 0]}], StatusArea[#, 13]& , 
                    TagBoxNote -> "13"], 
                    StyleBox["13", {}, StripOnInput -> False]], Annotation[#, 
                    Style[13, {}], "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {
               StyleBox[{Antialiasing -> False, {
                  Directive[
                   Thickness[Tiny], 
                   AbsoluteThickness[0.2]], {
                   
                   LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 
                    0.}}]}, 
                  StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
                 StyleBox[{{
                    Directive[
                    Thickness[Tiny], 
                    AbsoluteThickness[0.2]], 
                    LineBox[{{0.5460988028072107, 0.}, 
                    
                    Offset[{-1.102182119232618*^-15, -6.}, {
                    0.5460988028072107, 0.}]}], 
                    LineBox[{{10.453901197192788`, 0.}, 
                    
                    Offset[{-1.102182119232618*^-15, -6.}, {
                    10.453901197192788`, 
                    0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
                    LineBox[{{1.4539011971927893`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    1.4539011971927893`, 0.}]}], 
                    LineBox[{{1.5460988028072107`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    1.5460988028072107`, 0.}]}], 
                    LineBox[{{2.4539011971927893`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    2.4539011971927893`, 0.}]}], 
                    LineBox[{{2.5460988028072107`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    2.5460988028072107`, 0.}]}], 
                    LineBox[{{3.4539011971927893`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    3.4539011971927893`, 0.}]}], 
                    LineBox[{{3.5460988028072107`, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {
                    3.5460988028072107`, 0.}]}], 
                    LineBox[{{4.453901197192789, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {4.453901197192789,
                     0.}]}], 
                    LineBox[{{4.546098802807211, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {4.546098802807211,
                     0.}]}], 
                    LineBox[{{5.453901197192789, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {5.453901197192789,
                     0.}]}], 
                    LineBox[{{5.546098802807211, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {5.546098802807211,
                     0.}]}], 
                    LineBox[{{6.453901197192789, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {6.453901197192789,
                     0.}]}], 
                    LineBox[{{6.546098802807211, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {6.546098802807211,
                     0.}]}], 
                    LineBox[{{7.453901197192789, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {7.453901197192789,
                     0.}]}], 
                    LineBox[{{7.546098802807211, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {7.546098802807211,
                     0.}]}], 
                    LineBox[{{8.453901197192788, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {8.453901197192788,
                     0.}]}], 
                    LineBox[{{8.54609880280721, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {8.54609880280721, 
                    0.}]}], 
                    LineBox[{{9.453901197192788, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {9.453901197192788,
                     0.}]}], 
                    LineBox[{{9.546098802807208, 0.}, 
                    
                    Offset[{-7.347880794884119*^-16, -4.}, {9.546098802807208,
                     0.}]}]}, {}}}, 
                   StyleBox[{
                    Directive[
                    Thickness[Tiny], 
                    AbsoluteThickness[0.2]], 
                    Directive[
                    Thickness[Tiny], 
                    AbsoluteThickness[0.2]], 
                    Directive[], {
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{0., -2.}, {1., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["1", TraditionalForm], 
                    Offset[{0., -2.}, {2., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["2", TraditionalForm], 
                    Offset[{0., -2.}, {3., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["3", TraditionalForm], 
                    Offset[{0., -2.}, {4., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["4", TraditionalForm], 
                    Offset[{0., -2.}, {5., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["5", TraditionalForm], 
                    Offset[{0., -2.}, {6., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["6", TraditionalForm], 
                    Offset[{0., -2.}, {7., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["7", TraditionalForm], 
                    Offset[{0., -2.}, {7.999999999999999, 0.}], {0, 1}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["8", TraditionalForm], 
                    Offset[{0., -2.}, {9., 0.}], {0, 1}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["9", TraditionalForm], 
                    Offset[{0., -2.}, {10., 0.}], {0, 1}, Automatic, {1, 
                    0}]}}, "GraphicsLabel", StripOnInput -> False]}, 
                  "GraphicsTicks", StripOnInput -> False]}, "GraphicsAxes", 
                StripOnInput -> False]}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {False, True}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0.3479427549194991, 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              CoordinatesToolOptions -> {"DisplayFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& )}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {{{1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {1., 
                   FormBox["0", TraditionalForm], 0}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {2., 
                   FormBox["1", TraditionalForm], 0}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {3., 
                   FormBox["2", TraditionalForm], 0}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {4., 
                   FormBox["3", TraditionalForm], 0}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {5., 
                   FormBox["4", TraditionalForm], 0}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {6., 
                   FormBox["5", TraditionalForm], 0}, {7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {7., 
                   FormBox["6", TraditionalForm], 0}, {8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {8., 
                   FormBox["7", TraditionalForm], 0}, {9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {9., 
                   FormBox["8", TraditionalForm], 0}, {10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {10., 
                   FormBox["9", TraditionalForm], 0}}, {{1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}, {10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[0], Selectable -> False], TraditionalForm], {
                   0.004, 0}}}}}, GridLines -> {None, None}, GridLinesStyle -> 
              Automatic, PlotRange -> {{All, All}, {All, All}}, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NthDigit", "id" -> 
     "NumberLine", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "NumberLinePlot[3.\
141592653589793238462643383279502884197169399375105820974944592307816406286208\
99862803482534211707]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{3.141592653589793, 0.05654866776461628}]}, 
                  "3.141592653589793`"], 
                 Annotation[#, 3.141592653589793, "Tooltip"]& ]}, ImageSize -> 
               300., Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{2.199114857512855, 4.084070449666731}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "NthDigit", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.802", 
    "parsetiming" -> "0.467", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa11421bdd7hcfhh4gee82000017196b220fh42308", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "55", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa11431bdd7hcfhh4gee8200002h94h21e032b95228707379056943765232", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 38, 23.014805`9.11458222597904}, "Line" -> 17, 
    "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", 
    "(First[RealDigits[#1, 10, #3, If[#1 < 1, 1 - #1, Ceiling[Log[10, #1]] - \
#2]]] & )[Pi, 1, 100 - 1 + 1]"}, Typeset`open$$ = False, Typeset`newq$$ = 
   "100 digits of pi"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{517., {167., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[17]:=",ExpressionUUID->"2c2dcc44-1abb-4364-9bc4-e03ae063af2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "1", ",", "4", ",", "1", ",", "5", ",", "9", ",", "2", ",", "6", 
   ",", "5", ",", "3", ",", "5", ",", "8", ",", "9", ",", "7", ",", "9", ",", 
   "3", ",", "2", ",", "3", ",", "8", ",", "4", ",", "6", ",", "2", ",", "6", 
   ",", "4", ",", "3", ",", "3", ",", "8", ",", "3", ",", "2", ",", "7", ",", 
   "9", ",", "5", ",", "0", ",", "2", ",", "8", ",", "8", ",", "4", ",", "1", 
   ",", "9", ",", "7", ",", "1", ",", "6", ",", "9", ",", "3", ",", "9", ",", 
   "9", ",", "3", ",", "7", ",", "5", ",", "1", ",", "0", ",", "5", ",", "8", 
   ",", "2", ",", "0", ",", "9", ",", "7", ",", "4", ",", "9", ",", "4", ",", 
   "4", ",", "5", ",", "9", ",", "2", ",", "3", ",", "0", ",", "7", ",", "8", 
   ",", "1", ",", "6", ",", "4", ",", "0", ",", "6", ",", "2", ",", "8", ",", 
   "6", ",", "2", ",", "0", ",", "8", ",", "9", ",", "9", ",", "8", ",", "6", 
   ",", "2", ",", "8", ",", "0", ",", "3", ",", "4", ",", "8", ",", "2", ",", 
   "5", ",", "3", ",", "4", ",", "2", ",", "1", ",", "1", ",", "7", ",", "0", 
   ",", "6", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.757109903098625*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"5b75073c-3936-409d-8a9c-c0d663496730"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "integral of 1/(x^3+1)", Typeset`newq$$ = 
   "integral of 1/(x^3+1)", Typeset`chosen$$ = "Integrate[1/(x^3 + 1), x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "integral of 1/(x^3+1)", 
                  Defer[
                   Integrate[1/(Global`x^3 + 1), Global`x]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "integral of 1/(x^3+1)", 
                    Defer[
                    Integrate[1/(Global`x^3 + 1), Global`x]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", "^", "3"}], " ", "+", " ", "1"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[18]:=",ExpressionUUID->"687d0f58-f28f-4b21-b689-1f8bb2b1c309"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ArcTan", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "x"}]}], 
     SqrtBox["3"]], "]"}], 
   SqrtBox["3"]], "+", 
  RowBox[{
   FractionBox["1", "3"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x"}], "]"}]}], "-", 
  RowBox[{
   FractionBox["1", "6"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "-", "x", "+", 
     SuperscriptBox["x", "2"]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.7571099588324842`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"74e244cd-f30c-46f0-a5e4-75dbcc5b8633"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot of cos(x)*2y", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DPlot", "3D plot", 1, 1, "Input", 
        "Plot3D[2 y Cos[x], {x, -6.59734, 6.59734}, {y, -1., 1.}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    RowBox[{"cos", "(", "x", ")"}], 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "2", " ", "y"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "3DPlot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "3D plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[2 y Cos[x], {x, -6.59734, 6.59734}, {y, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[
             GraphicsComplex3DBox[CompressedData["
1:eJyEfXmcz9X3/1RCkiLJEiXaS5siyXmnjZS0KKWUUCmlaFOSCimSFEWbTwsh
sqcwd4wlTMIYk30ZjJ3B2Lef3q/n87y/7yfz+M0/83g8H+dx3ueee+69Z7v3
Vfnptg+0OjklJeXHUikppxz7v/fhl4qPaFE+rfLye8ccPbo9XHD6b8+UaHsk
PHNSrav7flfG8QfHfdfs9TX7w8Jhpz7QcXEpx6+e9PrMP/uNr9P91x82zri0
hOPfZnUq8uaa/RbxKez47EaNPjyj7RGL6I8E4p0unpO/dcYa4Nscf+GRpSWr
zN0ZUvBHPPp/NIDelB78TflDntiJ5SkRU/kx3piOF/qJqX6gz5jqk3p+5tWR
/ce/uDm0SjulSfEyB1zPxD9bW2fAiGv2uJ6JX9rk43IDHx/jeiZeZ3ybwiOv
2eN6Jn7eoU++Or3MAdcz8fG9KrYcvGuV65n4e22//F/d8/Ncz8Sj/wddz0pP
PSt/6vnE8pSIqfzUs46Xelb9UM+qT+p56Olnd35xaW4Y8lqT+sUm73Y9E//n
7JULc9/Z6XomXjn/2+e7XjjS9Ux8xZePnbrhnZ2uZ+JtBmcMOW3ybtcz8cVb
lw6aElvmeiZ+5ZmDn562YpPrmXj0f4/rWempZ+VPPZ9YnhIxlZ961vFSz6of
6ln1ST1v++G1Z6rWzwnbLh9eq2jLHa5n4ud0O3JhnX5bXc/Eb7igxRsL5w1x
PRM/tLN30Vi/ra5n4pMfOG1ikZY7XM/E70rt2LX6gGzXM/GH7fz3T3l3nevZ
5Yz/3+l6VnrqWflTzyeWp0RM5aeedbzUs+qHelZ9Us+t4na+NLSM2/km1zPx
3vF1ket6Jh6tox9dz8Rvia+7XNcz8QrxdbrJ9Ux8XHxdz3M9E+8c3wdWuZ6J
t8K6pJ6VnnpW/tTzieUpEVP5qWcdL/Ws+qGeVZ/J9pwJ/a8We87EfC0Xe87E
/PYXe86EPSwXe86E/awWe86Evc0Qe86EfS4Ue850e0+25wR9sj0n+Cfbs8pT
IqbyJ9tzYrzJ9pzQT7I9J/SZrOd04PNFz+ngM0f0nI7f/Uj0nA4554ie0zGu
+aLndOhhvOg5HXqbLnpO93lI1nOCPlnPCf7JelZ5SsRU/mQ9J8abrOeEfpL1
nNAn9Zwif9Sz4tSz4tTzifkULoD+SDgxvu04vKA/6rkA/sfh1HMB8h+HU88n
5lPmOJx6LgCnvRn0b2LPhvkysWfD/KaKPRvsIYg9G+wniD0b7C2IPRvs0/Xl
ckb2bGLPTi/27PzFnkUet2eXX+zZxyv27PoRe3Z9yv4MfLXoORN8loueM/G7
/UXPmZBzueg5E+NaLXrOhB5miJ4zobeFoudM+hGi5wS97M/OX/Znkcf3Z5df
9mcfr+zPrh/Zn12f4m8YzkcTf8Nwnpr4G4bz1/VMHOd1EH/DcL67nonDH3A9
E4f/4HomDn/D9az04m84f/E3RB73N1x+8Td8vOJvuH7E33B9iv8M/e8Qe87B
fG0Ve87B/A4Re86BPWwVe86B/ewQe86BvWWLPefAPteJPefATneKPSfoxX92
/uI/izzuP7v84j/7eMV/dv2I/+z6lHjQEL+4nokj3jGJBw3xkeuZOOIp1zNx
xF+uZ+KI11zPxBHfuZ6JIx50PSu9xIPOX+JBkcfjQZdf4kEfr8SDrh+JB12f
kt8wxOOuZ+KI303yG1hHY1zPxJEfcD0TRz7B9Uwc+QfXM3HkK1zPxJHfcD0r
veQ3nL/kN0Qez2+4/JLf8PFKfsP1I/kN16fk6wz5JdczceSjTPJ1hvyV65k4
8l2uZ+LIj7meiSOf5nomjvyb65k48nWuZ6WXfJ3zl3ydyOP5Opdf8nU+XsnX
uX4kX+f6/C77+7Sik0qnTbv03YuXjt8a7q+9Y/2KA5tC8fdeWLN9z1mOv3Lg
9C/WHNgEPZ/s+IQ3v/xs6cncZ/YE4rNaFXlm/ZeMI1YY8awDpaqnd2A+cI8p
PfjHlD/kiak8kD+m8nNcRdNWF+9TdWNo89g7r92ZlevjIn7Pwc9b352V6+Mi
fmT7Pw8+8tcOHxfxFV2KZ9V8Y66Pi/i29f1nFX52j49L6Tku5c9xqTwcl8rP
cd3zyO276vVZG7q9edopI4bn+LiIX3yogo0anuPjIt79n+JXDjp3q4+L+OV1
ii37IXWWj4t40YUXPNngoZ0+LqXnuJQ/x6XycFwqP8d1Qdw+V4a6V11R+YoS
y31cxE8+cNdl15RY7uMiXnry2yO/HZjr4yL+2t4ia4sXnubjIn5Hl/s2nv/B
Fh+X0nNcyp/jUnk4LpWf44rOkezQofVttQ+kZfm4iP9x8JGsw2lZPi7i/xu2
qXrfy1b5uIh3aX76oq0DJvm4iL/d7InSQ55Y6+NSeo5L+XNcKg/HpfJzXJG/
lxGaNfh9RJ/1M31cxJcfmHuk3/qZPi7ij1Uf065cqwU+LuLnZRXeMOWyUS6/
4pRf+VB+/V3Kr3JS/siPGh2++HDurOYDRrr8jh9aOaTlgJEuP/F/7rh9W+Vl
f7j8xOeWP23VIzn9XH7FKb/yofz6u5Rf5RT5DbiJ/AY+QeQ3/G4Q+Q1ymsjv
uMjvfER+/12R3+UU+zHMi4n9GOYxiP0Y5j2I/RjsxMR+HBf7cT5iP/67Yj8u
p6xrw7owWdeGdRRkXRvWXZB1bVin8BNWOI51bbKunV7WtfOXde3yyLp2+WUf
NuxjJvuwYd8Lsg8b9skg+7BhX/VxEcc+bLIPO73sw85f9mGXR/Zhl1/OTcO5
Y3JuGs6pIOem4VwLcm4azkEfF3GcmybnptPLuen85dx0eeTcdPnFzzH4CSZ+
jsGvCOLnGPyQIH6OwW/xcRGHn2Pi5zi9+DnOX/wcl0f8HJdf/FKDX2filxr8
wCB+qcFvDOKXGvxMHxdx+KUmfqnTi1/q/MUvdXnEL3X5q12Z9W3l98q6/9z7
zhXjrn/0sNcFiO/8+6WOpYrt8/w28amtHn3yk7qHfP9n/f22uJ1vdZz14mi/
2uDnGulPia8X5hOKOf8VLVdUqv7oYdcz+ayI74cbnJ58el57ystVvz7q9Qjy
efXi7Z/2rHvIz03SR+t3j+Pk3zS+D+/y85T0r8f3gawg86VxhNf3o31+vtOT
z53xfeaQ5+XJJ/p/2P0opWccR/rXW/yx+Lo3fL2Yyklc5aH9qB6gz5jqn/Sq
H9Kr/hknks9L03cXLl1sn/sVOu/EdX5pt2pXsNuY2i3p1d5ITz4jntx+pMrX
R72Oo/bMdcF454HSk6o8uHCfrwviVx8qMeHuR/LFr86FX7o20D5J3znji47H
+Mi5nAv/dq3bLemnzb/yfx9v3Ct+eC785DzdDzXu8/6H6Fz+2+2N9NH//W5X
xM/duynzp15bxW9P8OG867iSz32Vs4TTlxi85tR7HskXPz+hB86X6j/ZT0jo
mfPFOK50Tv/P2t2f7/NFvM0Vv+16/6c88Vdz4Meu8vkifZXrGiw5xkf82Bz4
w95vk/jdd54f3b33LvHPc+BXb9RzWeNZrytH/u0Mny/SR//zve5J/KyHryzz
9ouLxU9O8OF86biS/WeVs4TTj+g+v1CXn/IkLkjogfOl+k/2txN65nwxPh0e
X4/bfb6IPxDPF22U+G4p1vUiny/S94jvP9vFb1+K+GuRzxfpo7zWNokHlyKO
W6P+ocbp3o8R7atTfL5IfwH2G84X8SjPtkDiggQfzpeOKzleUDlLOP038bzc
RolDE3rgfKn+k+OLhJ6T10sm5nGe65/xeOaRtle0+DxX1ksm7GSerItM2Nti
jS80b+B9AJE9j5c+rmzf55Lz89no1/pb1kWCD/Ws8ievi4ScyfafGBf1ST7X
Hxy65OnPc8X+E3pL1mc68DSJ99PBP030lg55Zkm8n45xDZI+nwz0+aSJHhL0
yeNN8E8eb0Ke5HEl5Oe4tF7PcSnOcSnOcRWAH9eHQPkL+N3jcMpfAO51f4xL
7Dkd+YQ0yWOkI/8wS+w2HfmKQap/x0X/zkf0778r+nc5ZZ0Cn6frEXzmeX2B
+QTYiYwrE/Is1vUI+cfr+nJc1pHzkXXk8sh6cfl5XjA/gPUl9cRs1MtyJJ+z
FHmSRXouIK+ySPcxwz4gdcZs1PW8X9HzIdhnJC+0FPmcNXpeIP8zxSRf6nmV
5PpjNuqPS/S8cD5yLvjvyv7m40quS2ajLpkjeaeEfuRccH3KOW44R0zOccM5
LvaZg/ldZXKOG8472Q9zYCdeB3R6nOM+L8Rxzoo958AON6rfBbudYZKf97wQ
54V4VEfLUb/L+cg57uMSv8vlkXPccI7LeknoQc5x17/4Xa5n8ZMNfpqJn2zw
kyWvmIu83FoTP9ngT0odIRf5vbVB/GSDn+zzRRx+rOQnc5E/zNO4BvnGv32+
NN/F+SJ+6yUtdq6ptkHylgk+4if7uCSucXnETzb4yZLnTOhB/GTXv8Q1rmeJ
Qw1xkM8XccShJvkWrNNEnoT0iNeC5FUMcbfPF+kRhwbJkxjyAF6PJj3iR/dP
vF4f5R98vjSPJ3Go8jHlI3Goj0vyFSKnx6GGODRI/sH1IHGo61/yDK5nyacZ
8hI+X8SRT3N61sGRlzDJsxnyEiZ5NkM+RPNmhryN5tkM+RafX9IjPxYkn2bI
5wTJmyHv7fcmPG+JfJTmzQz5KJ93zXNKfsyQ73J7UP6SH3N6yYP570pey/Uj
eTAZl+evDPmrIPku14/ktVzPkqdye5C8lsyj56N83iV/5XYi9uN5LfaZaP5N
5kvyh4Vjmi9l/4bmgclf8zmyD0geqXBM81rkr/k08tf8A/kTx37u/DUPQ/6a
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
pCefuldu6H/PVx73xQr43ZjKyfHquIiT/013Ppo3r/1mHy/9AcSnLj9xxLMa
/7p/QjmJI452eYgj7lY/x+NozgvPC8ipejboWefL41b686SHPk38Ro+LJb/h
/EX/HneLnj1+l3yOwd50vRjWi647j1spP+mxLkz8fI+LJf/j/GUdedwt68Ll
lHXkcb3kxwz7ie6Thn1S82aG/Ur3YY9zJW/m56bEax5Hy36o/GMFyBPT+F32
SR+X7KueH5BzzXCuaT7TcB6ZnHeG807znIZzTfOZfi7LOej0kud0/nI+ujyS
/3T5WSfivEf/dztOPUT/nY/nBxoMrPjj2VOP+L5KfMknuesqvu91JccvnNLt
xWl7Eucy8XdO/ymv0vuHXG+s//75fKm8F3of9n2Y9Jf3eLHNsd9F3bmQ401b
n1G+2X0HHCefJbe0eGJBvYO+v5H+vYwuY6a/vtf3N+KdJxZ/4fKTjvh+VRBO
/hVf/NoGVzyKvrJCMZWH86jyEyef966tOzc196iva9UP6/jET723VpEZe/a5
3ar+iZP/WwvbL32+92H6aTGdR+qNfkXzc8cX/6j1HrUH+DsHfLxKzzoj8bxn
lp+XcXSf2hv8gt1Sh8pAHWqR1IkyUA9aJHW0TNRrVnn+jftbi4wOFe9em9hP
FOd4uQ+0fKlYt+9ez3d7IJ792di2tzy81/koTj0oH+qB+Fe1O15094I97rdz
Peatbv14nV47TdaRYR513Rnmy+NE8uky98q7Yr1Y5yrhePYtowo/XXGvzy/x
J9Oaf97+8X1B1pfBPl0PpK/XZPuUa2YedD0UgHseEuvF85/Ese5cbyoP9eb8
P6tT+p4rD+r6Mqwvj0NVD7KODOvI41PVP+vgxNMXPdzjqYp7TdaL65/vorCf
5MqPU14Zvn9snVpTHvgoffbZHu/kNZ3YdMtw5q+OeL/KgMde+/XuJ3I8/iV9
t8wh5z67lOf+EVN65m1I/+mdc4fu2ca+2VIxleflfhPK37ihpMdNN7xz4LI9
w5e4/OxXueji0ul9wiiXn3HErhdeHXNh62yXn/Q/dO1Ro2jplS4/6XffcP/9
r5Xe6PIrPeUnffPy//aff0Gqy6/yUH7Sz1t8Zt7lrbO9v4j0RSqMaNRj417f
30hfqf+BO/7zEzhe9s/U7nLfxXnFhvt4GS/sfvuq0x+tmunj1XtJkq/wfKn0
Z0o/j/t1Hu9wvCoPx0v6F268aPyTVTN9vtifUy3+Ls0gl59+/rZz50yvFDK0
f9jv6UgeyfOf0g8s/ULuV3ucQvlVHspP+uIXv7bv0pAh72Jl493ggS4/85b5
Ney1HjdM1b50v/8ieT/Pc0qfufcjJdf3M9FfsUrerUrIQ/nJ//aV33fpc8NU
eacuA+/Efu7yMy+667en6+c9Mk7vI/i9FcmXeh41+V24BH/KQ/q91/StvO+R
cfKe22i889nB5YnwH8LuUOF/F5/9mctD+uhdtUEuD+lvbfd0ub8q/OjrV+m5
fkmfP7vi9pfyX5d3RxPyUH7S9/lk6Porz/5M5cf7bB1SKX+kh4mW9/2QHX98
M8REfrwLN8jzoqRvPuzsQUOH8P0Wl9/pKT/pazR5+PoHa3wm78Ul5KH8pG+a
9W7Tqd8MkXeSM/Ae1+cuP/PbWz/N6//B6sneL0f66F3BeZ6vI/3p47aXWvPO
TNe/3meRvL3nz8V+XB7KT/rwxvN9e62eLO+WZ+PdtoEuP+P0nZd0q9j4rb+8
30zvWUi9w/Pe0h/o9z6kDuJ5dbnv5vdQpA4ieXtfvy4/x0v6Ie9/nPrEW38F
2T8N+5WPl3H9nlOK1cg/KfFOtd6PkPqU58nlXqTf15D6lOThff90eSg/6Ses
vbrcgZN4P7G8058ff2dsm/snpM/77N8N/+WL5LwznC8+XsZ9+bsarZx8Z5aP
V+8XSP3R8+dyb9fvO0j9UfLzft65PBwv6St2L//g9DuzfLykbzDv5Lof9d7l
4yV9y1tv7/hfnlD8GYP/4ONlPLtzzZcffthjkYk/Y/BPfD8hfZ0u71Tf9sbm
IP6M03O8pF/VevnE395NC+LPuDwcL+nfv+LUT3r3WBTEnzH4Mz5e0i/KG3nm
M9UPqP9p8Pd8vPRXty1YcfX985aZ+J8Gf9LHS/pnz3rhcNv/810Gped4SV+n
ypT+tzSbGsT/dHk4XtLn/rN9RtN5y4LIGSBnAL3joDfi6seK/AHy85zyuB5y
Oq7+s4zL6Vn3VP7E1W+X8br8GG9Mx0tc4wWx2wC7df0Qh/24ftRPFnsOsGfX
A3HYrePqn4udOz31oPyJa1wg9u/yUw86XuIaj8g+FrCPuX6IYz9x/ahfLf1I
3hchdUbvo5C6pPfjSZ+S10Gk/uj9G1Kv9H4/2Q9dfupBx0tc4xc51wLONdcP
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
gN/i/swS0Jd85sXe0wYe0LgjfCD1u/O/Pfm3Dt+tD/98/u34YQ33BPGfA/xn
518J9PurL276a8M9Gv+GclL3aVG9Vd9riq8JLctN+9/nhxL1dNKjz8dx0qet
vCPWt8TLGt8FxHeOPw36lafccckXh3ZoX1lAX5njkd6WhTXX/XFWhUKrtb8r
oL/L5WkI+pTUdl1/m9RW8xIBeQnH7wV9r5+br9v70GbpQ14R0Mfl5y/5t7++
XaFyhRL3F9B/GNB/6PIviethQWg678utpz36r/YBBvQBuvyLQP/UpEc/rv54
W7lnsTCgf0/6oBaEia9XqFzk0X+1nzOgn9PxKO83PeT9Gfv0j4MvaT+5oZ/c
8wxR/mSe3XR17/Y2bUFIts9FhnqE21UUDy62fZ0eX3VZlw16X8BwX8D5vw36
7U9NqnJduxVB6juG+o7XfUg/5YFXT971ygaTOovnV4m/A/ovB/f+7PIuG7S+
eVxeqEPJbjXKdltt6/4ocupVXyTuw+J+iuF+is/7m6A/d9HUn44+lbgnS/64
n+I4+T9QP791qd5rg9QlDXVJHy/pf2xWvdvVPRLxciHJNxJ/C/Rrujz+zjH5
g9wTMdwTcbsi/6rnzLn48FOJ+7bsu+sv+ZAb3qpyf/Oyudaw+upyd+Tmm9yf
Mtyfcv1UB/0/F45K7TthY5D7U4b7U4l+UdBf9XSx9NPXbwxS3zfU910/pF//
ebUerZbnm9TZDXV218+NoD88Lm/UMfmlP3ad4R6T64f8a30yakCfCRtN+mrs
FMkP7MhJe37o0E02YcSf1Z6ombj/i/t6hvt6rp880Hd98btFV5yVuP9L/uhv
8fGS/xWzLu399dX7TfpPPF9EfCfoz1nfJfeYPEHuzRnuzfl4yb/Rqf1KXHpW
4r4w+rsM9zdd/mENmnXZVXu7VVx2x/5V1+90/uyjwz1H5/8r6EfXuWXKiut3
ej5kRISH4RGu/AP4S1468U4L8enSD0b8Wen7Ij5V6JkHgJzhXPyuyB8gv9fR
dkV6C3dFetP5DZhf9zcwL+HyaB5Dcj3leDlPY3wt/UjDpB+JeBHpX+K4ML/h
bcgj8x4w74l7vpH9h+si+9d1HbCufVxYXwHr0c8drKOQNmror/9OaON5G9LX
iNa714/oJ3z8zqSHJ1yS63Vh8pmB35V1GrBOE/dqo/0tVIr2N8cb4BxvI+c4
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
9Htzhu/N+X67GXEi8gbSNzIafSPjTPRpT/27Ia3Hvb+b6N/uw/fpRM/4nuNY
uRc8GveC0/R7JYbvlch301LtkzGdrtz13BS3wwHoh/nfpb+sn1rhX9cbv7tx
Hr5bJ/sGvr85V+5NZ+De9GL9Lo/huzyOn4x49uGumasHtVig69o6nT/wtmPy
mOwDdhDf3ZP1ju9yzjVZ74b1rt/HMXwfR74DNc921i/a6acWC5wPv6PRp9AH
GSWvS7wHy+9o/LKrW/mO7RLf82J9De9LyD3rbNyzXqffPzJ8/0jvgxjug+j7
e/ie9Tp5Xzob70svCXIvI+BeRpB7HAH3OPS+Q8B9B/9dflcI3z2U70Fn4HvQ
i+Xd2gy8WzvX8SLI122L9Oz4JOy3pbDfip0E2InkhzPD/ZLnfBa/2wnniHyH
MeA7jPK91wx8VzrxHSvipXA+Jn+3Yl54APIkf2dhepiLc1DsKsCuXG/8rhC+
Rynfgx6N74CnyTuTo/Ee6VjHb0Uer2e0rh1vg321LPZV2d8C9jf39z6BPPfj
HCH+Hfbti/GdzeT360YjP5/At+B8byR51F2gf1joo+8ffT5pyNNnN9wy+pNJ
xDeCviHo5bucAd/llO/hjsZ3zNPkHdTReAd1rHxXKzVkQQ/J34P4Kmx6JDpn
Zf8M2D/FT/vF8H1S+S7waHwXOE3eRRyNdxHHmsyXYb5M5tcwv+oPGPwBnS/D
fOn8GuZX3iEcjfsy40zmpTbmpbbMizUUesy7Yd5N5t0w7z5f+E6r4Tut8v3x
0fiucZq8Wzga7xaOle93fGWYL/nuTKphftXfMPgb+r1aw/dq5TvUGfgO9WJ5
1zQD75rONdnHDPuYyb5n2PfUfzb4z9rXauhr1T5YQx+s1jVw/2ueSV3D/ROp
a1hHoce+avfLPTvsq7inM8/nkXrDd3uD7Kv4jvZieXc0A++OzpXv1Ew37J/y
naB5hv1W/XODfy7fO15geM9B47KAuEzju4D4Tvt+4ScvDJL3Do8Lzjrg1Sfu
c8O7LqvEP1kK/2Sjyb0Jv48g8akhPtV41hDPujyMK9siPyDvuwa87xrkHoTf
15D3KALeowjSLx2aiB6ew7nZFeevfF8e8c6qxDtpOB8zP57XKD+sFP82E3HE
KvcP6T80Kv3gi7vCSuGfDv7znP/t2LdX9jx66OLtf8v8pmN+E3Eo/HmcUwk8
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
ybxXDjyld/R+RX4Uvzj+eOTnYLz5Rrxf5OcYzxHia/HOBv0B4u/juwNFMS7i
0yM/B/tnac8TfhX5ezYY4yJ+VuRP4lwr5Hi3yJ8MB3DuE+8U+ZNWAfNFfEPh
XiWr3LfXQG9KD/4x5Q95YioP5I+p/DOi+M793ty71l746fRDXm8inpnVrNud
bfaG77K/Tys6qbTjQ/t1f3d6/U2O0z8slZK7/Mmu60Px915Ys33PWU7f98De
4rPrbzLipL/04OC8Fl3Xe72D9L++2OGW4h8dRJ72ZMf7F99zbd6b+Y6TT8XH
Xx5T9/6dsOe1fm8rP9InxrXH8bUrR+UuqZjpOPk8NLPpxl9umOd1FtJH/w95
fZN41SjfSz5WAH9T/pH+T/M4ol6DC6se0z/HFStgvDEdL/PnpB9zzszC9drs
pZ5jBeg/pvrHPMYKmN+Yzi/z1dq/Qbsi/a+HTpvyZNjvdsV87FzkaWk/xN9q
fVvtA2lrqR/nU2zdV+EYH7cf0v958JGsw2lr3R6I/zBsU/W+l+W5PWh8xHkn
fdfmpy/aOuBvn1/iVyGPzXlUes6jysn5Unk4X8RXIr/NedFxQZ8x1SfnRfWG
vE2a5qupf+L3RnUT1z/xnMyBA744tNpxxgufv3loxxMvr/B1Tfp7DhWZ8OWh
1T4vpE/d37ZGi5e9Lun0DaO6j8+X89kzq83cU7Y4Tj6N+6a2fXXseuyHaz1O
7Bqdaz6PxFtc9+Tyj2bPdJx8bj1lTM5FB6b5uiZ99H+X9ycQnxvVrYzzXgB/
U/7Iv8W0vkB7KGC8MR0v7YT0u6O6mNtJAfqPqf5pJwXMb0zndybsh3jfO5/O
qzEkj3n7NM3b066If448P+2H+NMNfh/RZz393tOc/0Oj9287xt/th/SrD8w9
0m99or+F+PmIo2knxJ+oPqZduVZrDHF00Dia9kD6SlmFN0y5bIrbg48LdZPu
Uh+ZgPoI5135YFwxHVdrqadckCx/TOXvLnWWGOosnF/VD+YrpvPF+VX9c14Y
L19Tqd0LfzVb4DjjzcOrH220b1iGr3fSn3ro6hmzmy3w+SL9AwfOr3B4WIbP
C+kzBt23ueMVKxwn/dK1NXfM6LnQ17XH71G84PNFfE/9cUsmjv7TcfIZtfnx
dbtKjvF5JH30f53PI/FHon4An8cC+Jvy57rW+hTnsYDxxnS8nMcC9BlTffp3
RUF/5dl31b3n4Bqf3wLmMabzyPllHmPAh3NnNR+Q5vPr+KGVQ1oOSPP5Ip59
x+3bKi+bRb15nSu7/GmrHskZ5Hom3hB1K+pT6akf5U89qDwcl8rPcTHPsHRs
6TOuqjLIccbpIyPc7Zb03Q6+m3PN/8FJ3zTCKWea1rOIa96A+iH9dR2aLzz/
g16Ok37vm3Hc9VMAvSk99VaAPMflMajPAsYb0/FSzwXoM6b6pJ6Zh+kVzYvr
0/FoHl2fxGdE8+76IT4zshPXj+Icr/LhuPR3Kb/KSfmZJ9kZrRfHmWe4PFpf
Pi7S3xmtU19HpE+J1rX31ZC+ZtT36HognhntD46TT3q0n7h+SD802pd8PZJ+
e7SPud4KoDelpz4LkCem8lDPBeghpnqg/gvQc0z1/Bf8EOLlovq+90exjtYL
9TXOF/HHo/PO54v40ujcxLslpzn/9tF+7v1RpC+HOmB3qUuORd2Q80X80egc
9/kiXiHyE5ifMc2PdZd65buoV3K+lA/nRX8X44rpuLpLHfNm1DE5X6ofzovq
k/EF812fRf6GzwvxPlEftc8L8V6Rn+k480grI7/U54v0EyI/1teX931Ffq/P
F+kfjfrAfb6Ip0V94z5fxO+P/G3Hyb9e5J/7PJL+lsjP93VH+iejuMDnkfQl
oj52n8cC+Jjy+QvzSPpGkT/p67EA+WMqP+ed9GdF/fA+7wXoOaZ6pj0UMI8x
nUeuX+IjozjU7YT5zL9Rt6U9EH8jimeN65R8GkfxlNsD6X+P4mW3B+LPI1/a
Xerd2ahHc96JD4zidJ934u9H8b6vX82vdpc6+OWog3N+lQ/XqY6L86jydJf6
+DLUxzlfqgfoP6b653ydWM/lPB/7S5Rn8Pki3jC6n+Lz5XndKC/kOPONv0R5
JKuCe0ak5/dYOY/EL4ryUY6TT58of+XzS/qPPv5hV7Ef9/k8Eq8Q5cccJ58v
o3ya93OSfkJ0r8fXNfEHonyd4+SzJsrv2aX8ThDp8V1a2kMB/K0A/qb8M2An
pC8S5ZfcTgoYb+zE4y3h9H9F95LcfgrQf0z1/xXiEdIXwnd+aVcF2ENM7WEW
7I342ij/7P262gc7BfsA8TuifCnqy2tN8+egjyk9fjemv8t+ac2j0k5OnO8t
HNN8NfuTNX9O/pr3I/8T5xsTfa3Ml5KP5oXIh/j3UT+2y6n5N/LXfCD5a/6B
/Inze17kr/kZ8te8EPkzbn0h6rd3/sQ3Rv38zp/4qqhv3/kT7x314XsegH5L
C/SD8Xf1HCQ98eg//ZnCMfUr+Lvq55C/7s/ko+cR+eg5SD66Tikn8ej/fpdT
90Py13272pVZ31Z+r6zb+dINV9Xr9dWhQJx55iLt2ny2r+9+5PmLOX3DjI4j
jtEbcdKf1WrPlmP0kH+Fr5dT5hy5Z1/G/kCc9OGcESPnlea6WGEF0JvS43dj
BcgTU3kwrlgB443peKkH72M/OHTJ05/vcT0QX3Ck7RUtPt/j4yXesdkTpYc8
ke/yK045lQ/l0d+lPFynzbtsrDKn9y7HmffrdcalL9boledykr7vVxtbH6P3
+SL9I9e1+OUYvctP+pqDi7/53qAdPl+k37zyjd/HrNjq4yqA3pSe4y1AnpjK
Qz0UMN5YQePlPnPdV3/Mue3czT4u4i1fye7U8uUNLqfilEf58HeJv3rVnDbH
cNc/95mXItz1TPzKiI/rk3iz6HcppylOeZQPf5f7T49ID76u6e81i/Tm8pD+
oUjPrjfS94nmxeUkfW40j65P0t8YzbvLXwC9KT3HVYA8MZWH+i9gvDEdL/XA
ffXaaB25HojPi9adj5d4h2iduvyKU07lQ3n0dymP+0vRPuM4/ZBF0b7kcpL+
jGgf8/kifYNo33P5ST852id9vkifEu2rPq4C6E3pOd4C5ImpPNTD/6vrzMO9
nrY/XiE0mofilqkjFXF1StLni6unX2bXkCGEiJKSebiohMpQlItSHElkiKuk
q8+JcCpXqXCJuBVSijTcjsKP736/Vrzd89fned7PfvZee+2912ftNe0q5lvw
+f500eXje2W7xv/lwqNrNDl3ZGX4f90/nuzhWwe+339KRk/oviniYz1eN8VN
rQ68c/lTKz5rszziZj1OIN2Dvg6834IGj3Y8YW3eVPVPwEf//G61y7puzM74
4vB1O35VJ/D3GjU/4byRleG39fiKc9e0Hbbg9c348afUrfls903yr/3x/3Kh
+aknyO883P4v2p/5j+In8vOzpXM/vr//auItc4+bHS3+gL+zqs22fSr/k7co
zndjyPl997hui6U7zczO1nzBV180f+wD/Vdn55l/7QT5xV7uu+2i6y+rH/re
rkPueqXFvosy6PH4T+gBP7XtsOO3vGp+0AM+4upl29zaZ2o2Z1TNl6f+uHPo
gXtP2HnXZvsuyq8sxvlUC/tq41qn7DRm9ezgs8vV4SaHz5Ychp8RJ3bA12UH
5CuzyZoXeI+ry3qdff1XundvW+52m+Hat+ALhwzc89Brv1P9rmqBj2z49MAu
NyxSvNOMkMPHLW80otWV3ymOa2nIW+LWZmvfgndY8vELtz35VXam1gv8pzqN
/tssX5nDN/Cp11/S+czrv8rWViEnHzd5eJXk4Sbxh/P+0Jr9Rp23YX32D/EH
fOyMf71RaPp9rvtsud9nh4k/4H3aXXPN2715T3ZtyDfiu0Zqn4B3b7r+gilH
f5Xl4ht41yW35U/3qMwUPxZyj/ixf4tv4AtevPP0cwrfZ+eIb+CnH7ms7PwN
6/O54ht4y1kDS7KmvMuzOuTGWZIz76b2oSeXpPb5FPEHfGTiT4a8Aj8xzUt8
mBH68AVpXiGvwBcn+nPoiboi6udCi2NBnoiegtMj+gtOf5+0b0MOHN7o2Vbf
vPmf7B3NFz1tYtpXitfdHCdAPuA/xYeos5HOUTZBfAA/+fk61Ydvsyg/WnwA
Pz6di7yx5AP4x90f3PDM2TOy60Qn+JvpfJFfGXog+ZWip+D0DDa/PPmbmm/B
5wt/kEvrSj5a1anW/Gxv0Yl/dmD9kjX1f56YXav24McmeUW+Yeb5hs1TP+EP
mpH6yf8l/mP/3zrJw6yb+U3IS7pG8if8EfsX6cz3Uf/g+yZ5Sz5v7vlT47Xf
aN86yW3xebNfg7wt9iH4QfJrvCr+08+mwcX/RT7I/BfkkUmOlbscO0D0gze5
tLgfFCe/OuRkr7SvkOcFl+cXmb2aPCP4hv55Ytr/wTfwaQ2L/03ybXPPh4Jv
tH85/X/JJw15+yfZk88ze/JbsiezPz3/S/Kq3OXVR0lu5C73HhE94JdKrkqe
F1yev6Bzil5XmuReNlH9g9+d9KjsefUP3kbtpReVu14k/arc9as31b/radIP
C64fSs8suJ6J/ol8K0v/rxgX/Pwk/0P/BL82/afIwy33vHXodPkseZ67PB9u
9gT0Oubl46J/Op3dLb+efP91Vdgf4I/z4RKzQ1J/QHpgueuB8zRf8P5Nfs7O
en0FemnB9dJq3RL/Q54n/So/Vf2D161b1Fuyh8V/8M+SHkV+evxfyE9/RfTQ
vnPSi/iP5P4fucnsnINk53zc7AldZDcQPQWnR/QXnH7Nt+Dz7W72UuoJKL+1
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
/4vvB/p3O+Foy1eCD+LzH/wdyGF/Bxx63C5a2/KVWMfm5mfn/9LK7GPjZB/b
z+5ZZbpnzTC72QtHJLtZPbObzZLdbKzZzabLbvag3ddW6b4GPZz3m//as+uK
pss5vyHHpk7ea+iqpsszxmVe9fds9OktV3zN/SXWcbtrrmw/4OQ5MS/w93e5
Y+vJG+ZGP+CvHj3u3E8Gz+F+FOv7ef/tW9x+8pygH/zMkbcPnrRhbowL/zdc
XRwX+2TgM9O4eg99QcjVp9O4QQ/4E8KhJ96hSPSEHx/8+ERP0Mn+v/Gyju9t
f/XXyI1y12P3s/vgU7oPPmj3wQukV5fYPVr6YTbC7ssX6T6LXQs8k32vzOyQ
u8seuMnu0c/oHl1hdsXG7ZNdscTu1xN0vy41++Gtsh+OMDlQ7dgkB9x+OFZ2
vDKzH86Q3W+Tyf8vJf8rzH7Y9vBkPywxebKX5Emp2QnHy044ogp54nbC0bLX
lZmdsK3se5uqkOfsN8crzH5YaJPshyVVyJ9SsxP2lZ1whNkx9pYdYz+zY2wj
u0SZ2Q93lH1vk9kJsW9UmJ3wpFbJTlhidg/6LzV74FayB44w+8Zusj+Umd0v
l11uk9n3pIcEPeAtD0n2vRKze/SS3aPU7Hgvy443wuwey2WX6Gt2vCtkNysz
O94U2dk2mb1O8jnoBL/vwGSvKzE7yaOyk5SaXe5Z2eX6mn7VW/oVOHraPvJD
ldm9YLruBRVmJ+mc+Bbjgk+R34r3lznXZ6X62DEu94gdkx04xgXfTfeLCrN7
XJz2T4wLXlt2D8blnLb/7KLFdTZ98od3unPFq/Q1/e0D6W9ldn/pqfsL/YDX
2X3yCbVaTg46wf8vncegE/wJ6YH0w3lculuxnyrfre5r+thI6WNlZs/5p+w5
9AN+SOJDyD3wE5LcCzrBH5deRz/hN0/xsUEP/522stuUmd1mZ9lt2OfgT8hu
U2H3rzvT/yLoAb9J/0HoiXdMUr36oIf71xOyn5TZfa1C9zXoiXo+sqtU2D3u
ljHpHldqdpUnZFeBHs6X4jCzIYrfAN9L7wJAJ/rSG9KXoBO8Uett7m531PKg
B3xAy/fqT613btAT741KHxthds4GsnOiV4C/aOcU/FjV/4c/4B10jysxu2hv
2UXRA8EbSp4wX/TAfa7Z/7kB3T4LvoE31LsA8AH87KvL6j/f77PgA/iEPXYt
+2CbU4IP4GNnnbDw1m6fxfoiHzbKP87/FLxSOPMCrye/OfQjN/pUNriq86oZ
QSf4ig09a82q/mbQCd57v6s+qqjdJugE7/vJXV+dtmpG7AfOe9fUf+xb8EWp
/zi/4C2bFvsP/QT8wtR/0B9x44n/0X/YARKfc/Yt+E3K92dc8El7Fvkf44KP
TPyP/2PkrUsvbWX+u+f0P2U/0P40vacAPeC1lb/Pfgt/h/xuzBc7xvR0vmKf
g1+i+mDwAXyPdO5iXPAmytOBD+AdDy6ex+ADeP90HoMPyI2fT0r2XugJ+63e
ZeiveFrwaXoXBnrAXxReYnbgfrID0w/yZ3/JH3DO6ROqqwPOObpd+bPgnIuV
quvi704Sl8J8kUvdt7jkwKWl6+I8gi8+6tvF2SHr4tyB9/uk+8xf2of8gZ7t
dX+kfdRZfbzT4B1+uTcxbtQR1X2KfsDrpH6Cb+CHpH6C/shvSvRHP+CfJ/qj
H/BbE/1BJ/x/TPd09j/3sscUl8K+BX86/b9C/wc/U/En7Afwl9N+iHs96ztL
+hvjoo/doHsWOPx8RPKTcWk/Tvc7+gdvpPsgOP1cIrnNOY33dnWvBKf97vov
0E/EUUsPBEevm6X7HThydY3kMPYQ9JllrZOew3wjH3N6ul+Asx+GSY7NsLiI
3m3T/QWc9qXNkzxkXWj/aTovMV/wLRX/AE4/20k+gyP3DpV+BZ3stxslZ2Z4
nEO7dK8BD3n1f0leQSftH0xyIOik/RTJT8ZFzoyS/kN78IeldyE3uI80SfIn
xgVvLJz7Jvv5DtkrwEP/kXygf9pP1/5HLoHXVJwAOP1cJrlE/+zP52SXAGd/
Hi45w7i03zn9j6J/8O6yq4BHva8kl+J8se61JJcYl3W5QvdQ8HgnTnKGfsAX
SS4xLv3srvsyOO0ln2Pc8D/qP0L/4KdJT6Yf8BryY9JPvM+l+yntwRUHEnKV
c/qx4gYZF/qP0v2dfUg/T+qeS3vwt3WPZn9GvUrdx8mXj3cfzut06q/1/cDj
vYNJDxfrxbFvwR/Rf3OB1cd4v0G1Yn0M2oOrblK0j/jeLkd2/bW+Ge3Bl+o/
y7yQe0tlv/L6DK8eu1uxPgM4981qbVqN/bWul9cHWDR/TrE+ADj8f2f6k8V6
U+xz8LcVf0575NK/uh+/xa91jWgPvoP0tAWWT31+jbXFPGLah99T+hXt2Ved
Xykr1skB51yflfD2yDfwzg+nuE3wkBsd072J/wXtP1TcJjjtD9D9i34iLjfJ
1eA/5/29xIegB7x3q2T/BGc/NG+W7i+se8R5Sp7QPup4pP9O/BfAa8l+Aj3s
kwVpHYMe8DbpPxj0sH++K033FOgB76z8O9qzr/ocluwb8C3qzslOAj3YNz5v
XdyH0+gHfJ7sluDszxfapnsN/dP+KNlLwWn/pe5H4Ozb12UPgZ6Ix07nLvYh
+Jf6X9MP+B6yc4KH31/3JvpHXlUkuRH9g4/Rf5Z+wN+S3RKcc1Gi+wj84Vxk
aZ9He/D5sm9AD3Lv9CTfgv8RN9gu2RXpBzyXfRL5w7mQ3hu4+3m517A/P1U+
Nf8F+NZK+jbtOY96ny7uRyHnld+Kfk7/+9u9g/N1q/6z8J/9fIH2c1V5oPyP
oi6i4uHpB3yE8sI8T5O4etqzP1WvJv5f0F9Ddktwzqnsb4FDf0/ZDTintK9I
8jnkA/ij8o+A008P2THgG/Q/J/oZF/xB2S3rWd7cIeIP9IAPEn+4B4FvKT5D
D/is3/vNQ270lJ8CHH6eI/sG44IfJz6D088piZ4YF/wh+WXA6eds2WHgD/Jk
g/Id6lne1kfSWxgXfLr+m/ABfHflQTAu+IOy69I/8meN/CnsK9Z3jtad/Qw+
XPES7E/wWxTnwD5nP7zSPV/289q50U/EpSs+gXHBzxE/6T/i3hVvAA79dyse
4P8BDxJ8qQ==
              "], {{{
                 EdgeForm[], 
                 Directive[
                  GrayLevel[1], Lighting -> "Neutral"], 
                 GraphicsGroup3DBox[
                  TagBox[{
                    Polygon3DBox[CompressedData["
1:eJxFnXn8FfP3x+/nztx7Z+bun6wttkqUbEmyJZQWkqJIoRBlSWTJkmyV7FTW
ouxC9n2XtSTZI4TKlp2y/17PXvN9/P74fObc95x5z3u29/ssr3POxsNG9Ts+
m8lkni5lMoG2rQuZzOCGTKaVtm3KmUwseqdKJrOJ6ILoH2uZzDX5TKareE8W
T6WaySRqz6r9hXomMzXJZBar7YxiJnOI2q/QsYeGmcytDT7+SNF3a1vUX7uy
tz/p2FaiI9Ebq4+cjh/HoHRsZ/3dqfa1tX8vnXcbNf+Yy2TuEN8d+n2Oxn27
znWk2luInqS2bUUforH9pd+/i95QvCtrPu966uc08bRUew/x/CueVaI76jz7
aGyTxPOHfmfL3n6j41aLXi36b/HkRP8puoH7JTor/hNFbyQ6LzrW2JuJDkSX
1D4wymS217U01bZNnMnsILqZ6K10rqHi+UJ9PaB7tp3a11X7e9qOUvsKtb+h
4z/XdpnOu7H2DVL7Jhrzuzp2C/0drN8HqX03HdNK2ya6L0eL3kl/f+tcB2n/
RuLfSNd/u+gmGteHJfd9g/Yv1+/lotup/6LonHhO1v4fdM0PiN6QZ67ruU90
C+6/znmO6N90zHUa82S9MGPUz5m6/+PUPk39TFDbcNFfiudd9bVM283V/pTG
8K/u+/1qe7Pk695RbYtK5r1G/fwh+l/Rx2n7Xc3vTJ17rDHcLLoqekv1dbLo
T8Tzro7fW31OEu/lOu8HWe9rK74ntB0l3lPU7xjRnXUfbtCYTxW9s+i3dWxv
HTtRx24jvtE6dqWO665rPJv3UOMYqvaLRJ+v6+uk9lNEiyXTh29D23d0zxfo
7zS176K2aRrDSaKbat9SMZ7FfeB+6xwnqP/v1La1+jyT5672QRXfN+5flPjY
HdTPMt4n9fGz2qfo2KM1zqEa70L9/lo8p+i4PUJfS3PxTdexV+jcp+pa3xbP
SrWP1HG/q59ftX+V+L8recx/aP9Hkd/z7/S+zFG/c9X/lTwrje98tX8jenu1
n6gxf6+2Jur7e66xwd8M384MnbOkfndW2986110az3lZ/450zF/i+U/7+6r9
Unj43nSenbT9Ted9RP1/pt+zdK4hvDfiWajtcxrfeeLZivdEv0/XNZ3eqOtW
nxeK53u13yqel0SfoP1f6dxjdN4f0+9ysto313Zdje88rkXnOlf8E0UfIv57
9PtG8Z+r38u0vUDb1uLvXvAzL+q4DyO/51+L9179fRN6fB/r3F+J50+9j5+K
/lr0d+pzg7rv50q17aZxrCd6d7V9IHqIzvGIePqLbtXg69pd9PqiW6ZzWF/1
M6ng53C86JtEd9e+t8Wzr3hb6nyLRPcRvVTXUlKf56nPrvq9EXMs35Paa2p/
Qu2tdew7au+r/ZuIflF0J9G7iH5B9Pait9PfOqIn6tiuan+N56u2dXWuV/lG
RO/Kb9Hrq62l6Jro8eI/LXQ/XGcHtVe0/VnPYS3xPS+6o9rq+j2X91n0yNDz
CXxb8D7xTamfX8TzsugduUbR74reT/QPGs9deg6r1d9mev7tAs97jTnTnzB3
6Frbij5Qx9yp7Y7at63aeun4Fsx7OjZSn0epbYnuyYvqr5Poy9VfrPZdRM9T
+8e6bwXRj/JuqJ9d1E9n/Z4teifR83Su5eJZS21PiWes+v9N/Y8TfTbvnOiz
Re/FNYiequuaxfMV/2S1b6preU/t/dT2iJ7voerval1LD/1uzjor/nNC3/8N
9Len2ptyzzXG7qKbwaM+3hc9WH0+rD73Lpt3D7Wfm/M9hO8btY/lHRPPTqLX
avCaeBjPW/StooeK3oJ3QPTWosvMsbpXW4ouiW5U+6Gi24luo/7v0X3bRudd
W9/E4Wpvr/ZtxH8kc7HovcVzEPOa6Jk6djvtWyZ6hNqu1nV92GC+j/V7mPp5
XmP7VPSRoueKflvHrNQ9GaztQuZ90YO0/afqb/kH0R3Ed5L4f9Bxi/X7R/Ec
yvuj9ouRH0S3qPt7/1r0Z/r7WTwn6n4vFf2N6Kd0HT9UPLcvV9u2FX/734re
IfQcDt/n9KvtMG1P0vk6qr2r6Btzfo7cl33Uvqm216j9XNE7ie6i8f6g812v
Y5/V8x2v9h3V/lfN89zFar9P7WeqvbPa/1T7cNGdRN+hfjrp+G9Zs9S2ed3z
7YmiV9U8r+Y03h3F8zPzv9rf0+8Oom/Rsb3qvs8HqH1f0b+IPlX07bqu5Q0+
34H6vZm2vbV/gOg2zJPqb4jotnyXoi8PPefAd7rad2AeUPvBjEn0rxpLoLn4
DL0L7XX+3/X7G7UfT991n2skfeuYD0TvL3qRrv0sXfvtuvbO6v/0dM16PzK9
Qvd1mdqv0vd2BmuSvrXNGIf6OEh/m4heqO2O2h7G+6ljH9SzvDvwt/yW7k1H
/Q3QvoHi20h8b/Is1E9b0e/ST8nHH44so+N2zlo2ur/s+eMV7f9W/JuK5y3m
v8iy2WYa84a6zoGiXxZPP538GF3PVF33++IdH1jGPVfbt9XnENGbVrydL/4r
E4+5jfo5QP1uoGMWaHug+rlI/dygfo4R335qP0nt7bXtkrWc90TZ8t3r2n8s
59a+MXyn2h7aYFn9s7Jl9bEa74El399h4rmKtU8MxzF3FnzPGtS2kG+Yb1H3
/APxXiCeI/iN3Cv6GNHv6vxHa6vDMjX19YnaJzEP67qOVPtbOs8zieW8E9R/
UfsWiz5f2yCx7NdeB3fTSTvo9wVq/7FoefV90V9qzCPEc7X25RPLuh3Fv0A8
GfHcK56P9Hes2t9H/mXe4B4yB8Qe4zbiv0L87/DOiPdjjXmk2tdRF7nE9Nbi
uUvX+an6PI73W8cfr+0H6nOLnGVXzjFV/bwn+mz1c6noRaJPE71+zs93T/W9
Ovb71Vx9thfPhdq3hbZf6m8d9f+y+PfWszwRPUpt9+vvNHQpnesT0Y3ieUY8
b8ReI17Ts39N9MaiXxK9QjzrsQaIZy99R6N17JNq26BmeeBR0SsSr/Uvin/3
yN/096Kn6RxjmHPE80rR88x2zJGJ56gF4mlV83jmav9tOk8U+tveUb+vYr3T
9kq1rQ48F5yn3y+IHqHx7Cb6GvF00fbegueBt9XnZeL/PfA88nviOeMttX/O
Wol8oGP31ztwgtqu1vn30O+K2p/W9u3Y8+j72vd3kq4Pop9W/9uIXsr9YUwZ
r1OPqP0LtT+s7T5qn6nx7K3t6/qbJp5O4jle/XZT/6O0PQD9Ss+tSapzISds
qu3QkuXmY5mfYq9Zn+pc76ifUO0Pqn2atn8HXudm6DzT9XcO85V48tr3iHiW
xF5Pl+vY20oe57vav1vkOXmZ2o8p+1m8yXPRuH9kDtE2W/Sc/y06tPoqqc+n
tG1b87V8qP3zxPcr3762b+l3Vjz3pXPXrjnPX2Xdt6PE84l+36VzHSB6rsYy
RfxzRM/R+/4bupJ4f9L+g9TXVur/lLznkiv4RvT7cvHfJXq2eK8UPZu1W/TP
OuYy1lONazv9vlz0b8iZWdPoJ3Ny1mvg+zSynP+92vYNvS63E8/6GufVog/T
+X9Xn9NE76B3/M+S9fQMfYr/ksB6Wgtd5zeir9X2c/V5VYP1/a6B9RGOv4T3
mHVT4/pVfV7Z4H4uVPss0bdVrP/T/+m63k00hqnICepncMHXvbbaljJO9Tsa
OSPrcW6HLqq25fp9jX5/qTFcp+0v6AFqmy66Le+cznGt6AZkQP1dzzPVvfoq
6/bNxLNnYN2EfReUrT+11bX/WHIff2u8g9T+sdpPUn/X6PiTNN5h4lmi896g
9qMK1j/RQ2cwB+v39jq2eeJzc67D1X6wrmUG3zT9qv1G0dl0bbkpbf86Mo3+
tUPF11IQ7yCdbw+1FXX+Iyq+h9zLkazZOu48jenLqu8HCnAF3UBkgKwkeqba
S8iD4l9L7VM0tg3F/52u/zpt79a+fcTTT31P4ljR3XXsDTrHZ+K5UDxnqX13
td+n9v80jkT37aqybQZ3oWur74v0u4t49hT/JaJ3E/2PeJ9RPz+rn1lq74Xc
r2Ov0P77QstC8L0gnl/Fc6v2b6++1lOf83Q//tCYXucdUPtF4lkYeJ0tq72b
jntI45mo9pfV/oXab1e/+zMPq31v5jTeG8Yp/gWB1/ELxD838DzToHt7qXjW
0f4bsKHo2L46dgK2BuY00e3EUxfPdRgXRJd5z9G3dB9PEM8XfFPqa221z0Cu
1/ifQ4/W9iad63Od6xJsJNrXS/z9Rd/J+qT2q7DPie8R8X+p7bOh721v8W2g
MfXRNq9z3qlj92adFD0j8Bj4/bD6+V6/r8eupb+vRF+j7W1l95ETf6C/dcV/
k9o2Dny99HupfvfU9jF0jarn1dmsg+rzX9F3i35QPH3F8x/zG/Ir8oP6axn4
nvD7EbXvp+0gZLPQ5+qn34+rnx/Fd6Pa26h9S7X3V/uW+v2n2u/S9vGyeSP1
ORlbknjO0XUXatZrXhV9q3h30D1ur98Hq8+c6Dt1758s+R5wbzbXWtZJ8/5a
6ucW8RfE8w62M7V3U/vaat9U9Faim0CnPO3U50xsAtgAda7B6j9R+92Jzxsj
S2RNR6LfVp+PaRvo72HRrXRdedEvZizLfJbKM7zjz4R+3uPU16Pav0LPd0uN
YR+NYR2NYQPRddF10Vdk3c9m2j6Yt17fTGNpinAonmrdfXMObILrqv1PfR8V
tW8keh3xNIpuLroiugYdegycm/XqP9FXi+4rnnM0pjd0/x/Wda2t8y7FzhlY
h0d/3xtZWjxPVG23XEt/u2at38ODfv6Y9q+Ts22zTc70Zzr2YbXXcrapdlU/
LfT7RPXTijkMPY25V+1bIAer/Sf9zcRurO2mOZ9vScbnhMZeelrZ1xCxpvB+
a/9lzFvqZxTvgtr6i64ir+jaDxDdKHor0btxf/hWq5YDkAfG6Ng5iceDHNIh
6+fOOn2Q+Ftp39Y69reqn/MSHdcd3Ur3tpna52FLwdao7aN6D3vouIuZ18XT
R8+vqdpORQ8Sz/Hq/0XxPRJ6vnpQf3six4m/seDv6xf1e72OfV6/P9S7f4Xo
rXXOA7C3FzwvfSOe57Qv1O8pan9K+8er/y3U31z1P1bn21fHPct3G3qunqi2
l0U30TGX6dhBGtvB+AHEt4uOP0j05rr2d9Dj1NcHVdPoNa+VrOs8WrZszrsX
Z6wrYOP+lLVY/fRWP4NrlsfRu1iGumbNg440sO5xMt7bef7hmmk001z/hml7
c9GyJ+sBawE69JzQa8lW6r+/TrqueM/Xtbyo9iqyg9qHqH19tW8jerDo9URv
J/ow0U1FXyD+uZxL/E+UPB8yL+awFWHz0rlfr5pmDuyiY7M65lDWO959vu2C
1yjGdnPG+it9PiP6XPE8L7osnkt0bGtdR1fdhwm8h6L30xieU18ni6+P2u4t
+fpYG9E1OfYJ9XOS9t+h7UL182rVfe+j7aE8I+w76udC0euqz/6iKwWv1z/o
OudgHxR9Rtn6InpjDluGjns/43kM+1spZ5l7Yd46ATaGITXL6pdqO6NkmRob
0sCadYqLtT1T5+2lYyaIXlfbs7GpJrYDYg/cVuP5S7+PQA7Hh6MxjhDPxurv
qpJ1KOycNxZtW1u3ZFvr+2rvoGM3VJ8XsVaqj0E1y/NHa/sE75To3qI3EP/9
yBLaHqHfP+saV6T6ypz0uUwv2W6G/ayvjhunv0PU/gjvuOhe2MBF78N8Ivod
zSPX6b68q+31JetV2FquK1mHwqbyWNG2kc1Lfoc76PexddtNsJ/w7SAzNMHG
UffajwzAPIzMgezB3H61jr84tGxzhO7nK7rmezWGVXnLWshc2LJ+QL6t28aE
rYm5fbj4XxfffeLPa6znZ/0t/JK3XQv71nSNay9dVweekXguy/q7uKfkbwi5
bIz6aab35pWabX/YAMvimalje+nY7ZhXdOy5Oraz2h9AF2uwnPN53nofdqTL
sKmFlhun6u8U0dOqludY81h3LhfPeaFlkrXV5yVZf5u9NIYDeR+RU/TXGxsG
/gJsf+Ifh79B9Leijxf9TdHr7Cp0VXwrof0an7NO6NjDNeabEvtEeuvaflZf
lyDnayyfimdD8Zyl4y7Tc/48XKOCrNFj0GdObLBNa3louxa60srQx6zUsX+J
/r5q2SBMx8AaxMf1S9U+wYro+xPbpes5+xF76Br3RKcSTzVnHuxTrHH/qs+f
tW2d8/q4mPFE9ut11vajotdo+mfdyYrnd2xl+rtOvB2r7o9+sZWv0R1D6xLo
SehLmGnwo30p+kjdw/Hi+UP0s+L5TsdP0v6jdB2rQ7fzDN7WM9pWfYY137ev
kGOqvg/IC/PV6TdV+0HquonLRe+csf4yXte7n84zWcf+GHo87fmesT+E9kMP
1b4Voj+p+hl9F1pWP0rbVfrrkfGzwM6o5jXrztupPWp2ztfSTO136Lr+Fv0k
dtqs+39I13WyxrCh2l7Xeb7VMYPE20R9XK1x/yKer9ELEp/r8oLnk1/T9vty
fvc66pg/1NeqBtuImUs/DG1/uxOZCLlW7d/rPX5czypET9RfM83BF+n+LRed
iB5fse2zdfp8v2R+1P15quZ3r33Ozwj7FnauCJuCrmVL0T20vTBtx/a1QscW
NN4Xan6+HLtX1vdqq5z9lAuzlquQqfBPNs/Zv/mLjm2n8VyFb6Xs46aI/oQ5
VPSLon9i/hXPxdghdI69c563scVja2+rwTVVWzNkpIz7bpH2/7z66aZ+rtSx
f1W9D7/bF8wp6G3qr7X2b6L2BRn7P7lGsa+RuRjzcO2flbePo6POmeg5LtWx
Mf6xxP6vRdqW1b5c7Qk+z5rncObymPlY9DTmJ7WPEn2t2o7RdmTOOvDUvP3+
BbXfKrrKvCd6a/EPRsbU9TbU7G+8RoOr6lxf6VxFnasJvl3W/JLl0E1T/z3v
Rtuc7a3YZdvlbPfE/rNpKrs2qp+f1U+p7m+d9wFfFzLSZjnbLd/R3+Y530fs
wdB6zdbI0cjTI9S+KGsaufoY/GXwl3xfW6b3NlPzb3S0fM06zcu6lpvV5/Zq
f0ks72GvVvtDap+bWJa/Ss/+XewL6BwV6wJdxb+Hfg9XPz15XtrW9DcUW5HO
Oy+xn/E1bMy6j3uLd1jF9ond0Qv4RorGUbxGn/hiRF8i+kb131E8h2OTEk8/
bY9S+7Fq3453C/9TYn3rQo1tuto7qP0e9TlN/Pur/Xh8SshWjFH0PNZ79DPR
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
Y9PNOQ==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnQnYFeMbxs93lpmzzJwz55MtZU22LImIJIWyhZJ9baEI/xbZyi4UKbJn
l0JF2couija77EkSIlt20v/+dc91fXN97zPvO+8sZ+Zdnue+73ezXmd3Pyub
yWQ+LWUyef3vXctk9lCiUemLKpnMYeVM5irZZ8u+N8xkFqncP7lMZqzszYNM
5kjlj1H+1g2ZzNvKe17HV2V3lD01ymQWVjOZTjpBR20vxZnMQOUfpPw2Ov4v
5f2mfQ+o7EDVva1OOkD5nZXfTPlX6vyvqEwfHdtC23SVfVz59+R9/veUv0r2
Gtm/qo7zlH+37BHp9c5U/kJtI5U+XtfZn5vS/x2V/6WSN+l631b+aKVP0f7T
lf+o7F6yN9H/a7FV33iV30n1n676N1K5Q2T/pTKTdXxf5beX/b3sb3S/W9Uz
me1U9l3lPaH0w8q/Kb3eHZTeQMcfKLuF7AN1zxO071rZQ2XP0jlPVf69afnH
lf+k9g1Q+iDt763ruVj/myn/aX4fpWs654FK/1vIZN7R+e5Tfdcof7D2vaBj
p8u+m+etayroWU6WfVvez4Rnc6zqGCf7MtkP63yPKP9W2eNk76R0SXXer2P/
p7yyzv+B9rVS/rHaN1fnvkv2lbI3lX2ons8dsi/P+5q59h0i191U78qnqquq
83VQ/rrUrzq3175Ddewvel4vKb1c/2PlP0q+jvlN9mayF8ruIPsU1d9W9oay
v9X9DFR9U2TfI3u26jtZ+W3S+r9Wfg/lj0yfx/3Kz8veWbaqynyuZzZJ5UfL
bqlr6Knr/0/n2072p8rvrEJ76PpvV7ql0ot1fR0jn2sb2V/IHqdzdNG7OUjH
f0JZ1XdZ+ntuovSTyj+eD0zbVap/W5W5SOZ6Ov4THf+3zreNyn+ofZ2072fZ
m8ieK7u97F6q4zl9bytkH61j++v6Jyq/nc73hcoOUn43vhft36fR+UXZt6l8
P6W/028wR+mrlR5Mvsp3TJ/f5RV/v7+r/gtl91R6qvadpPRTOvdkXd+zKv+I
yp/Fe6/jD9U1vKD83ZT/vfJnKn+C8nfT9Zyr+ztb9n6yV6nMKpV9R9f4p+q/
WPZwpU9S/k7Kb1B9e6u+P2Tn9DtsoOdzr46fKvsO5Y9S+Td0LWeqXFn2nbIH
KP0/5Xfl91W6o44fq+d7os59vLb5kZ9Xu7T9+E55D8keK/sovjuVf0r2/en7
/YHqX6xtktKDlX+m8us8x/T57E6bpHvcS3V/qWt/RulW2g6W/YPsF5R+S/Vt
rvLdte9lnb+Jju8i+zcdP1FlQtm75tc2O5llus9TVX6v9P28JL2/h2W31/FL
Vf5q5S/W86rKvkj1LVWZySp7rsqdpet7RvmTVP502QfLHiz7DZX/V2XO4Huk
zVZ6kn6fSbq+OUXdj57tcapvttK3qfzF6ffQXOl9E72Xuq5zeN+V3lR19FO6
ouM/0vH9VN9ryj9U2yKds5P2baC6PuS6lT5D+T2Ud4qOOV3pT7T/cNlnyo5V
x86qb4TSzZT+TOX/oh0r+PfdWPvO0zHvy+6j7W/lHVR3X/K70tOUHqr8d6lf
26/at0zbUUqfq+PX0fHn6pqPlv2V9t+j59FZx2zMt8G7rPQWOv5S5femv1K6
vbab0vt9QL/vXjr+DKUPU10jdXwz5Q9T/vH0D8rfR/mXy26h/dcpfxfZg2V3
pz/UvvW0nSv7KNk3qPyZsufL7qntc11DK93/JcrbQPWfwbXJPpVuSPZp6fVd
prIb6Zo3U7qt6j+S5kL5lyh/P9mny45kX8az0fHDZK8r+2PZz+iY/8keqP/3
6vpOVPkbaSuUf5vst1W+r+q+SdcyS+Vv1f/P9PuvrzJf6LwHc5z+Xy57Ix1z
s/I/Vf4ZOmaw3sdOyr9d+Rcof4Lu72jVf43SR1JW9R8p+5b093hFZY+RfUfB
ZSi7t/bdKvt82U10zI2q/yPV30v1bxO6P3lX9lvK/0ll35Y9L+82i7aL72tu
mn9Mze8ov1131TVa52+pMleo/r7pMx2u/BNl/6Dz3Kf8Gfq/vuzO+gaeVvo6
bW+k7WtW38O7qnNhan/Puyj7rbS/+VH2odru1/FXyH5E17uN7BEF/4Z3yj5J
53ug4GfOsx+j+t9Ojy+q/pO170Hl3yT7Qx27obYLZB8nO6/r3VP558s+hv5X
eW1kD+J7o/6K3zHetVP0f7zu52z9fyP9vs7i/dPve6LSBdW1SL/vQB1/sPLf
0nXcpfJNI49nQuXfLbui/M7K34vvU+1trPv9VO1HG5XfT/l55e+s/CP4Pir+
vhbKPovvVemztO0v+zWVv7PR3/88vgdti8t+/xcU3IYMUPol7dtF9kz6m5K/
5/cKfofPUXqpruEM/TbbKO94Xf/+Kv+q3o2m2mam7cOigtuQc5VervJnqvxt
Kneiyh+g/6+pbDNtzwX+fV5Xurm2F+hPdf/XKt1Dv1UvxheyL5bdWfYpdb8v
b6v+81R/C6Vnqb52sl+XPUrX9KnKD1b5ovafpPIr6ON0/lbKO1n2EJ3vnfT9
H6z08yq3sezmjD/0/1nZTfV/HcbY+t8kctvCb99Hx+/A7yV7tfIulL297AFK
H6J9rZSu8n2n9hW65udlD1J6V/2/Uc//MpU5rUCDrfdU9hqd79T0fWuhcxzM
OXT9/2r/k0qX6XOU31X5l6q+fXU9Dyi9ncouVX5R+Wcov0PGYz6ugXMfqPxh
qn8WY5q8+yT6psOVP0TpRuVfreN3ivyt0JacKfsIlZmi+i7TNdyta5ipbUPZ
++oZDtAz3KPusfhW+lbuUvog1Te64DaNtu1A2del7/tTjFd4x5VOVP8IpXfU
vlEFt+F36XpbRm6raGv6K/8wHX+D8rfQ+bvrt3tB599WNo/sbJ3/Rdk78bvI
Pl/29jr+UqU31PEDdPzeOmYT+nbZY3T/B+h8dxc8xu/C2ErPY0Y6Xl0me0uV
f0p5e6re4Tr+C+V/q/yVjFdVdzFwX3RJwXOMU3V907kY7b9I5XfR8S/p+A3o
t2Qv0fHf6Pjh2ve98lppe1bpn/S8LubZKf975W+sKq7SMc8G7kvmaOtKW172
tzm34DbgT5VpSdsq+y8d/7T2baiyr2jbj3ckcP8+S9vGKruFzvek0gn9osr/
Gniscrl+v62VflLH1FVXO9lPKP0TY2blr9CW1/P8IfBYdbm2nOxHVSZS+Z1V
fqrSJ6v+z5XXV+nRqv9U2Uv5rXS+MbJv1/4lur/luuaTVNchyn9b+R2Uf43y
3+Wbl/2etlV6JvNCzwUvVf1H6HyPM0eif9a+62V/HHosfqW2o2V3UX1vcD7m
uYzt9Htcz/VV/H5tJvs42sO0/85oTHmRju2nc/WWfUni8Qtt01myu9P/0v+n
7/+OtJl8v+n33qjjR+n4Yxi7y7448fiGtvB02Rfoen7X9WSV/z/GV8p/iv5B
+Wfz/er4q3T8kcofSHtJf6z8Hun73kH28PR7YGzzrd6PXxlfyr5FdTyo+/xN
9j6yb9UxLwUeL83Vtp3y71D+l8ofInuoztFZ17OAuZ32X6H679T/5co/n9+A
8ZHy5yvdWsdervzdtd0s+xTlzVd6N/pr+rN0vPOAjv9Bx++q8//CuEL5b+p/
TflXKv8HXe8/zM95X3Sv5yQeT9GX9FP+4MTj0dNk95X9W+Dx+Q/MUel7A48f
39W2r8o8pX1NVH5PPbMbdD/nBh6bX6r8j/QbHqnrvJ5jlb+78t/Q+V9JxwM9
lV6l+xuqvM7KG8L4Vd/wjYzVdew5skeo/tl5z4l+UV3XaHta+cN1zOE65had
L5Q9gW+i6Pn7iyp/kOyVyr9b+RWlJ/N9K/9f1X+T0pur3FDVf77yf6fv1L71
te9yxnE6/hnGKzrXxYF9EVcz/9Txw2hj0/bok9Dt1V0Ft2ldlZ6te3pa+fup
/Hp6vi/LfkJ2J9k3xvbfTJM9nfmA0i9om573HIm50qmq8w6VHYJPR9c/V/nP
puW/Vv5tup6i8idq254+M/T7MEjl91L5KwLPVUZr3+e63jd1/Jx0vHSU0rOZ
YxQ8RjkZ/432vaT8S7T/MOaLusbzVFdXfks9n+NV3zIdeyrvS9n+IBr3B7n/
iueXedmvyl4h+3fZWdmB6mii+x+j63tOx14seyLtZeD+8iNth6v8B4Hb+kXa
jlH+Ih1zh8ZLm2n/dTr/cYH7r1OU/7ru5wxd39dKP6N6R3F9sj+T/afyrq27
X+G3uFPXsJ/qP17v8z1KH8g4Wff3i67vP93vTzom1LlODTz3P0/2G6rjH9V3
ga71IN3/+apvgco/r/IHKP8e5eW03a70MpU9T/kV2ffI/lb2BbK/lY3Db1cd
P5jvMfBcc7q2H1Wmma77SKV3VZnRut9HtJV0fdvKvlrHnKLyX9N3qkygvE1V
/hil2yt/rOwNZPeQvYPszVR+89C+or3pL2S/r/f7dHxRKnsC8xtdz+ayX6N9
1P1foOfwYTp+OV/pB/QMOut5d9Cxv9Y9/zpQ+Y30QXyLuv9lyl9X9gjZPVXu
2Jx9Nqfrfq5R/hLZNX5j5XdTfg/ZHXlnlH+a6u+Of4Y2QPmHKf+InL/hvYr2
h74g+zvmH8qfpPIPNthnmcQeLw/C36Iy71btP2R8cjjzN93PDqpv55zHf8cW
3R6vUvlp9K86vr3y98n5G2nDGEh1tJO9EeM91XWP7D1kX0Ofr/L3y+4ou7Xy
X5fdTsd3kL058w8dP175u8m+gjZR+TfK3kH2tiq3iv5G518kO883rPu5teqx
2SXavpZ9s+zWyqerG1axf6WVbN1m5kLZF+r492Q3qPxAlZ+r/N31/Npqe0Hn
e1T2Ycpvp/LjVP5E+iveLa5P5V+nfpXdUdvzsed7LfN+Z2Yp/xHlH5Jz/zAG
36zsXbJ+J2crf1/dxwHp/fcq+vc4UPbOsq+r2J/6q+wtVf6WyOPJ4wt+x8bJ
3qTu9nSS6rmnbn/lDzmP8cZE9u8ukL2VyjRV+kHV31X2jrKvqbg9bKT/VPlH
I7d/G8juKvtp2UOYP6r8auY/srvrPEfl7KPtr+s9WPbhsveU3Vf226r/IN3f
z7JPVvkpsrspf5LqWxN7fDdH9nWyf4nsH39V9i+0ObKfUflEx9e03aryx/M8
lP5B+Scofx+db3+Vb0V5nW8C/sr0/PNjj+eb6Pr3Vf2Pq3xbld8z5/nLCSr/
ucr3y/obf135Zyh/mPLfpk1S/s06fqiOX4/vRfWNqNkXcrDe//fxb+gZHpn6
+09WW3CD8gfLXkfl94j9Ph0tu63yx1b8PQ+RfbTsh2gTZQ9L/fkb1exf/T7n
Mcv1up5bZJ+v/M46T9dGzx8vlH0y4xudr5Ps8/Ie076oaz9P5Xum1zO6Yv/Z
4bL3kP2f7vVc2UfI/k92Xdd3mewTZBd0/Cb4b+nT8u7THy95/nmR7D4qP17n
u1zlT5a9nfbv2+jv7bi0/pt0vtba3zfvPn+Gjt9Bdi/6X+a3jB0qnmu/quf3
aN1zcObidf2/qtHvV3fiEcxP8X3I7i37cKaASl+k7VjZWeYQsf2JZ6TPM1H6
Km398/6N+K1oHwfI7sb1V+z//zfnPvBuPd/H9UyOk/2Q8t9XfafSb8ieJXuI
fv/XdMxwpd/R9T6u6329Yn8Xfdstut5B+DRVvr/q20bl/yd7RM59dqvQ8aHh
st+R/bOOOU75vdLznVl0+3K+7AWyf1B+f/p92a/hP1D+q8ofkr6Pn8c+//WM
JZiHNPr76KP8qdr3pfKeln2K7InMx2Vfq/s9S/ef6Pra6vjrZJ+dPs978Bfi
c07tkYwVlD81HV/to3QvXc8Zqm+G7IG6npNk95P9OPNn2S/rfGem1/spc0PZ
J6f5H8p+jj5e9jTZy3W+J2SfIHuK7EXMV2WfJrtR3+AGVccTTpL9mPI/UP4j
Ot/8nN/nn9XOna72biVjSfoz5YeR360/8Qnp9/mv4rbgB3w4sj+L3Pb8T8/r
CD2v0arvEdU3n/dR179Q21DGD7L7qMxr3CPjX/pDxgKx2/YzlQ50/BuR+8rT
ZOdl/1px3/QtYzCdLxfZt/C77OGN9tHhQ8EHgy9mUeS26wwd373R/vOBOt83
tPeB4zf9ZH9F+yR7rK53mq73Td5/Xdt3Rc/PyipzZ+Dv6yGlS9ruwGeq/MHK
/1Plh8u+U8c/m7O//0vmxLH7tusYlzfaH0L8K9B2E/fIGIu+QulI+R8W7U/6
lfcxsL/wQ8a+2j6WvVL5U5WOGJ/hk9X5Zubs/1+s85Vi98U3MA5rdDzuA9mt
tH2ofUcpf0elP1O6Cc9T9b0ve1tt7zOn0jN7XPUcydhWz7d17LHQY/hj8FfI
biF7nuxTZe8ou4nsqbLrnI9vomAfEHNM/N8vM9egfWMuFXus9YjSJ6b+pg9U
/maV31bpg2L3tQuUP075C/X7ncz96D6OY/4ce+w1gfldo9/PJ3X8GB3/rs5F
YOQpPQ/9ZdaU7J96TOVjbfdxTh2/s9JfKr2ejj8Vn0vqL+1bsb9ztuxjZTcm
9le/o/JbaXszsL/ylYJjIpHSfZT/aupf7c34W9szBY9JpuhaJul8zZV+WOkf
df19ZLfl/cdPovP3kr0rYyX8AbILuubvZO9J/6x9DbK/Unp3vsHA8ZPXC/bR
Mmd9TG3GnXnHnIk9Ew++UmX/YHyl8ouL9lf+I/syfDGR+7JA6Q90PZfH7qsb
1BY11/lfVfmd8HVo3ytF93fL9TBPoH0qu0+lb91S6WNV/jWuN+f4T111zkrc
9ixWfV/XHU/9UXV10PY734DK/8L4nTmM7BZ1+5de1f4pSl+j6+nCeF7Hn636
/9b5tlZ93+ue56TxzTa6vp4q85fS83SNZ/E9qszcouPR/+X8jt8T+flk8/7N
748crwvy/g0mRu7z6Ps2Jg6k8z0de36xmc7fQfaU2GPFjWQPkf17xbH2Fbqe
2XXH515n/qZ96yi9Rd3+r5do9+rGPAATKBHHanQ8eA98RSqzmph+7LHQJqr/
HOW/on3f5jw+qer5PJe4b1mo/GWpf2AdHX+YjmnUvhGMO1X+OZUZrPu/Svb9
smfL/kf5G0X2D+InPFXHfxM7tnyhyuZ0vo20r4fyZzKu43vkHaL/VX7I9638
kSp/mOrqiT848txmlOo7utHt13jeT86vvD8ij1WvVH5J+V/Gngvsq+O3ZP5S
9/sJVqGH7E+Lrv9vHXOJjrlC13FXzjHRNaHHm+fofu+WfYbszer2Bzyh/RPq
Hj99qPJ76/htlH4g9th/fZVt32j/RlXHH6J9VcZDOu6TnPvfNQWPURir7Mb8
UeVPUJlxKrsF41Fdz3exx8pHaP/WPB8df2fan55ddHwa38N2ss+qef40EN+Q
9h0benxGPGQ/5e+EPzPxWG9PHfuArr+k/neEyh+r48Yyv9bz219l/9a1vV13
n0nfebbq6FPyGIW+nzFAb9mzdHxvfEPa35b+Tf8HKq+l9pWU3h2fXMb7+qr8
jfirlPcoc7TQ452+snuo7G6NHl/0kn2o7F1lt1CZS/n+VX5Lpdvo+KdU3+na
d4rqW554/M44vl2jx/CMnRhDnQYGQ/X1V/pkpXfB30/MT/YxOsc+KvsXvnuV
75mzf+sb2ZvK3itn/xkxRWKLbZmTye7J78r7oeN30vE7FD03ZY66S8n+pP2U
vlP7+in9VcFzX+bA+ChuY/5H+6B0S+KZiecnzFP4fe+ruv7dwFE02p/HtYxR
fUeFniMyV2TOvEfJ/qhOSt/aYB8lfnD84ezDP4WfAX8DPqbeOnbvwGOLC7Xv
dOUtSjx/Yx63vc63R+Bvd6j29QPrEPpZb6jj/1L6PF1fUfbfqmt9lX+S90n2
X0X3Zx8VPNdmzr29jt8v9P0eoOO3xz+W2H+AH4Hvcbnye8s+UfkHKH9Z4Pq/
1f28oLzFsguMr5mPyp6m7TrVn9O+31R+08B2kLNPaqbqryi9puj+7Zyqj/9D
9rq0b1yP6ipr33/atzjx+Jxx+k7KbxW4vWNMzTcxs+rrO17p1o32t58oO6vr
/TT0mJ6xPXMKfNh8k3ybjHmPkv1H6PfvFNoA5U2v+v3robwdG+3fP4Z70TXN
p43S+W/NeB/+/m1l35fxOfHvP8v3wveAH0bH/xDaPgkfGu9G4P6PMfiJvL+J
x++M49s0egzPWJ0xOz77LxPPP5iH7M54rGBfBz4PfHKXq/7uXIvq30PHTqva
PoS5nsqP0f/JstvruFfUvrSkfcvYh7IV37u26crvyHiZPk7Hv6G8F1XXL3pR
Zql921/2dqk/h3aA9oA5WcTvq22vrOvA370wtn/rQKV/U/mfdH112Vsov5n2
BSq/BfFX2S343mL7E9ZlnIB/XeXXpb3S826i9CptTWTP0fYk90c8P2MfzXRi
Ldq3ndIP5OwvvKbk9G66n5eVv3VonOF7WftL8Z+S3i/rGGBf3e9Kpb8oGm92
m57397KXFN0/jQicf5+u52xiDNr/gez/MX+TfYi2n1T/Eu17H/+Ejv9M6beL
np8cV/W31Up2QfaNyv9Y9ptFz1f2CteGeDIfZe1vxf9Kuqu2bYuO4eLL+0T2
W7K7qfDrSs9U+oe622HaY+aE/4Zu52nv6fNzSj+Kv1P2JnouP6v8vTr/r7K/
Lnr8/xD+IPof5W9HfF32KuUvV34s+6Sifen4DPekDwqc/whjBJ3v3cT+Mfxk
4CkHha7vcJXZTcf+WLAvC58WMQ3iFbTlMxkjKL0SX2/GbTL+/d2L9kXhk+Id
wmeF7wgfUqeSYzj46vDZ4ZM/TvkD8C/L3qnkeGBC+6c63gkdP7yL719l9lXZ
KPTcmWfWTfaf6pML4CMqHn/P1fPqpry9U//vfyrfTPb8vDFtjxCflb0R56Ih
VR0by56Uc/z+tKJjMfh0Dy3Zp8b9HKDr+KfuNp62/mDl76/89UL7NvimutM3
Mp5U+qh0fjWA/kv2atWxSGXPKDoWCoYLfNpZsq+W/VTemK13dfzRXL/2/8H3
V3B/9EPWMaStdB3jM35GxEvBGeK7ruUcLz0SH3XWbQbxy3/4XfPGKDIePVr5
/ZX/Ttb4rqNrxkv+WjKe8kf93zjvmBHjqT/oN/PGHDIeP0Lv1wJ8sTr2ReID
KhPJfkXbNO37LHTbvW7O4/9ONeMzvyoZD7dM/6O8MZjMF7oW3Te9zJhF6YNU
/4u8n0o/q/KrVH7TvGNmjIePVv6blMdXAl6Ab45vK+v5zGyVX5Gzjw18x9b6
Ha4sGIMDvqN5YjzYlyneay7vgcr/jA9D6a+1/xjmh9q+VXoh76zyVuEzUPpR
XcOn+i2zOc+n99b1TNO5b6HvUX0vM8bJ2acIHuXd0O9yPef53k/4A4lVaftF
6X2IgRWMmWL+uVVivNufKZ5tmsaLnfFn4EuS3UXne47YE32x7AOL7pte1fa4
0ocqf67Szyr9vPLrskdm3VfdhB0aP0ubfqXOMULv2xraAqXH1T2+BDs9Juvx
ZFz1+3kpfY3yR6t8QfbOutab637/wTKur33tiC3WjF95pmx8xkY6/oasxzq3
yG4Zeqz5btb+oGmx+5PrVf4O/L8qf3PWY6fxsp9R/jayxzEur/v7JxZa1r5d
Ao+fwIJem/V4NZHdTfmjuT/ZezLvwjeStT/qDt7DnDGW+Ic2rnl+Oyednx5c
9FjiNW1PE3/hGwf/pu07pe/mO1H5l7XdS5+v+geo/pE54w2ODj2W/DJr/04c
eq4Ty75M9/h31f63h0uOJ9yi/zNyxhjjn7qfMb/sV7RNUPqKxPHn1rqWu1X+
yJrxvj+VjCfdsWZ8/fsl48ff0/+/c8Zo4w/KEgfX79FfW17pBu3rqfr+yxoT
8r6u7xF8ITomKBkXTuxhddbxvUk6/xqlfy7a/0P8jzzaqA70LXR+vNtKNzY6
ntcy5z490b7rqp6rlJXenPlo0XPjbXMev9Rlv5fxMcT/mmrbnOvXMUOL9tEx
nt5S+zalbdLWIud3hrHIo4HPP1t13h4aJw1euiFnfAd4D9J8s1OV/7juJy/7
96L9Y4OrzuO7Xkf2cNlRLrPW4dC00fNyxqvVnDEWKwLn/6xjXg8dj/9b1/IM
PsDQ87q187us4/N/FBw7/CPreP7Y0M//X9k/yP6t4P7x96xjrmdWPX/7Ruka
+L2q6x6t45JG4wOoq2fWc0xiLsRedsoZY0bcjvgdfSp9KzFExh/b54yZY/zI
s8dH0Vx596l9aa36n1P9T+n9eT703OAJ5d9R9BycufjHjBfxteBzyLnNX8F8
KPS7zZwevN6H2hiwNWj7WOlueufuKxgTiX9zm8R4s/9SfNmC0GPzOGf/V2fd
70zVd7/O/TR4FdnPyp4gewb+Z9WZJ76i7XOlOxY913xS251KX1n19dV5VxqN
J6JvPFb5nRjP6Hz763zNcx6zXqPyGyu9Hv1Mo3Ft+DbX176Y7wGfmtKhjv8y
tM+F+dsm2rd+yfHq7XIeQ2/GO86cJ+N9xK/xkzFfWI9nxrcZuO4TVH5/lb20
6v6SfnMj/Mehr4cx869K7xD4+9xQ+2o6/rKqr6eqdDOVL+l/k5zb8I9UfmTV
c8m/8aUo/wU976bKT0r2/90p+yfupWh/9T2yf5H9VdH+6VX6bXbT+X7OGhNw
DvjDvDEBYAOISRGbYt8lxKp0zPjAMSViS8TgiB2dA2a+Zg4B4y7GX+/I7it7
Uuhv9F7Zx8u+P3CMiVgTMRR8N8RQRsvux5w3MCcGbszJsvcu2+c1pmafDr6d
M5U/UvZJjY7j4QO9XvYlkfPApIFNg+OD7w2O0j01c17wbcL5uF/2aY3mtVym
fQ8QHyNGUTZePUmMn+2qZ9RFWyx799TffRDzctlF/A0Fx0QW81tEzgODwPFg
hudmjCl+D64B+Me8MVFgo+DswN1h3/iaOT5wQ66T/aDsWyOnwbSBbbsq8rMG
AwgW8BRiWIFjoMRCe8l+PjCGHyw/nADGmYw3X5F9oexrS/Znh7q+JyLn0efT
98NxgOvwuPa9WDMmeS02Wfdzucq3UfmrMsa0gW1jDMFYAozjS7IngRfNG6MH
Vm9Ao3k39+iYJ2vmVMCtoMzTsneLHCsgZnBpYowv7Rbt18LEGBCwIHB2xsje
JnI8EUwc2DhiCMQSFin/etlbRsbqEi8alhhzDvYWDO5FiTlhYzPmUD1RM/+J
8Tnj9N5lc8Dggt3OmFV5A2XXQmO+wH7NUP3P5T0mYmw0SPnrhMYogVUC40ns
D4zVa2DFIn8LzEkmxsZAgYWijnnKfyzys/5Tz2s4XDc4GnljiMAS3Rv5Wj5R
/jGx44uMpxlX/xGYD0P7Szv8eWA+GljKmbqmk8rmrMFdo85pyvtfo3Fo4NFe
x3euZ9K2YB/zRzpfCUx+wTGzL2TfWjEWHMxVGSyj7NV5xzge1LX9VLMNJuln
Yu2NxtUwR/mx5jEoY1H8J0uYazMmKRhj9VvNY0rGlvhQXlH+AuX/nTfGb6Xy
FzNeBJ8BBlb5L8OxK3jMydhzTc15WzIeVt4/On5T2ZvR5yjvxzR+yb7VNe8j
D8zM3VWPURmr4p9bytxY19+tbM7anSp7UKM5Srcr/72q269dy44/DY8cM2lZ
NuaFWArt45MlxxPPB08ke2jZGLqXao4ZlMvGDBFLwOcOBuKWBvviibHCMQJT
Tuz1SOb8Jcd/TpXdBZ9i2THpUaqvk+zNysYkDJXdWfbWZcf4h9eM2Z8D1qBg
LD8xkU3KxqAQK/lb+5oVfD6w7K8Q3yp43z9gSZg/F4xZ/1f2eTr+9sDxshWy
102MvYbTs57Slyl/SdnfXDPZF8v+oOwylGUfeczJmJttHpk7BKcMbtl2sk8o
pJgc5ceRsej/cH7iW6rv+7L5Ymvza7631tpyiWPGv6f4wGNpO2izCvbxf1g1
f6mb7EPw0yTmyzD3Yw64iewNEmPLj+AdU3pTbW8VjEEFi3qp6v+s7DKU3TBx
2YXERMDy1Tz/YB7SNzBHBOwinI9FNXNY3sK/xTfL+CrxtX9GHy97XuQ85kDM
hYar/Nd5Y7w/V/5I2b8ofW+D+RlXy16ZN0b1V7Dtur4LSsZsNajuobJPLtqH
vbRmfPcKlZ+qc/ZOjD8HO9pV13sXv5vKX8R1M4evuT2Fq9Rfx09LMbXEKYlX
tq87BjWsZHzb2thU3dhnYgB3qf7HKubewMHpBHZa9b8YmFMGtwx+AXMV5izb
yd5J29lKD9S2s9JXqPzNgTkPcB92icz1og94LcWQgCUBL3ms8neNnAbTepzs
25X/SWAODlwcMJRgKYkvkz+3Ym4THKcTZM+pmIsEJ+moxHwl5uvM298KzFdj
Ls+cfkvltcTfrfQf4KbL7s/gqtFHzquYIwyOHzz/3ok5YnDFBhFzkD2i0Twy
OB/cLxgesDxD8JvRn1aMxYFD1k72FpHrgrPG8VMq5grBGWove5SOfyIwxrtD
en2jMvYx4GvYOnF/zph8m9TuS9uoa/9HW0bv1GMFY7CX6fe/rWJ+BxyT1txr
Yr4GvA3eF94h3qXv8n6/lun6Jss+HR+t6lpcMzaQfacosb2+wfHKG1Z0vLK3
7Nv0/vXRMyjijyx6Lr+Z3qcN9F5dSpve4LHwDXXPEZkrbq38zfHfhR6/fsuY
uui48tayv84a7wz+mTTn6B2ac8P8aan2fVA0zgW8y3dZ443BoWwue1nW+G/w
4KQPyXpODj6Zsofhj8DXWXVbjw+wvdJXRP7t4GDAxXiw7nkic7q9lH+T8scW
zCmAW/CB7IcK5tx9Qn/ZaB7ZFbqGnon5eZOUfxv3rOMXg4Es+BnugG9O9kTZ
t8puKXt6xdh+OC9ddfzYRvPy4LwcQP9ZMT8OjuMRsnswhlP65oLPdwPj64ox
yIck5hONKZjzAPcB/gtp9pHfRdtIpa8tuH44R3CPuMduicc8jH1G6re6FTxA
o3lxp6r+PZQfKX9awRh6sPRw2sBegME4W/nrRMZugOH4n+z1I/cVYPzB+sNZ
g7cCf2WI7M0it1VwAs5J+xfwcnDUhibm0IENASMyKDFnAe4CmgBTEnMq16mY
kwDXEs4H3A84848m5pTALYHTOD0xJwFuApjeLnVzHOA6wEmanJiTRN8HJ++8
xBw9uHqzZA+QfYfso8F10cYm5owxr2d+/0ZiDhpctE1Vx7jEHDO4ZnDcb0jM
WYO7hk/+1sScN7hvi5U/NjHnE+4nfdiFiTkSa7kStD8p3uqlguMl1djtJ20j
19NP5euR+3owMmcmxr/MVHqefq/D9b7tp/wJGXNQ4KJUE98bnCW4S3CU4CrB
YXw4MUe1VcWcFLircMLaVcyJgSs2UvaTofkdp8UpJr1of8l9iTlwlYo5M3Dj
4BzBPYIT+UBiTgx+G/w3zybm0BCXIz73aWLMO/Nc5rt3J8bIE5cjPvd+Ys4A
cQriFe/J/lrf5A4Zv6N9EnMu4F6AEb0jMccDPz3++tsTc0CImxA/eScxhp44
NfHqtxJzeODywG/cT+ndqZN3o+DvAc4OcU/in58k5gzBHRrB91s35wnuE5zR
ZxJjDIirEl/9LLHPFt/teNkvJuaMwR0DE9Kh7jaUthT/wvP0x7LnhOYTDInN
QSDuS/z3icQcBrgMYCafSswxAgeGz6Rb3f3xtfhHAvd/cNrgtoGRnJCYg4bf
Ef/jxMQcLrhcaHQ8nZhD16biNoW25eHY8ZlrVeY25W1SdXt/HWNw2c1qxtPM
KhmPw5wX/zt+eObCaJAw32c+3EV1PJZ4ro/OA/g2OOX0h2gInAiWrmTtDjQ8
Ti5b5wQtDDQx+pSNq8K3cEHe/LdSYCzv8Lz5c1MT+xbQQYGfAF+OslwTmCF8
HleDDy3bFwIO+fx0/n93aD4edRHDADOFZgrzU54PzwkMFv4K2h/aIXwi+Hvx
++IrmVIyFpnxP/MAfCADld6rbN8Iug/oP8D56KvzXQtmEN+M6ni0ZEwo2FDe
Z97rDmVjr8Fgd1T6G+LlefvgFpes04Gv5Ma8+S74TEYpfUTZvpT5gW1iKG+U
rFHC/eDPOa5svgzHcg9ooKC7MDad305R2dcDPy9iNPN4jxPjw5kjMVcCQ8Xv
S3tNu41mB88Hf8eBsj9PPNYH17Onyu8ZGF/zYM590G4qf33OY/Q9wD4knttd
VDIeeMfAeAO+H76jS0qeizN/Zh79auK5Mrgs8EhtA2O17s45/rB9aO2Q1nnz
jYhPkEeM97CiNU3AduLPwK+xTs38E+Z0zO02qBmft2/ZePV+svdW2VrZ+Kq9
AuOHHs75m2ioeS7Hb89ccFnVeMls2foZHQPjdx7POaYChhUsKxofCVi3krVZ
mO8y770lsb4Fc1DmovMT+wLA0YKf+71qfNx6ZetrLEvs+wIXvJfsf6rmRzQv
W28kX/PcmDkpc9NizfiuVmXj32s1zx0uLBmvdqXsU/OeszJ3xYfFt0GcD9/W
BTW/vy2I2zVaL2heznNk5spnMCdWfmPZ+Dbao4f0DOoN5t6CV53RYI0G+EGc
n7kXnHb4ORun7Q0xiecjt58LVdcBaX9GfzQuMN4f/+hqOApZcyjh64BnfbzB
mHn4RODN4IPDwYWfQf8Fl5sx9WF19xdnhp7PMf6hP5sYGG+O/xL83dgGY/rh
i9BfDVf5KQ3metEfXaPyazLmBqKXdG7WnBf4R7TXDRVzwOmfiyk+DQ4cekjD
Yvue0Ax5SMdHafwPTZdHIvdHbxIXbjC3lP51ZWD8KlzUh9L2mpj8s5H71+sD
8wvgmtE/XhW4jYIbCZ75rgZzHuAX4fPA9/Fj1vwq8NXnZ835gD9Efzw0dEwe
bh9zCuYWYKE6av/MNF6IBgT6Kpun8cRBOetBLWVO3OCx/pDAGEH8zfRP9FP4
oE/L26eDb2dy4PZzqY5/TueYXvK94E/hHX4wsa8a3D94ZzQ9mJ/hz26rfc+U
/Nvhn+Gbxmc9KG1L8WUPDPx+EvN7oGTOC+0vmlcbls3nPCDvdxoOEjo26NnA
KT0+NE61RcZl4HvuXPb3wnzj+tB8R9oeYow3l8wzgW+CP/yq0Dj/Tjr+lLz5
l4xPDg3NH4P7t4Rn3mCNLfhD4D3RX2iTM//rsTR+S0zuhch4fvDcaILBf3tX
22n4JvA9BvZh4Vu6OWf+0seRsTi0PWcH5kzwexBP2LHsmAKxJ3xo+NLA+8MH
/DRrvtJXsWNdYAcPCM0vQO9hcdb8Mfil3Bt1EMfaNbS2zi558xHRFUJfqDcY
z9B8RfKIEd+u8i8n9t3CkwWvHDB3yzsmvKJknyn28LJ9qXBo8ffC+RhUtu7O
pNSf+1Zo/vHkvH22aAShWUV5/OX4zb8pmWsL5/YC2Q+V/S3xTYFV+bpk7i3+
Q/yImxStPfVO3nzKeYl9S+iKgDeGb0keGJB/S9Zl4lvmmwZ7gi4VvniuCT50
S+3boGBMKHoLuwbmDr+cd/wanzZ4DHAZ+LqJb5MHZgSNI3zipMGR4CtH0wR/
F/7wq8rW5MJGM4WYP/zRN/PGmPypYzYoWtuKffBJ4fHC52XOCJYHjSviJ2iw
MCYcqW1B3pj2JswLSsa2s2+U8l5LHGtBxwV8N/iyVllzVOGq4pP+V/mTyvZV
Pxvaxof+kcpO1v6yysbaHlN6q9D4S+ILxBnOVJk+DdaoQasGnwe+j/vK9rXt
GJrLhEYOWjnjtH2c9zexA99n0fhX5mfM04aovjMbrGGAlkE7lVma9xgFfn37
0HjXZdo3Hv+c9l3YYI49XPsuYaodkbd+BuMb8OBw9OHqnxX4+kZo38HKa63t
E9nX5KzfAz7k1bx/YzTW8PmBfe0V2hcIHnG3rDUS0EpYt2isPs8IPsQ6xBUL
xuT0LNpPi7/2j7z50viI0RNAVwDfMXxq8mhzd9G+FjpmvYIxSscUbaMFiCYP
2jxNi+aOoiGBlgR4wqrSz+GvU7+2ftHaDeybnl4P3FE0JB5Nj08KxkgdVTR+
skPWnH+4/32Kxqfh75wg+zK1J/82GBuxKrAGEO8f8Z8rysZPoyWGRglaJfj9
8P+hWYP+FH40/Glo0qBXhY8Y/Su0b/Ad47PGt72ybF82/vAjZS8t23e+S8Va
JGiS7F7xfvLRzPk8be/h++HzZowEXw79JjRL0C7BR3q60mHFvlPw9/BV0NhB
a4eYH/o16NgQCxyROLYTVKzfQoyO8f5pZcfuZiSOlaE7CJ+lQ816a2eXrfeG
BhrjSfwR+CXuKlnrEM3DqGwOE+NdNM3oE25KrO+Hzh/8rQGBx7dgbO4p+ft+
P2POL9/z1jXrzx1dtj7bdjXrxRGTITZzQM18W9pGYi0H1cxXpS09lPF/zXp3
Z5Sth9a9Zn3ES8vWC9i8Zn4vY19iP0t0vdsVzEkcWLIPHf0XdGDwrY9MrJeC
bgr8bWIah8n+qOxYx/2JfaXo8sBneiix7xYdMPhWDwb2bePjjrXvv4L9Xfgv
8GPgAya/VrFvGL2Viwo+B5pq+HQvVHqjin29aNrg78Pf21z7coH9W/hb8Lvg
U8C3sH7FvrdpgW18DuuyL7HvuGnF+mboT+GLvjDdh24Uvn6uAb0XdP2IHdJm
gCfDB40vesuKfduzAvsC8QnuULGPHzweuDx8/2iq4X/E/79txZpFjIXx75cq
fo7cK5wo9OSIoRNLf7Ps2Dx6XvgOqXMrnkHi2AJp9L7QpcO3dXXBeiWPJPaF
ogOEPg+ac/jj8M/hp8OHOSb91vB9onfCsXxzaMThq0ffDX/tfaF9nNzfThX7
VnmHeZcZozBWqWr8eU3WWPUPQvs/pgSeU+MPbl80lgeNgSuV3xhbL2AI/WLd
YzTGamAYwDnsXLTvGQ4//JOrEmsPgMV9F19SaC0NODTotQwOrSUCBxn+DGNG
xo498uZEnRXa14fP78SKffz4+u8vW49ld/QLwNLpvAtk/x2ZPwOPZl7dPgR8
CcfkzRm7ODT35GEdM0rHDAutVQKHGX7Mb5HxceDk5tbdB9IXjstZT+njmvvH
HhXrz+0DVkT5d6m+4aqvW2jtEjRV4dsfLnsUv4XyLy56DMdYbs+8OVn0z5er
7iu0nVVy/wpWbxRzfqV30f3dr2Mv1bGv140JZzz6edYcqaUFa1csypp/9mFk
PtoCpV9R+e2KxnqPzVnfZteiYwFw6OEzoWmJtuX+gfmzYWzuSn/lLax7fEDf
C4ZwZ6WPju37wAdyW2SNHrSpiEGh3XOk8j9mPJ7Gn/AfLi9b0xD8w0mx9ZHQ
CBkf2V/4Y9kad5ek/t63y9Z8wx9OvA7uWC/V36xu//HgwHoBaKGhwYNOXt+M
tXn2j/3u8w1cq/yOsX1X+LCukX1wbGwKmqbw7fHnoWFyiY4/qm6NI7S+iLGh
ffRvOl8GGz4gtOYRWmfEsNBCahMb2wInHX3Lvol9yXBYW4KNj/19MKc5N7JP
Gt80XM0RYLNiz4WYE12YxiNHB+bsAtwnfvl62Rp1xA/KsbFOcPzRx8zGfr/x
mfWT/Wfk74c5WB+lf03n13CFjtP5fo+ND4cTtFr5n6neq3LmsKMfxniNd+UG
befRZ4UeixGDvadsTWD6y/0C85930zVOUH2X6726V/ZZkef2tA/31z0uY3y2
PGt+MnEzYlvfZM23m1qyb+9dbY8pfWViPR1iVffVPS5gfICGG3zldkVzUR7B
x6r0g6G1kdBsRu91D13PZOVdXzS/bWJoLS00teD0XxCaW/CQylyjMp8UrHWD
hjJ8Xd573v8VWfNV2xbNNZio7aqi/TbMddE8ht86Oo2V/ZM1H/rZkufiX+KP
YeyGhorybtSxE3U9c8vGZoHRml/2PJ6xJRp28IOvDc1d+CtrvjcxuKl8v0XH
5sAsgF34uGy9UjCP8AmfKhkLyTyUuSQaDPDDbwuNPX1MddxUdD9MX4kmKHzo
d8rGFoAxeI/5XGhtIDTh0FfCx8n3DqYHnBF9Ct8X8TLiZtNDf88lnfMfMPeh
tdLQTPtR9T8Vmrs1nZhm0Tgf8D5o/qLnuzQ0dvElbVOUf2FsLZJ/AvNNO+n+
ZyjvXuV9Kfu10NjWp4mHaN/A2PoAcLmWKH//0FpYaNbChwUnAF4AjRT4lNvE
fr485/fq9kHw/REDJY79amjtrXXAVOpZdikaCwmn/PPQvHS+bb7xnsTLY2ul
hKH5xuNkV7LGw38r++rEekzMHdAPwYdOewR+DhzdLaG16uDsolF8c2itOjQ+
4DvDswDLjObKjcq7I7QWHhqr6L9uXTTXiD4E/dErdP7/mO/o2pfrfF+HxqKj
0YW+dueisaZoCr0RGpMJNrOZ7EYdc5GO/0v229r/Vd0+AXwDYL7A2S2TXcRf
xzlCPwOeBTE04oRoNBKvJ95D3If5JFqExITpM4mpbhh6DkyslTajd9om7Jbi
m6pF6zOBzYeP/1aDNcXRvyGe+UZgfWvwhcTj0GpkjHY0vsPIXN5Ddfw85kZV
ayPg412t9JqquehoDGf07exaNVYJTk5b0lVrH+Az/rNqDPyk9JsHG98r7S/R
rDmzZj0D+js0yOF7Ew9sHlgv9oPEmlnEmog5oaWFPhTYGzQh0e8h/vpKYJ82
+Eriu7Nlb9ZgrTr0AhY3mGMPfxx+cdOsNWXRF0LPcV6DNcrR+0HjDy1J8BoH
p/HM6YH1bMBfHpP238SSwN8RP/siMMYabS/ix3MDz+mI9xMv/q5szcAL0ngo
2r2M4Y9QulSzlgQ+8nLNbe6e6ZiRthh8Lr5nNJrA40aR9SZ6KP8N1b9d1VqI
jFlaVa338EKDNXPQv9qmam0MOILbVs3Z2Cp958HT3Vqy3xD/4TdVx8PRGsbH
2V3p61I+CBpw6PcTX12i9y2ftXbhlSm/BIzyZOUnKR8FTRL0zZum/BA019Dz
fjDFB+DzeUblr5bdkLUvDXzj+JL9cvjnVlQdIyc2jUYE+iXfV609ggb6Srgy
ZfPwGKOBV4P/v1XWGsLo0cM52Tg0JwEuCpyTjYvW/4OLMkjn7J6OMU+R3Vzb
jco7L2c9Kvj9YA2n5qx3tBmYjqw1aNC32pJvLmvNGtYz+KpqLRRiMsur5rRs
EVpvG3wXMc3moX0YxDrRJ9hUx2+Vs54VMdCmoX0uxEbB632TsaY8+LyzYvcP
9BNLA+Nx86Ex73B9iAfnQvsYwfeCgQKfD04fbBT6zldkvO+QivURxxfs00Bj
e2FgbAgYkT0rxohg71UxVmVaYiwJutnjUmwVY1H6MPoydKiJdVMneosfpf5f
OJlHKT06MfaKc6NH/Xnqf8bXBX4OjBZYroMqxm6hd4A+3Y456+lPDt02oCnN
GPnaxNitjhXrT6/VAM8YrwFuA/3AlwseA+Hz2JI+tmAfFPrPYAfRn6EM+oK8
b2jlvBwaq4H+34SCfTz/pv7a1zPGRMBJxH/4QcaaIWiHrKf6ny3YR4aeKXrX
YHFuS69xz7qxLuiOoJf8RGitaPBqh1Wsi07sn3OiN9hM9T1fsE8LPVXwIL0D
vxPgN8F/nBy4DUALGTzJ3qH1ONEmfif1zzPnOjKyfskXDda8Rz+D+PzywJxu
tFfBG3wXWL8fPDd4gy9C6yOidcD4Aj1SNCDROwNPsEXge/g4MaaZ/m577Vsd
GH+wJjDHDWzX5am/Dc1g9MXo/3NZa0ailwZ++OfQ+kZw28ALl0LrGYK/Bp/w
VeCYPXhpMORgydEGBM9WS+fjaDyhf9Y3NjadNSzQrzqkbmw7uoLoI78ZeT5J
jKBnZPxNv8CaRWhDf5HGk1hDgPUWwKefGLhNRbtwWRqfgJPzXmQ8+7ah9czR
sgavfmzgNgEtnL3rxiKhW4Me95I0voWmHusV/K9i7Cn4HXA8+9aNJULnGz17
ME/EJrsFxkL1rxgLheY2evtd68a+o6GElhI+MXxjxBteBY8cW/sOzO0WiZ8B
z4JniJYPa1DAsWLMv2Xda3SAAWBM25L5XWz+EBoDaBmAF3qiwT5ffL8DlP9N
g/lGtE/guV6U/afyv8N3F1nP/nnt2yG2Rjk+J8Zse9U9prwrMH6FsSYaN2Ay
GONtrvS6kbVs0CRqUjP/4pSMNcLhZ7xZ8fnR3GS8sFfktSLQ5NlN5XeMPDdF
U6mH8ttFXhsDjZ5dlN9W9g2yl9AfKL+17Csz1nDaSvmf183RpQ3+PfEaBnyz
6IMeWPeaIHB2GaNvXfeaIMRgGBNvU/cYezVcv4zH3uCfwTaj4cTv0S/2eB/N
BbQX6A/RpKINpS1F4582ljnb/lxL5LU60DjaomaOKjw4OG9wV+Hlwc97KWO+
/oYl86OfzRhv2apm7Sh8rNvXrNnGPI/53u2qe5/I2H8w/2D/V+r5zssYi7lF
o58X2lQ8U7C1cBTBeYD3gLuIPtxYsIxZ6xHQv+KvbyxaL6FFZL3wN5lzx9bD
uV75m2XNj29eMj/++Yz1CTahPctY0339mvlWrC20qsF8LtaowCeIfvE+SreL
PX+DQwiXEX4NY180IeHbfFg3xoc5wSo9/z/oIzLWuNm5ao7u76nPHzztNjVr
SeGj3lbpAyJzm+E4f6RzNY/sS0GDfk/en5q1v9DQ27lmjBtYNzgP39e8Rg+c
zLV6q8Sy6uYU4tP7PrHmCrp6szLWYsFnODKwXjO+xCCy9ig+RWzw5WidoVkD
Pr6o/M4Za5610/H5yFo7aJhl8Y3H9ufBSYSbiAZNvmi9GrRp0IgjhozPcdO6
MYP4E9FcQJuhqvoOyFijK1R9B8qelfUcjrkca4qA14GDCxd33Zrn98TcwS7x
/v6Ys08e3zy/71c5a7iuV7PeFb4AjuHYgyJz0eEn3hQbPzNA9X+t/KY1+/QP
KfubWFtfzfyqlWBmiG3WnGZOdGBsDUnwRWDMwJptWHNdzAk6KP+OqrVrbuKY
qsffXTLWcNsIX1zF+iVooMyoev6ElhKaSoXYPtV+qU8EXys+wcsDa4TgKyT+
RiwKDDZYbHymQwNrMuBLxUd7SuoDwneLhgq6gmgkoK2SRNaORUP2m5r1AtFS
2K9ofzQ+3AsC66Hi281E1jbCx4u9YWxsCfOJqVX7MMFIo4mEbxPNLjDW+GQ3
rhu/C3YFTgL4SDSO4MTiA14pe/3Y/iE0KNCqyEbWfvpJ5Zfje46MPUDj9E7l
r65YewmNs1VVa6Kgi3pgxlop30fWi0W7473Uh4uODz5mfLvwf7bJWIMKvg+a
MGgyoCmBVgzvEO8SmqQ31cxJ/TeN2YGHX6LjH1bZ/wLz7xH7QiMJvvl/yt+T
OYR2Xya7o+rbO3LbjebDPlVzVIiBohf9g8r/V7cOPhyzPxL/Pgep/CWysyp/
R2ytxpHp+AZ/M3pdd2Q9f0ODAk0lNCrQpuB7Yq2M62QfzPOqW+MGPfvfEs//
OBZMBOO/62NrXY9Ix2vobTL3CzOOb6EBQdyX+C/aEGg8gFMDr4b2w7E1a7uw
htFxSnevWnuLPqMH8/+6NXXQy/8zMT+OsRmat/Db0CRAt2OtBlXVGNOf0v4D
Lhn9yb0Za8oNjs1xB1cApgDue4+afSPE7I6ome+FVhprvkEsQO9mPSVvT+ez
W1WNlQezwnhrjc6xfcaaY7+l7x9a9/ig8UV/VjWWDg4nXE6+B74NfLz4ej9m
DJ21xubzKvtXxdq/aES2qXqNBDSi0FxpS9tYt+YVevFfq76lVWPvnsCHWbVe
LnPHR7UtUfrvujVV0Ev/JvH8nHshnsR48quKz4+G3lP091VjGScy/+F+Gq0J
hn5DlmcduW+kzzyE9ifFKMKpaFD+EbSXGffBh+tZflA11hGOFFypcmRtMzQy
CzW3+bT9F2v7LLbG6oKMtYBagH+JrZ+AJhP9Eevxgb2Cs7c47Y/om4bx/cTW
Q+Xd3Shr/Rs0PdBRQU8FrY/rVf8uGWuttGo03xVfC98s/GLWHMOvh39vZGQN
B3CzK9L+hPYabcrlafsPP4u1YojBw+fCx/thGmPE9wtvGv40Gmj4324pOy5D
fAY+BpqAYK7weTZXun3N2DdiynvVjEEG5/tN2l/w/jHWJyYPX4P+hbVmvk/7
GzRIvkhj+vDfKvBHdP6vQutl1evWt0O7Hz47fFrmXmgcwpdN6vYX4jdslo6X
WNuGMQZcK+Y7aD2vDI1/rdfMVWTNsEal16ENVP7vofWr0IdHy+NlHT+/Zp96
h9RHiq+d8TnapEfJfif1b4DP2KJofbiPasbGwEGBi4KG7tSMfZ+bNFrTZf/U
54vWCxz/TqnPFO4/+qJwB/Af4Q/eP7K2JGvioV+L3jrcGsYs6PPsW7PWJGtI
7kdbEPnb4BvhW0UjBd0g+jy0U/auWXsTzELHmjUF0BlCowWtATRqwGWBz0K7
hhgfmlG0wbTF8JlYWwUOHvwl+H1gceDgwMX5tGYsDxweuDznF62rh+YJfBz4
fPh6WBMRvl9j3XpZ6GahP7Bj1XPzYcw5ld61bj1IOLrgy9BfB3sHBgEswn7p
vdGfoS+E/wl8zIZF429XVaxdiebsj1XHlOA04cMn1vRbxVqIaBq2rhpjDCad
MRNjp26xtc4ZgzF/YI2H6bh20+d9sOpYN2+MBVgLOH/gd8E4gnWkfdmIWK22
w2R30VbPe00T/IMbpu8fZWh/vq24LPvujr1+INor4O0OqXkjDeYO7F13xih5
9y/dZN+VxgvYd2jN+8hjzQPe5/0ZA2V8DV1rxoicU/b6mGBH0PyYG1oTDi2Q
RRX7LtC8GyZ7RWStKub0X6XjP+J3xPHAH94SW2+VZ3Kw6ru46ncLHSDwQ+iL
oh0DvuUn5Y1N4zHrqPyBKt81choMC9fD/Pz8sudjPF+O4VgwMmDB+eb59mmv
0IZ4B3+j8nfPefwEvmWO8pqn/SX4l0myS2l7BQZmLUYx47yhsbVTQ+XvUTMm
BgwedVBX58h5tD/t0v6YuvGZ3x97DVbWUtw3b/89GOxhgfGsYLPBYKM1CicP
bDb+fsriQwGb+3PVWFgwseTzffOu4QMaFbu95drxMYE3BnMEpnFyxliks2Nr
webyns8zvyeNRmxb2uqauQtgmsA2sY88uB3w/amDuipp+7CrNrCAYALBCrKe
J9oj1EFdtCeUxWcFVgyN70cz1ryi/eAZ8axY83JGzeuDoo1CndTN+prcL7o/
4F/RAPkrsF4I2iAbNDruR/zvfMZakbWeLiK+VPX4a37WPuLJOv/hkbX20A+5
M3b/PztrjT60+u6LrV+CBh1adOun/cPsdHyA3hz9+ULZR1atedc/sH4dWnis
8cAwGA28Y+nbqtbq3DHFU6Ovxvx/fjoeZE0K8IpfZO0/7xFZW4kxAmMFNM5f
y1izivEgmjesMwZmkPkmmjf3BtbLQQsHzVpwGeAzTqqaI3ppYL4n3NHDquai
4aNvVvWaEsyl0MwbULUm3kWhNXqYf0yoWI8HjaOB+MMj140/BWzyyVXPbcCd
ML+4oWJ+KZoppyvvi4r1WdBYuUJ2z6qfHTGATZV+MrZ+EZqMaDPSB9IXEg8c
IXvdtL+flY7fWU8DvAu4l45pn0/fDwYXbZuLK9bzQePzlqo1ixYF1utEy2hC
5HcFfzv+WjQ5Z4TWvMRfNL9i/zgaSEOYv1es74nG6LlVa46+FFpjDv8da2qA
h0Qzph/3E/naiekQT8DHg68H/u31VWtAsa5Bn4z9KWgysi4cPnT8AWjuv52x
hhvjOzRaWYdk84y1WxlDMpZEX3KM7DmR64aDQTwEDal1Q+tBoS2Fxk0ltB4P
2jf0ofSl+LPQ9nktcl1g1InvsCYHc2c0Ivsov31s/XN8CviLWOMW/CKcl9Nr
XnMVvCIYxdNkt6lZfxpuGHoa+EvezplzA/cGTd3VofV70dplvvFazmty/Cr7
m4q1LdAMfVH2z7H1hynzWzrfnZ1L1+yoeiPNGrnoD6OXjTYYbQZtJfybnfh+
0ngqmB2wO9TBfBlODpwBylAWTVN0pOEooXXKGhCHZ4xxAOvAeh/gl8Axgcdh
fRjmMuhItil5fk7fQswFfgAcHbSl4czAnbm5Yj0rNG8fo2+smF+NBu+9VWvu
sq5Iq4y1eIlvfpQzR2ZT1festnNyjgkSn4Yf1C3jMsQ/Wc8G/Bs4OPA2jGc/
zzmmuVPs+DLPAo7M75Hj0W/mzDEpKn/X2PryX+TsH8Zf90fOMWawVWBK4aCN
zBhrin9udc4xkd6Md2vmssFpg+vGmtfo16xO/XdgUC8uWa8dbGqLmrlrcNjg
/uFP/SvnmPMJsctQ9q/Uv8qa32Mz1nTDPwqHa9OyfXK8X6wHjVYhdVI362Wj
Tcg1cW2skQ5/BI054unE5xfmzKH5M/aaJeg38UyIz8PJghOI5jtcLe6Ze/8j
9V+yjzzqIL6Pf51nB0cNrlrLmn2lrIk9kfFebH3/33L2h+MfJ00ZysJpa1e2
j57jmbMyd127RkfVa46gH/V5Oj+BEwZnhXeAd4H1kBn/oMMHn4Q+kL4QjV7e
Z9YEW5ixpiX+i1cja3vCnyBe+qK2C3LmBBHfJV78fM4xRmKNrAHN+IV9xI8Z
P7+Ysz7LD1WvIU77wBoQxJ9Zz52xNLiYStl6LuAOwR/2qfkYjgX7TP7xkbGO
xNzgxrBmHHjyTVL/Bj5EfIlo0J5QNaeNdV46Zcx1Yw0afl84kOfLPjMylhNM
Gnwq5uTMzRek/hr0XcB5UuYclT++5rVTtpR9Ys3+nC3yjok/FXvN3Lcy3od/
54SayxLDblE15xBt9xYZjz9rsfXgaQPxFxMTIzbGM2O+gU8D3wbPfJ7STWJr
p4KRg78FB3Crsn0McAOvrVjvFE3aiSrfPPZ6Fx/k7D8Gswd27/2c/RG5mvFt
cAB5PvgrD815zTP4cDdW7G9lH/5L/NHUBV4iqHm9E7Bx1EFd+BjwNXCNDzMf
jfxbEgN8K7I/hHPDYeR60dxlXbCOGWvx4tPBt4Nm+oKqOZdwjPRvLReTNebp
T1jTAzxF/9hrGazJOb7ENXFtrCF0ac14gadz5lQRH6QO6mIf+AE03eOi9djR
en8u9tp1tKGzZW/VaF1d5iy3Vx3P4lz0YfRlzDfvzJqTSDz4y8hrg7KP+Sf+
zKeyxoARj0JP56SK8cJoBYCvYA1bxu/EQlnPAi0/xhuMOy6sWguc+PGg2BwD
uAZ8k59WrSPO3Io5FrFuOCFwQ8Avnxd5/T18rU9mrA+Fv4K5I3M45odwFIIU
w8jas3BUwESCSToN32nd/iV84vjGweyD3ecbfLNqDUi0IGn/wRoxxmSsyZhw
W9lDq+a+M0ZirERZxk6MocAa4A+6r+Q5HXM7dNrDtDxa6v+rmutOfYw10dFc
k9poQTJ+Q3uSGNsdkdcHQSuW8RfjsIuq1i6YKPv82JhocF7gvdACYX0XtGjR
00NXj/UA8b3iQ0V/a/26fdH4vPF9w3mH+048jbVeWC8W3+QmGesJwSGHS07M
7s7IHHa47GCqwFatU7evgDEbYzf0xHqVPYdifRI4uXBz8UFdx/tQte+bmEjT
2HpqJ5T9/i2sWO/u4LLjO09WzNmHu4+PblRkfxjrl+KDv0HH/xJbG2SHjPWN
8M+xRjnzcWLtcGrg1sDJWD8xJwNuRq+M19rbsG5fKGMgxkJwNOAYoDnVROWb
1O0bZozCWIX1lPClvpixv7dp3b5SYm7E3uAgwEUg5l5LvP4evltiDuiJ7Va3
bxjNJfhgFxStzcIcCi1/xuy59H05Nra/AC1W5hQXx445gHUkXkYs4pzY+Ew0
SPFPoOvYNC2Plit4Jnh18OvmJsYLwZODLzcnMd4I3jc+6AWJ8UbwxvF5vy77
8qq1IKiPuQ1zUOai02SP1LkvqRrLVUrxj6z3gtYz/hL8JldXra0J3uj22Bhl
sMrEH1lvD3wV2r6sj/BV4vXn4HLis79U+TMqXtOMtcwe07ao6Lkjc0i4b6wP
CLcTfxxrmaBZCpaAmD6xfdZPAivM/I55HvM3tN1/kr0ysq47fSucO7h3zGmZ
2zKnYm5FfPu9FE+InhQ67x+nvxfcP+a7aAUxpmVsC4Z6lxTzz/p4xZKxrawx
+2Fozd7WKWeD9ReJh40sGh/NWiBgVndJMcqsrwae4YWSY5rENon/ji4aj12L
jIdYUDa+GS1KOB+jUkwzeAji92gloYHcoOOCutPEcIjlEC9Hyx8N6IL2jaqa
247u7k8pvgLsLjHiCyLHy98vG7+MVhrx8JuLxjs3S+N/D5Y8J2FuwhyMuRg+
BnwN4BFWlK2phrYa6zOCZcNHAFaAePbVReO/C5Hj17wvYNzPjhwPBTMOpvT0
yHM+5n7MqZlbX1s19xhdYPTx4aTBTQOfwdpLxKenldzH09cTP4V7Aga1d+T4
J1wW8Mt9id2Bu6F91f6HtK1Xd2yOmCOxRzi1cGvB/IH9QwMBLQTGT2AL8bmi
fcD8H18s+EnW8GK8B9YKjQi0IvCXgTVlTRDWBiH+hHbAt4m124hhEstckXi9
XjC8YHmvKJoPgA8CrdbvEq+vSwyZWDKaFWhXXJLx2nb/VqwFREyJ2BIxALQw
wEARG8Bnz9oujO+2TMcTrBEBHmNGbI4aXDXmV2BHd4/ctxNjJNaIPlljxf5e
1h6E0w63Hb2QsXqfLyuaX8Ocm7UE4MjDlUdzAe0F8ASseQCeY2rsmAdrhdDm
0/aDAWHtDPw5YEOIUbDWBmMAxgLMt1lDgfjRhNictaYpBp/1rEcUzV9a6wMq
WC9297LnL6wNhP9ii5LXo+B9xL8AJoYY50uR14xh7RjGR2g3/JoY+wKGBiwN
46vWJa+hSfuF/2LLktfnIDbGN4IvBAwJ386YovkTh2bM9eOdZ+wIpoNv4dai
9eTpD1h7Ze2aSiXHL+HeMz7tUvIaHcTGWLOBtRuIT6L1gH9pnZL9fcRexhXN
j4ADCBfwl4q1o4hJEptEd2182r6ylg4awfQp+DPB4uFfISZGzHVmZP8kWsXE
XKaAFSiaP8F4Bm1x1oRhTMd8GSwh/st/ix4/sn7bz4nXskQDDb7FL4nXE+6Q
8jfAb+Drgne+QnaXyL5tYu4MfNHP27Rifa1HU0wnuEnwk0errklF6+NPyVi7
hTVzGJMx3wbr/bDSL2Tdn7GWy7+J16cnRkSsCMwq2FXwH2DjHyhajxoMB5jF
DpFjLcTwieXfVzR/gvEZa9vAGVzLHdT1HJpY/6xtxZxCtNPaRx7bgREDKwbH
F04vmoobqfyDRetd0/+i/dyubmwBGqrw0+Gww2XH3ws2GH3la8rmx35XMece
7j0x+ed0rn8Sc0WIcRHrgrMPd5+Y+YuR9X2HlB1vYL3udeuOzTKnYW6D5gHa
B2CwWbsN/eDzyo73LFX5v2PPtZhj5WPrL+5fsT4U7Q8YXrC84IlPTMy5hHsJ
fgZs/XNF+37xAaPN80zRvmn6D9ZKgjMLdxb/EFoqcKRXpnj5zVRfoe71AMAU
gC2YXPT6EfjY0JGFYwrXlJjr6MgcWTg6xISvjswRhSsKf7RzYrwW2BnWFvim
bn87vjJi5sTO83WvN8BaTazfgr/9pYxj7sTe8W/PyngthJV1660Nqpjj/QzP
C751g2OexD7BbILdRI/u3MSYT7Cf6NuxViEYYLDAcNpYmxCMNlhtMGN36Vx/
ad+vDV7bCP4OHG84XXAGhir/h5qxILdkrJ+7OjEejhgssVj053pVzKm9V/87
RR7LgeFYk/aBDwfW2KNvhF+CbhKYg9mJ4+8zAmvqodf6UNHrNqFpfmDV8T5i
uUkabwN/AlYYzd9fa47vgnfh/QLrD8cHzXTiPWB/8afTN4DxIx5BH09fT4yC
WAUcB7BJYJSYXxA/I5a3lkOj+hfE5pexpg3zc9ZEKqWYR/zxrHF0QMnxZNY+
Ys0Y1vQCc8BaMmNi86fQXCe+xpiXse/UjLlAvCO8K3CA1iTmJAGmAZMDvo13
gHeBmHqubs7Pz4HnM3CB4GCxxgDxLLDT+1atrQNHaD+lu1a9dgycowOqHkPi
H+kSeGxJn8PYmTk+fRHvAO8Cmvpwu4jX3Z/xmozE85bWrXEPHvLQuses+Gu7
Bh7LwumB28OYgu+5dd3YWTTV0Q9jfWrGQ2B24UvNr3osj0Y0WtH41+BOsAY0
/h7G8HMC67Mytr+pai1DNITREh5XNXYfjWG0hlmjijUMuCewPIxZLima38tY
Zk7V2sxoVKNVjd4yvGP4x8N0fzdUrRWOJjTa0IMi58HhzKX+IN4XODKsZ4i/
GS7U9ln7S+bE7stZaw5/95ux+ZCsyQXejDV5xoXuT1mr573Y6w+w5hh4srdi
c3PgdcM/ZQ0gOG3dM14bCMwE2Ak4a9sT+4odP2NNOvzhrLcK9hkM9JWR/W+M
xVqk/jrWQ4d7gmYD2g2sB46WDjFfYr+H1419RkMWvQDi42A5wBgQDycmSGyQ
NQaIj9CG/ZViXogH8v49k/X4C30n3lHeVfbxPvLO8+4/n/X7yByVvoo+C/wE
axDT99IHg7dg/MNcAYwtWFt8KowVGDPAvQQ/dW/WGD6wfMwx6ZtfSNsPMI6M
HRlDgudj/AIXnBjZV5HfCd4N+Dk/yf4x9vrC1Nkm/X64Vsa7cPFZQ5m+gT4C
/An9OWtH8BvyW9I/s/YFGHaw7EHVfA98YOD58lVjxx/PGu+HT4a+nzEA3xtz
+LW+n6zx1YyX4WaC2Qa7zTvDu8OYDDwN4xu4mbQxtDWsmc1YgzEHeBjwhZyL
+S3YedpnuJn4APAFfBd5/eN7ssYjw7d7IGsNrf9SfMfdWWv0otXbvmQuHhhm
1gP7vm4NB9YD2q7uNdyalIwZI14MvgPsARgk8Azga/CFgEkZHxtjC9aWNTeI
TzJmY+zGmiBMmonHMjZHcwR9UPCwYKFZ9wn+B3NO5p7MB4kdg3+E2wF+B6wb
Pg98H8RI8f+AoeZ41gwE37punFm7XumkrPHL4JlJMz6mPW+IPVdaO2eqWp93
Stbzj61it/G09Twz+IkrY69nyjMDDwPem2dLm0DbwJj5oqLfQd5FvnfG8ozp
4eOhT472AZhpsNOM75nb0gfRF9EG0BZwDegDg/FlbsIcBfwvc3zm+rQ5tD34
CPAVgJkFOwu+8N6y+eJod8+OvT4da0ASP+1RN/YdTV30PT5MrG8JRxKuZLVu
rgO+RWK9rJHHWnnEy9CWw4eC72NJYN8K/Dd8MMRH0AJjDSB8mLRRtFWsQcda
dMTX0HKL6+ZK4Psl9swcnLn4DRmvD8CaI6w9QjwKbTfi+3C8wZQNo62um0uB
5jF8sjZ1czFYkwM9yUk1cyngXBBvYkzK2IExBHhI/C/0lWBw4Rf3LHn8TJ8K
Hxe+ylslx8yInUV1Y/GJWRO7Bl/wbtHtEf4l1vjDB4T/HW2znevmYuBrRb+T
NVNYOwU8N2vlgkeAgw9Htn9k/ARrB34v+7jIvF/6djDD8LfB+1+dMacVbiu/
BbFp2rxjQq/vDFeeOTy6vmHd63MxhmEs80LRsZ75GWtBsr4za6Etkr1P4PEY
cx7wxHAvi3Wv1wXGEqzlS0VjE/CnsHbprKJj829nrBXJeu6snaVLzywveD1m
tDC+Zowcmg+0oOSYJLHJY6rm8oGZAzsH/2VV2RrpaKV/lHhugMYx/Lk5Ra9F
t0T79g28PjprZzFHReeY9dfRNmiZsQ/11Kq1dRkDESsC8wH2g2+cb531htE+
AF8Ezui0qrUE+caZL59VtXYwYx5i1az/jhbAvhnr1PNb/pLWh5Y469ezVhnN
2ccFv7tgIcBEoBXFuw+2hG/4dJXvX7WWMMeDFQHfzLsPBw4uHGtK4oMEj41W
3S51Y51ZEwV9JTTQmZMTX4fbyHiRd4Y53MORfag7q76rA/tWS5GvHUw42HD4
RZ+UjDECa1Sum4uALxTsy051cz2IKRJb7FbyfA+OFvozN9fMjYFDAx6+Z93c
ITTD0bfBRwWf4LLQviv4SmgDEOO5QPd+Wc1cFTgfxK+YEz1VNCaJuVKlbi4I
GB+wPvCflpSMqQJbxRx/atF9In0jPk24XgcF9nUyJ7mn6D6QvhB8JT51OHJw
5RjfFipeQ4C1BJhjjy+6T6dvZw73RNEYKuZ29HesA4XP+ira37rHyviywQIS
IyFWAgfp5sjzBda1ZH3LyVX7wG4vuo+nr2f8j78ePuP0yPODx4rmADG3ZPyI
5gDj551j+0TGZIzxWusrwf9adB9CX0J/Or1oTgu+Eda4hFcKv3RSOr+YUTSm
irkn/fn3JWMmwU7OrHmszxwA/Bk+i7uKHvMw9vk/zn16wQ==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt2HnYjtUWx/EnwzvwPrxkSJ1C0mAuRSqnkiFSIRVKOg1HVJRKgyGiyFRS
lErmWeY5Q4YkwokUUWgwiwZpdD7rut8/1vXc67t/a+3h2fe+997l7+vcolO+
VCp16xmpVEG/09OpVDmgb6FUqmhmKvVBTiq1u0gq1R67IyuVOhf7ODeV6oBN
E/Mc/5WMVOo9bCf2X7qWdGXwtdgGrC5WDjuPfY+VKZZKtc1OpY7RFFVWmmac
es+OZ7wwvli9xeiK8fPx66trBM1Alp8uB/9dvTPo/iV+GHY/9jftBJqPsMpY
UXUWYfvUOxdrg93A30z3FbYP64C1wipgG7HL1dte/w/If4V6n5CvDjYZW0qz
Hysgrhx7Q+wD6i0g/n26onQp/iGxtei6YnNZRbp+4s8Uv0Kbp4mdqvwZfle2
Tb1b8PuxLXJ1EH8XfyLdWKwTzaPsM7qZ2EzseX4P9jk2HrtWvTXFDlf2t9gF
WFv1NsL20O2iG4UNVN6cfyvbgp2tzfeK/Y1fir4MTRr7TdzX2lGdvoM+FMH+
wL7DLsM6YwtpM8XsE7uX7ZavOF0p+bL4N9KNorsC66H/GVgj7B1shtgeYtvL
2Zh+eswf1hyrhfVTz0j5LsBGhI4mjS8SW1q+2/ir5DsiXwZNL/xPz9uwE2Kn
GoMP8BJifw7G9sg3mN2pvDx7O7/xo1kg9qKYp3KWpFsp9gu8HdZEnfnjfxOX
q94iNH+JvV5dQ8VtKGxMPC+gmc++oDuL7m66H/jZcpSUqyd/pPp6+C0t/iw2
Xj01xe7C7jM+s4umUmOwGtgXWFtsBvYGVgG7XF212C3q6IXlYkvorqQbQDcU
K4d9jDXF3sF+oW+grioxztqyVpv70p1J92+a4sqvkO8vNolmMusf75g2/41N
409nBbHBYkvgGZ5nxJxn/9D8zsZ4HsteUpZF8wc2jj+enVJX9/h/sAn8iVnJ
fxX/WU9tnB7lxuoi7enBH47fgM2mm8NSxrOCNnfxmKsv5bT5WrnaYEewUfpb
SOwDYg9hfcVWE3dpjLm2zMcaYj+q40zsJexGOY+JOcHaWfx6yreKZdL8kpnM
mx/UM09sA7EHxD1Du1odJbRvMnalOhrhU+W7m+6otjQS+xy2GcvGGmck73m8
76XETcAu97wa+0v8szHPsONib8a2Yu2wLlg+ujlyXaje7up9FPuHbgZWFnsK
ax/zWTvriltIf6E6/uE3jHcXa6of67ABdM2xomyz/j7LH4bXEzOTbhY7jZUq
kvR3Ln8eO8M4PVwsma8xb4+otzxdTdZInvX8STGX+QXplor5gP1LvRPlz8CW
8Zez17HzYs3AVvBXxnqFnY9dL76idpdn56h/kL5m0X1Is4pdQrdYvtGssfKF
sRbEu0nTgLa9tlSSY4f4naxYOhmrfjGf2ZHcZF6l5TlsnFNsjri3aUeyaso7
yVHd71v8zp5z/BZmzdRxc6ztnvOzh5T1oTvE+sjdl43Upnyx1ucm8ynm1Y+s
sbirsZuxz/hzYm3iT5anK1bC75msBd0kvxPjHVf+lLLafs8wNjPkHqiOQewY
VlY9BbHB/CHsR+w4e8Xzq2y+svNpOrFLPb+NvcNOxvyW7zj2Hn90vJvxvxVJ
1qF3+aPYb9gJNtTza2ypsspyXZVO1o034n9jP9P8FPMo/tv4P5XVpCmgL4v5
SyLeeJ8t/1msuOf52AKWj2ZWTjL/9pvPTxqbFeZzP/luMkYpNscYPMj/hY0Q
8ybbTX9X7APk+9bzWzH27NdYd9PJO/MyfwA7ii2Vs7Pc+9RxjbJp6lyCPYzt
xepgU7C5WIEC8se6re6FYsuxu7ThKG0X/0s3fgnamzOSuRFzpAa2S+wj0Xdz
6l5lQ7HPsUry/Snfefj62CPFWi5XFf53uniHXLdr84Vif8J/Zk2Myw66tvEu
07WR7xWxTfF/lJ+Ovih7UFxN8fdowwXK12jPWnYJ1go7D1vIXxTzK2/+bRX7
P3adXIVjzZbnHuXtWBvsQrG3qa8qfwB9I5qn1VM79jxYQXYr3U3slDy/s6+U
taI5T+ytGcl8jnl9pdhT+jE12qwfTemWxndM7CpjspptxOqJrYR9H+POTmMv
YiPTyZp9GDvCKtNUZb94/pVVMJdm0VTBjvNPxDhjU7CjeevpBGxicJou6WTd
/Ya/h12CdUwn39qd/K/YxVh5tsDzQrZA2QUx59lp+WZhs1k5mgvYR57XsU10
DWmasfKeN0TfWEWa+tG32E+y1sblGePSIp18zzfTbIn1naYsm+p5GntD2Z/6
cBH2OX87+wZrF/8FK+Z5GbacnR97jXhnjHsjVjn2V2LL5ib1Rb0/sAZ0peM7
GOta7AVp34s54z8aYty6xLeIbg2/VjrZW2zgb2R1o694KfP5YOx3Y48kx7F0
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
ZrGknXG+jT3N/wE07oil
                    "]], 
                    
                    Polygon3DBox[{{3098, 1614, 2765, 4414, 2978, 2979}, {2979,
                     2978, 4379, 2427, 2428, 4380}, {3116, 1620, 2795, 4423, 
                    3003, 3004}, {3004, 3003, 4438, 2866, 2867, 4439}}]}, 
                   Annotation[#, 
                    "Charting`Private`Tag$4759969#1"]& ]]}, {}, {}, {}, {}}, {{
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwl00lszGEYx/Gn05ZaSiWICBqCSBhrmmozU7rEhYM4WkNELNFGglTKTdKG
xMFBhTMHS0JwUkRaDuJkazujK1prYjuIC59/msyb3+/7e57nnXfe/3/m72na
0lgQES+tJcURie8uitjJtEyKKMP9UyNGZadwOf7Gt/HL+VG1n/gMzuKLdBO9
RC9b2/ib9CC9Q+9aJ/intI1+Nf/X/HPcjv/xef4q/1utwJn68D1cyH/mu/iO
0oh0KmJt8djZS+gy/HhiRCX/SjatxBllr/np/Eq+dlzEG3xfz0zZalk13y27
ZbaUXyOr09cjm6WnAvfyO3x3h3ol7tSb4XPyB3SOvip5ls/L5uJqXG+ft7gc
Z3BN8nvwQ1qDu+yznu+XLdCzTjbA19IGs4P8I/VFavXJ+fkh2Qxah3840wu8
3V0tdHed/GZ+Nv8puW+8AZfhK3xO1mtd4J/RVvokuVOrmb9ND9Ab9Lq1lf9i
/o/5jfxH/hffrpbBI/g7TifPa4rnWmhPtXn43eSIk96jFc6qLT7oa8HNEyLO
69Me2fFY5nHGcTqi11gM661SOyo7p9eWMSQ7gt/rcW1Rod6Eh7Et4xo9jI+B
s2ZcWeTNrNJ3SL5UfdCCsR8P8K440oJ9uNVMn8wnesztlTXa67S8KPl/6Nst
y2sQxS4+x6eS94Qu9oUNqbH/0X8Sl20V
                  "], VertexColors -> None]}, {
                 Opacity[0.45], 
                 Line3DBox[CompressedData["
1:eJwVz7kuhGEUxvEjErFvd6Cxb7XGPUhsscyQaKnFRdhDIa5EY0bHEEIsM/bB
GFQqS+Gn+Oc7z3Le93ubpucGZksiYgoLVRHLtRH71RF3NRHz5RHN9AF9WRex
WB8x1hCRoZ/4z8ijvzEiIR/kH6FPZxtfvF3nrOhk7I7zHugWuhXHuineld6Q
+QSbFREF2QuS/CV7EzpnsjZeO1LO+OStmk/5eXqjMiKrf07nfJftTeo8yzr0
OnEhS/NGzcP/b8KW+4r0K6bsrdhL6ORk3/QP0s5Yk2d5BXOp93bR3bjhXevM
lEXcmt95H3jDNH+Ed48d//dL79lflx26J+meIt1D9+JR7w+a90So
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzssuw2EQxuGxQ53ZkthIbAgS7oNYoyKRSNqdnbuwIBHEtWh7A/YOCSp6
PtCWlue/mMy872/e+b7FdHY7MxQRe+osFfE4GfGkSuMR71MRnemIBv91LOKc
PqDfzNWJiCa/oqdGI45kivx7vMXPyV9iSzMRs7wyvUa3sbQ71zLPMh8y83hO
fWE1O8f8HbkV3ie+zvvG8m5sjERc0RXzJt5VHezQzRe5U7ktXjXZtdfFSm48
DEfs02XzAp5XPazOO5HblVtNcnif/sEG+g1+q2ruFb3Rs/Ob/NPeBZ2m6+am
nT6/oWfksqrJL+ADfkH+Dlv2zlySodv0H9bS/wG8RUlb
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzskuA1AUBuDThHZh9gYWwmPYWmpsdKIlRIMmWImYhwcQrRASL6QtiYWE
oKRBYuEJfF38Oef+07kjpUp6LRERRTjtiWgNRPz1Rvz0RYwPRzQHI277I05o
JXMzGfFOL8Eq7zF+xSx6v8I6vch3hL8xG/IbQxFf+n7p17h7aMKc9zNMu1Pj
K+s5lFs2K3qeaLMd8KZ4DmgFewHX1pfEVeXynTtwBZOpiE/aN8+l9xjPvlzO
nsc9Qhp3Lrfkzh5t0Sy790DLQZ13iyfBc2Fv41o6R3F1XA23K5c1u3FZegMy
sKBrCrdDn7fP4O6gC3cmm5HZplXNCX990/tBL9Je+P8BWpc7BA==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0LlNQ1EQheF5FsgWOzSA6IHFIbRAQOIMY3axBjQAEl2w92Ib6AKQgAwZ
Y54X+G7wa2bOOTO6unPrh6sHWURUcDka0RqL+BqPeJ+KqE9HzE9EfNMa+qra
xg+tgzaWZyKOJiM26B2c27uSrbtxx68U3dQHL0eTV1O7mNVfI5f7xbE7a+5t
8gZYoC2iYb8ld6/vpzeYy+ZHvNgJ86t6ZncrvcPcS1l0sUI/4W/zCrwPb7yx
u8TLzFW1JLPDHzZn6Z3qEHJ8yj/Jl+WK5mf9rkxJ/0cLtwfqqbpHH6Ff2LlN
b9Q/8Pb9Q09f4L/J/QPZLjwc
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0L8uBHEUxfE7+9fO7OzsruwSf4JaIlotb6CjkRCVsB2JZCWUHkIvofAe
7OIpFP5UKoKP4uTe8z3n/iaZpd3B5lESETt0mUXkeUTWjtjuRAy7EeVmRAvb
b0WkfAMv+FIRUZEl5jp+bJ5QR/bqfqRXld/z126XdXrYD1/Du+aYH9gn7Yv2
R6rzZe+c0pabVawnX/PGhOzB/ond8Lf0y3/xDVnffuXbe3zIqt5I8Yq54a2h
eUbTem96T3qZfIo/0M91UmyWb+Ijc4YS2bv+tyzH57BDrNDPsHm+7t2WrGae
0wUt4B/unv//mWzM37lbcdfHSvY2/qL7B68OJpk=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0FkrhGEYxvFbSmnGGHLiRDkVX8YJOdRYG2ObYSzFqex7tmyFKHwW21eQ
Y2maEL85uLuf6/pf1/O+Pa29o525qojoM/uJiI/6iJa6iF/T0Rjxlo54TEXs
YTn7gp5tiEjghWTEovwutmDn6Vp+Su9cLiu/gz3Yr/SM3jfebO5529ikTg2d
1DmTGeZv8YfsU7qoU41PyM37Ro/cJj7nPM4rYwneieygzgZ2Z7/Q07olvMnc
8trl1vEB5zHdP9PNO678m/vWsKJ9RE/p/uA5c+m8it3opd31Zdr0nuWueStY
v31IF2TLOiOm4K4uuWU875zllSpvxDuQzegsYVf2E53X/ay8hcnQ7zr/TFo7
uw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzLsyQwEUheFNCpdcnHO8gBjDuMQYOreKF0hlhsqMUREVQZJGnOQRPIDL
6yC8BA0KWl/xz9p7rbV39bBRPx2KiD3cFSPGk4gcrSxiidbQNZ+XIqbKEWMT
OhjFDv+GXsimZV+692nEeiXi2Z6PRJzwUvmHXlO/aZ6RVfUeUOIX0cW+/FI+
J9/wYxMv5l+9Y39mzUe0hwFv3v5Gr9xU3A/zCyibd/26pdeyRb1v/qPulp8L
9gZNdFryZXtGX2kNfd133dx9Dwd6bfmKLLVnSNBHh7/G/3Hz5Gbb34H9z7xK
z/iTOp+6/zvtKY4=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0LsuA2AYxvHXrNUDbR2qWjfgkGir2oTJjMSqaRw6kSirwSARTdCExdDB
0Ehcj3IdbsDP8M/7vM/zfs/wVToX++cTEXGIt8mIlXTEcSZiJhGxSq/jLhux
x9tI8lMROdm0uct/MPuoylpuvpCXJ71r0ifo0QXeUP+H/ZauuV+mx5i153Q8
4kjnGq8uz3g3J0ubN/yUeYUhPc9/11d0e4oF+5P3bdmzOUBDx6/7b3lRvmm/
nIrIuknwtuyL/JGemrszXslepxu4d3fAa7or6FuS5c0XvKLF35H/oPz/J95s
011c0xXep+4/tXAizw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzTtLgmEYBuAnaMs0XZskggYpJAtCqK05XKUGh6bQau2gUmYFtdRSmHRQ
+6yf0x/q+oab+7lP71tstGrNmYiow+9cRGEh4gSGhYidfMSp+4dfTRm6vMp8
RD8T8ZyLmMqe8A1d5t/aTfW2IJHV9DuwSU/ont6aXl4vSf/KRoz5x/ibbuuW
5Nd6G3RfbySfdf/p5Py1y1vU++Rv40s4lGfhCAbyD1nFfeWdFe8d8Cb0o/27
7AGP6QvbZXlXL3EPZRl+E95sqrxWevPX8QjOeUs2HZt77+zrDeR37javKOvx
vnTL8CLbszmDVfqV/gd4rC78
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz0lOQlEQheFyrMYmokiniO7C9kEIIY4cMJcF6IzExMRmJP3QZgkqKDvk
u4M/p6pO1Xn3Vbv3N3crEdHBbDXidDOij8F2xBk9x1D9tqZej9jfiCggj5b5
O+3zLnnZVsQ3dt3k8MTfoT0c2ZnL/+UP1Jn9mvoHJRlFfODWzZDfSN9yV0Ae
L+Z79CG9Dc/6P3kjeqGvpTfQsf6KjvRNGcfyZ6jILuMTXTtjfiv59F9Olv4T
E16dNjBVT/hte4fuqjjAF6bm1+Z12XOU7Zfw6qZIH3FiZyF7CRmKJdg=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0E8uQ3EUxfFrjBQbkKKv9b/aNahUUq1XL2IqEfGntQQSK0AMSSQShh10
0IFBJzZR7MXnDb6553fOveclr3h6k/anIiLDcDqiMRdxMR+RzETs0U08LMh5
B7MRy4WIsmzJbPJfzFe0ZQ07E1Tki+526Uvc0qu8kf6B9xPdsV+if7DmvaLj
DWc6a7zD/Fvu1vNvmff8onkl2+B96Tqmr7Hp3ZI92mmbHaTuE9kvtuQl3e84
t1PndeXb/LGe1H6PV/Xu0hme7Z3wjuyV3e3IEvMDn8j4+/I/1PL+/F/RfdzR
dd637n+yPCYU
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0E0rA3AcB/CfM8JegCjvQ2JtMxStxRU5cpyIA8Pchnkoik1chhkhhDy8
MJ8dvn1/36f/4d8/uzS12BYRM/DXHjHQHbEGtUREuidi3f3Lz+MH2OWNd0ac
dERcd0X8yK7wMZ3lV+yaejn4lk3rl2CS/qKP9DJ6C3r3vEvbT34NN+gd3ZT8
UG+CPtD7kI+5t2V5eKdTeAtW+H2wClXdN1nWXbFPemeed0dfeP9Vdo5v6aLt
sHxfr+F+kfXyC62uzQhv2f3MH8U3sMkbstmzOfPOnN6T/NRd5g3Kyry6brr1
X7KczQYk6Uf6HwzINOY=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz7kuhHEYxeGjUdiXK9Bg7MSSaPRGRWIZywSRTEXhCvQoLWOrUdluwVYp
uBMqjUfxy/mf97zv+fJ1bOzMbtckmcNzfbLQkuzjqC1ZpEv4qE3mG5NCc9KD
bkzLr+lpgz1ZsTW5Q5f9TvzUJaOyF50P5lXvZXvfsnt+qikp8bu0XdeZfJXv
09mPXhTNP+VfOHA3yb/qO6YlvoKx/156YrZCz/myni7feMSgngHcoGLnQr4u
H6dvulbdHOJUtkbLqHpfyjftDbsbwRBucWW+ZT6j+wkF+9349b97dEL+rvcP
Kh8r7Q==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0Mkug2EUh/EjqARtkUgTOztiYaFoa2oNWxI3QNgYqg1ijmuSNJFwD5ZW
FobujYlhY/hZ/HPe8zznvG++r3elulhpiIhluWqLeExHPEljKuK9I+K7MyLX
HrGWjNjDursikti6Pmsuzw2pS60RZ+oG3sffSoEbxp7lyF4ea3JHUca4stl6
IqKifnjrjh/Ht/SHZjJ2UlhVP+qOCW5EXfVWTW0282nvx8wkd22uhg3ay2AJ
55JMcdvcPXasP5Edfb/+QYp8zn3nUrabxXb5Ev6CvcqbtNj78t4vP83tmTnF
euyksX19wdwMl1cv5FIO8AW+LrPcgDvm/79LNp3nsBv//g/RZjJo
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzbsuA2AYxvG3i8VZRBit7sViQSLSNFJpm2BoiMTE5rxbUNoOiKbV0lsQ
Z3qwuAEX4Wf48j7v83+e95tMrc6sJCJizuv2RkwNRWx7hZGI6eGIHbrDT5pN
75iX7o8o90U0BiPaWN0s2Zf4E3oPclsDES3smz7SyWNf9qJcis7J3WM13U9+
1WzYD2WT+KXcphvjch94FlvjZ8wTXtd8///bPNBpyV7oVNzJ4m/YLV3gLeqN
8e5kN+ResXWzZt/XXcDP5er0C5az79Ed/Nl+485PT8Q8/0zu2p5x7wm7ok95
s9gor6qTd/sRa9O77ixjv3J/UA47Sw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz8kug2EYxfHHhsZQ1a2VrVsw62jauAMuwLRCpC0hhLiQmjZm5TKopHbC
DXQhpsTP4p/znPOe532/r29+cXahJSLm0OiIaHZHrHZFJJIRn6mI156IcfOa
rERrsiXZOj+oO4QBTKcj7mi1M2LD2ZfetV7GziN/ThuyZVm7OYscSs7eZEf2
KuZvnRs+76zMl2mzNWLLPOL+UQxjxns1emyvU+fH3q29gvlJ94LW2yKStIgJ
bMvfdSrmE3s7fD9/9/+P7hrDPT68t+csr1Onl/q7NEWriYhJus9v0l7fcap3
wGft5pDBA87kh/Jf31bzxpT+M39FX2QrsrS5oFtEHn8UYjop
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzMsrxAEUxfH7G0uvmcljRhJrK+JvYN4P/gJli79BCTvyipC/wU6iUZQi
e2TvuWSJz+J07znfc+/I3GJzIYmIeXppj/jujvihnq6I37QwGzHVEbHRGbEs
G+TTmYhNvqg3jRXMqrxlXtEW9uf2Va+AP/Jnbsd0crJee5mK2Db2Jju179rD
/k4lfodf0Rtyl5Ht8WX/y1jJrMmvzRvq00t0ElkFf+DPaZzPy/vtFapi+/58
yFb5NTrgR/lPquEV/25pye2k7BCvy5/MC/1LylEKS+k0sCNsXTbMZ+XHfM2P
JlY17+ieTuRt+BfNYM98y92EuwFZ3t7Qm8Xq5j8NMzSe
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzL8ug2EcxfGfgUSqqswi7kBidBdmk117AWKQShOJEPUnEoNLQPxpI6++
tImGG2BAW0rZrRIfw5Nznu855ze9WJwvDETEgvediTjKRkyMRsyOR3THIlL+
C2/y+/mITXltJOIhF9HH72nVfwPvyxt6n3hi1+H3sDx/KP/AL3XX+aL7t/KW
fQ+/ozf+u/pl+YVe2W5K711+xR/gOTqHtXWf+EH6SFO6Y5vlz22b7hX03mwb
/BlWsp/E6rprel1ZiV77V2xX5ad6Cd+RVfwz8hmbV50a38Z/hyJWZCe6qdtL
/zle54+xZVnPjcTmGa/avfDb2DC/Jf/R/QOg4kHc
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzbkuBAAUheErsSV2pYiYiZISb2GZza7Q6AiPYXkIhBCCEGKbGYPW8gCW
XmFr6PgUf845996Tm5iaTc2URcQ0XmsivhsiVuoiWuojypsi3tDHr5ot0ERz
xGltxJqcdptBCgPmt/TMbsOuQi+Pfp1HuUS73azzrfwABrEpv7v70T3X3ZI7
5QJyZlncYU73wn7HPqWXxjb/4W6Rz9u10Uq5iAz/ZH9Fe3R3+XY+ixz25E93
S3xBd1/uki8x7N8Q7jGvW7Q/tP+VozHimb/WO6BJWqXzhSH+yGyZJvUu9Y7l
Ub0xjOABJfNT82qd0v8/9y/yDe3VO+E7+Am3kxjHH5UdPkQ=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0DdKRmEUhOFjY8BsKyI/6h4U1EW4BBs7LdTKPaiduRMEwUIQBDOGP1uY
cw6NeQc+tzjMnPneORduqnegp78kIvrMX2XEYU3ETnVEG+1oiHiviyjyL+bZ
FO1z9RFrmHxVxGVtxK/eBc3ZV+XdegXcE76CFugbndVr4beTLn00DyartyIb
1svjzt36cfMsuWmf0Vv2nsGN41tx395z/JY8Rbtkr9h7vpzeJXfptG4zn9Yd
oy24L91R/kC2pD8ky2BPfe/T2wlN26d0F73v427xI7gyeZbflDfRdtmLLMPf
mOvkrn1SdwGzp3vs3iDuw+0jflc2761Tto+90iml6eQf0wndRn4dc0A36D+7
Z0wY
                  "], VertexColors -> None]}, {
                 Opacity[0.45], 
                 Line3DBox[CompressedData["
1:eJwVzzsvw3EchfFvBb1FqRASNXRhwwuwaN+ByWUiEibtwivQGixIarQx2UhY
WURCahQJITqykqjBp8MvzznP+V+Lq5X5zURErDnPPRG3qYjF3oiJZMQSLucj
DjMRk3rT1j0Ysc6X9A1csZflJ9uWviDfcdvyovzGp91T0yt6Hd+5DFfVU9mI
BpfEHe5ITneyLYc17oTrk0+xH+tcw16Qz7kx3OMu5HH52DaN+9w1NyXf4Awe
dJ5nL8lNbg4fsYxn/LdvG3LNC3epv+IPN8xd6Yl0xCd3L39h1b92cQ96S25z
H/If5viC+1p6xvl1inoWR2xt3MVZbkQe8J7RzjVcXv4H6sYzfQ==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0DksgwEYx+GXRGiZXCM6UrtjcTXOapA4hjaEwRUMxeiYXDMjG5PJxGI1
MhlMJpPViOcb3jz9f7+mab7M8s7MdkVErLqPqoi/lA/piEtWsq8+ooLZ6ogU
p+00r/U61rphrYGN7s7zZvb7XhOLWgvn7Vbe6xkO2m0s6+3scA9aJ3Nalida
F0t2N5/0Xo7YPbzSB5Lfcs9ajqPaEG+0Ca7Yeb7oBY7Zk7zVZznn3rQFjmvz
yX/Uily3S3zXl7joHrW1pLlPzzeZ970Nvmplbtm7/NL3WbD3kq0f8NB9a8ec
0o74q50m78M+449+wfPkvdZE/ANxQS/i
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNz88rw3Ecx/G3AxtO1P4A9+XfsDPKATv4A8yBmu3IYeFI5IBSbGvyrdVy
WKa1HFxEuyqpFTks/wAeh3fP5+v1+dHnM7NWmF8fiYgl8zYaURiPuJ+I2MBs
KuKId6ciFiYjDvmsbttah5emDZ/TncuL9pxhTi6ORazik7MlnucVvJQ3+TPu
yVv8BK+cK7rvlFd0VazaUzN1fqxrYUO+wwu5h7dyYh75te4Vm3IfE/kdW3Kb
f/AODvEFB/of3ue/2JY/+RcGfpsd/3vwtl38k+t8aH3ZX2s80hH71rq87P0H
PKO7kVfsaWBi/gFFFjsF
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzrsrhXEcBvCvk+M2HA7lkkuJGX8AK2VyKZEclyhFpJSBjcltpRjYiJLB
QBITWcVqYJJSLoXJx/DreX6f5+1939qR6a6prIgYdx6TEdkFEQM5ERv5ERk5
kI5IsqbciJTsKo6Y4Dv2SVnIulm7vVyfZ/u2HragV7AhW53sZSvsyL4q61kf
m7M36FvsxNbPtvVGtmxrlhl2wM7th7KFDbJNe6t+yq5sw+xMb2O7tg45yq7Z
rf1GdrIxtmf/zIu4//8nvYQ96F/s2P1HlrInduH+LH9ZGbt0T3rfO7vTP2SO
+71eJKs9k6W/OAknzWrYq77o+yn5xmZYob7EEt69JmdZJfu2V8l1Vm77A1JX
NeI=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz0srRGEYB/BnFuSyYjMuK2Yhl0QslNuOkEYKC0kzo2SGM2YWbuWWr2Hj
I/BBKGskKwtKuaz9ZvHv9/zf57ydc7ry5eUkFRF5ea2LqDRGVKW3IaKf3y0R
fVzXh9jTGjHMQX2UI7JpHudErZun+ePeFAv6DAfcm+WYPs9f+zlu61kuyaR5
rTniz26VK5KTa3fzfGiKODPfc0cvSkle9Evnz9zXK3KjV/np7Mr8wXR9xKn3
PMqCs3NeSM6uWHsHn/QtFqTke3a5J2/Oy1z0XMLE7rCmfsR3+xNm9WNW7duc
tUvK3Mkv/9XBA72bGc9mmNbv3LmVDd/8Dyo2L/8=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0LsvQ3EYBuDPQIupRSJamtKL0bVMLhFxC4PRJBKDhX/AbhIJi8Rmk5g6
2YnEZXJJ2MRgMWB2iafDm+e8v/eck/bk17aWN+siYkNe6yOukhHXMpSIuOV5
KuKGFf2OiXTEPRf1Rz7IkuuOpoiMnDZGdHLSfVmu24pc0Uus2ns5pZe5be9j
v5zZBjltu+SA7NlTzRE7ztIcczYhq/o4j+zdznskL0XZtRV4bBvmgV7hkIzK
vj7CE/ss52RGFuTQNs+q7dt/a9d/at9B/+OL7/HLCz3h9yblyXUT32yNfNbT
zHm2hR96G9/trfzUs7XvJPXeleOXrYsNeoEFzxaZ0css1e53/Q9cCy9u
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0DsvQwEYBuDP0Ash0foB5V/4C0xCLQySkrYJUW1icgkLm7QrBsJkYLAy
diExGYjLVJdISFTCYvAYTt73e94znHagUBmd74iIsqeViEh1RRSSETudEdNy
KhORZoOpiIzMZyMW+KG9KrNsnI3Y79MRa2xGT7N1/YGV3E+ym9XZkrshn1kP
W3W/63tsS+9l+/oHa7g/ZYYds233iWyzLNt1D/mGM9b0TQV2rg+zA9uYLLIL
dmW/lHlWYkf2Cf2GXdvK7FafZKe2opxlL+zR/ipLbI417VX9m7VsP7LmvuPL
suKdhP5mS8oVtsDa+oaelV+2GuvTN1nab6rLRZZjv/b+//+K5Wx/TWI7nw==

                  "], VertexColors -> None], 
                 
                 Line3DBox[{11, 1325, 583, 3523, 1309, 26, 919, 3794, 587, 
                  1313, 4094, 41, 591, 3530, 56, 2963, 595, 3534, 71, 599, 
                  3538, 86, 2982, 2983, 101, 2992, 116, 3007, 3008, 131, 3017,
                   146, 3029, 1277, 4080, 161, 604, 3543, 176, 3045, 608, 
                  3546, 191, 930, 612, 3550, 1315, 206, 943, 3808, 616, 1318, 
                  221}, VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzz0vQwEYhuHXQKsVQpRgaTuVnUXrJyC1moqBgYQ/4GNhEsUiLNgsJGZW
El0NREdfMwkT1xlOnvu5n5OT8xZqK9XlloiY87y2RjTSEfNtEeOpiAV5nIko
40d+Va/iNVnrjpjBTX5TX8QNbgsv4Te+syeirq/r+/Kd6+I29Ew24pQb9f1Z
7gyP4bqtz7bNXXI5fCX75Q53Yh/GN1xJ7nK3eASf28rygHtIbsANWZGH3IV9
Cj9xk/KIe8bT+Nr25/8GuA/uTv+U0R4xyN3rWfzDveAh7hd3cM3kXren5Jcn
ndzA573zjXuTe327qOdw3pbV9+QEV+AKyS5LXBH/A6fdMm0=
                  "], VertexColors -> None], 
                 
                 Line3DBox[{13, 956, 3819, 28, 2949, 964, 3826, 43, 974, 3838,
                   58, 2965, 982, 3846, 73, 990, 3856, 88, 2985, 996, 3862, 
                  103, 1004, 3871, 118, 3010, 1012, 3878, 133, 1020, 3888, 
                  148, 3031, 1030, 3897, 163, 1038, 3907, 178, 3047, 1048, 
                  3918, 193, 1058, 3929, 208, 3056, 1068, 223}, VertexColors -> 
                  None], 
                 Line3DBox[CompressedData["
1:eJwV0D8oxHEcxvGPdP4rlMFyZcHAoGQxETEZZFMGJguTLDYDWdiYGFwpCwYp
x3Q3EIlF506UhTPI5M9AXje8e57P+/l1fbvWqbmx2bKImEZ/RUS2KiKDcbRU
Rmw2RqxWR/TZTrk0zrhRWWfv4V/dB+59jOCX60JK38GxfUC+c+V+q00+cgU9
jxyeuMmaiKT8kd849M2nvOUGayOaZZ5744p4QYZb4rrt9XqBy2OPy8kjLmlL
yDvuirvEBXa5Ra7B/peIWPfGNaS4Prlhf5NftmtuRV9Gbylt89yz/mEfdm+X
3uFe0O9lkc9yQ+5Od6IpYka/0R9saW84wZZv2rkJ27ns8L/+A5fVPrY=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzz0oxHEcx/GvcB7qyEKZsJjOZmJSZmU2WZSBTRkssqibDNxFeaiTh7qc
hNJJdIMYxGBQZHSD7jJ4WM5rePf5/d7vf//+/97J2fGZuoiYwkgi4q8l4hff
6G6KyHZEpFsjhrUqV8El92mT+qI2qJW54+aIAj74GrfCtXtuwHmXz+Gce9Qr
XIPWb9+4DW0dRe2dS3M/7j3OGbuGYy6vP3Ff7p32hbv3njvcosQtcWO+q835
hrvGIXdlz7hRLWGfuUuuiAvscwvckF5r9Cx3ihx3YrN6SvvRHrgCd4Q8lrU5
rk+v6ofcAba4PTuvd2llrcTtcNvYxLSW1F61rHsGq5jg6/mUf/4HTBVDsw==

                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzz0oxHEYwPHnytuZ3GpQbDaLbBaL+TYjks0ZxXADEsVFKG9JYrvNxGLQ
ySAkL4XQoeQGeVmIfAzfnuf5fvvX71/flUn3JSKiF20VEb/JiB98o64yYikV
kauOaNU+uQ/scm9mSh/VWrQSV+Je8IwybZYb0pv0J+4R21zR/OT6tUbznrvj
bnGDJ26K69Eb7OfcGba4U/OC69BqzWvumDvCIQ64MS6tp+z7XAF5bs/c4dq1
pHnJzVdFzGHBe/Nclnt1J+wz5jQ2uUl99f8/3V/lESfchH0cg1pOG+Ae3O/6
iDmMNa5bz+pX7pJW4Da9ZQPryGg13lTUVtzLWEQnX8E3+/4PCMNFlA==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0D0oxAEcxvGfl8O5DFIyWMTkBiXLDWSQDBY3mSkji8mmLAZSLptFykAG
JQqFwnaDSIrkpSR5iSwSPv/h2/N7vs/1/99d09BYfrQkIobRUxFxXBVxhEE0
V0Ys1kYU0hHdtkPuIIHLy3p7jn/Rt/Ut9CPNL3DttjV9FTt6r/zmajwvK++4
VCaiHKV45uaSZ7tb3H/VEb/Y5H7kFTdga5TX3Cf3gXcUuWmuy17nfuDusc7d
yn0ua8vIS+6cO8MpNrhJrsFe5i74nvNYSZ4nl7k3+ZPyeW7WPYMcCrYJ7sn9
Ze/Tl/QOfcp9I1/5k+T36236uLyQj/ye9++iVR/hi7LT//cPBac9Jw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzj8oxHEYx/HnEofFn8liuM12ucGgrgwG50ruEpnk1qszKExiMEii1JHC
6RT7WQwYjDJZLQbTbbJcSl6/4d3zed6f3/f7/WUqa+VaKiKWMZ6OWO+LqPdH
ZOUcTuUzfHbbdQWuiAZ3jc5QRFuX163wq3jlmrobfOtmdJvchm4LhZ6IX3tH
V9Ltcwd454q6wLb85vycfDUckTY/7DtySR7AXvI2tyBX5ZHknPsmfbMkZ3DI
f5lTvREXuMQfN8b9YNr+YL8175Dldt1xwnX5p1muhXuk3DuRvKsf1M1zz757
NJ+QT97TnXOj+kXuyN7yj8fmi/kPIqAw5A==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzz8oxGEcx/GvE+fO5NiUSFE2Rdwt7E6XK2WSlD8pDEoJuYUUITKIYhO7
WxnEYrXIajT4M6F4Gd59n8/78zy/5/m1jM8X5yoiYgzZZMRiKuI4HdFjncNy
TURlJmLFfKmK6NYv1EUUdENY40v44l71/fpJfhoP3LpuA5+6Ad0St/p/Dlv8
Nn64b/25e/f4LvORy1dHJFCyrq+NaEBBnpLTZpvcjh3vK8oZbOqyXA7D8qzc
aOblQRzZOyK3Yld35757nHrHGX65Dt2Itz7xz7jgL9HJj/KH9rzxH7jiy0j4
bq9+Qp+UU3i379q8QZ9uRnfCNcnN2JfL/vXAvDX/AB5zMnk=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzj0vw3EUxfFr8TipxCoGQsVjIh5i0w4WEkkNbWP412OTtqmExGRiMZol
RhM7L4AY2EhfQBsvgFhIfDqcnHO+v/vLvcNJbbPaEREJDXZH3PVG3NOAnKMU
LaYiDnsijuUS/+uKmMc29F85weryLFaUW9ia3uQzWAGr6Fvtuf6IN3xVf+U5
rCyfmru19xFrYA/80uxQZ8Q3/kNfdNLnDip7a+mf1KQb/2t4lT70M73B3+kA
26ddf571F3qiazM7eIku7Ftxxzlft39PnvCelY+wBb3O01gGS/RlXsDm5Dxf
0rflUTPTchab1DN8BJvC8vo4L7oljY+1O79yTwWv0j98qzJd
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0L0uw2EYhvFHSJUudKtIcASSNukiBkO71KIGIj6aEjHQDmgj6GDoVF0F
YWjiDBiMnIFESKxG4Rj8Oty57ud63rz/j5lqvVwbiIg1mUxGPI5GPMmEviIZ
mU9HdEcimvoODmGeW8JBaXOHmOU29L/hiJL5F+e4C67evw8/uYL+gfs4a7/M
v5oXzC94y62mIopypRcwk3B+PCKnZ6Wtj3HTeseZKUyad/kz951KkX/Ge/6d
77j7Tv/xnD3Z5rrmE/4SU85/979RHvyDFtfkqvbn+hdfkQbXs69xi3YHmODe
7Nbl2m7T3RU+Z7+FN9yRdzmWf8KiLEI=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0EsugwEUhuHTGLgP2IEgIS6RuDQMNExMdFIMSESRFmm1QpOWYS2BKQMW
wTKIBbSxAGKiCZF4Onjzne/9z9+e/EMH5UwpERGHGO2KeOqJeMaIeRvDWByM
KHRH1MxHsl8muQ3ZhzxXkXNc1tzqjEjr33KW2+PO2r8nzwcimvya3pA7vTzK
fEJ2IPDovSt5iV/3/OEHNb2Kkv1P/QsfeLBf4S/Q1Ov6u2zglCvi2Duv+hte
cG8nz+dw65aW5yl33Zgzbj0xT9tJm6+5Jb0up7h1LqevyiI3by7IFX3fPG4n
ad7iZvRNOcYtcLv6pMy2/4+f0JflnZuq7e+Mf73xMfY=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNz78rxHEYwPFHnXPcRWShDMqZ7iaLLE42pYROGfzKQHEWix+n3MRtFmJj
FRt1NoMSf4ERi4lNZ7jyGt493+f9/tx9P9/+la3pUlNELGIwFbHRGlFrixho
ichih9vFW3NEXitwYyhzB6h3Rnxpw1qRn8Mzd6hV8KONa9vcplbCQtr7UO6K
+NWXPD95Z9Lc5yaSEQ1+z2/SXAaT3Ko9YfbYe1F1dsqeQUXLcXnM2Nft3eao
vYBTZ4v2PlS1O/e4x7k7XqDBZbVZd33hX/HJXWpXyGnz2gn3rn3ghr9F+O8h
fVmv83/4dq6mPWBEW9POuHZ7B47s17752Hw0/wEibDHB
                  "], VertexColors -> None]}, {}, {}}}, 
              VertexColors -> CompressedData["
1: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
skoYM+ho9qoqlo/7AZ8Jh7wEcOXP9N3HHrH6l92vlG54TwC3Dr7quUKXfZ+N
T++/H2bWCAF5Phv2jq/6az49T+uOo/263jGD62i/rqfhoH60X/e38o+u7wy9
biWCdzzTmTS+vcrv7iga3/63ev5fn+Nh05BsOg5KeqAm5MZBTF3bDKvbjlFq
M5tGxb/SBg43BlHxr6GEyIqOZ4Pki8LpeDZ9lVkzHc8y6+d+72leTcW/GSW2
WpJU/MvcyxBIqHfboXq0ANWjkwf0OtD6tRGWNSXM77OyAn4tm+2eM4d97vGu
STtGVwrgfpdheP8i9vmS8quke7twPqR9keRJQPXxP6g+fhyrj+N66E7/uJ4Z
euKZPovoPIaG8ZCR3DyGTN3t3LiZItjieXsHt5/l+tUEdzqPlL02TIWbx4Os
a09m9BWC5/GSCv+T1cT7WFVeapeN39YEelrzvWW8quF6b9PRdH7JTTirT68L
Isg/pxFmeKgKbnYYfp47IR02hl8roPtidkVGX7mokw+OjU9nLDifDGfjrmiI
XjSAYaF0X+V9pZCzX6BsFJQKjlr6omrfepDKfRimZVoMV2+ey/5Qy74Pc94e
6OgyE8KXYesafhqwz1HLeauESLYenniVqWTtZOO+j7t7XHuxqB5e9XR8Fvyb
pTP30vbH7qX9f8rfuJb/r/xPSOHZNXT+R+xX+r/yP3+73z/9vW3fLa2HaYpf
ok5eKIKi5qrhdJ/R3+qfkfMquuc3C7vn9799Hxj6/cWS/8p/vjz7WYqb/8Rx
sAGm+v/KV5uq8orpfPWMELt/5av/+V8sf97detL/4nnU7vK9eL6alD9n1uN5
P1K+sbt8KZ4XmnDY2/6tcxPol8wuzQ6vhrMqJlcXRLHPC8+/dZcPJOUfSPd5
4fmN7vJCpdufvKTx8x51M7Tfc/DzTfNKE9J710HEQNPQGFXWDzGvqdencfUH
50gUZnNw9UZezWU0bl/RJ2rXLA5uH8eDdXcOJrj33l50SgiDrcdM7F9a061f
gfs5JPvc3XmEn4Ok7/Sf983n5g3tryJY8aortMdsPtEeMutxuy3psFrgSul3
2eiwaOWeH+CyoZT2J+skGBZll2KWwAO/unlGA6tz4YRr1dSzq1k+sn/cdtpQ
foc+T3a0rzr7vSgOWuUqWSOC0yF9xAYO54NqyWT5FWE88LJOWusRlgvlDdIZ
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
vB05bB4OiU7ivwz1CxijfgHSnMzu6hpRlq98af7yzvtNufxJ/dG/d+qoGOnz
oMDD7C30Zv1qEn4ejxNJ9UoSzp/kV3QnP6kP/djVAfXJ1wSwNK93wR41Ns56
hubYtGNze8YhHHUHhqMm4cPxOml3/gPpf2UR3nsLhofXu6NvSa93+t5Z9H/m
xBL6oAeelpQVK+bB06jhpvoP2TiOhIsmxa2k+uyZtdLb7Cm/J236fH2FGywO
bX1eevKLj7Wgee9Nf7nAnG7lJ/Wby0WUJ8iNFID7u5wN1l5s/LsTzbdZi823
qUA4YXGj/4sTJsXRJD7FCIesjOGQW/98nkuvf+fks5m7ntTvrPo651eCDR8i
n5eUmW3n3K+n5auQdI0Pw1QMT5pMZvMAvRZol8s95cOfC+cfPjQv6na9hbrZ
GuUIPsz6uEOy/Wdht3KS+sSjj985sNmfDwlvzpWv/9j9vZ8kPC1pHg6JTuIf
j3C8PAzHG6+7TY5eP7GpXy13Hgip33lJQ3j5tl988Ci5sNNyMPvcZ+xbej9O
qx4ix364ptzAfr+k/uuHigPefP8ggDO8IY49LrDvJwnfS8rPkOQn9Y+r7Duk
c6uDB7WPrbetHMfySUXzZ2Sw+TObEW5zAMJtdof/JOFOSfkZEg6WJI8Twpde
w/Clpqe/8un1RxyCbLnrSf3UG4dsSh9yTACW7ZY/HVI5c2sJeEtSHzee//nn
+WJ4UYZOyiOR5Mf70Bl6grWR9B9HHgy+qyZYtJvlQ5oDScLZ3j++MpKON2Vt
B43nxpt70ZwcW2xOziiE9+uH4f1IeEU8v8TQcfxkd/+rhXCJJRgukTSfh1Q/
7Vnl8ZrmX94w6Ct3XiKpX3vPYqU7GYPqQUthwqH9Lux3nXY1PuHNWupcPrR5
tfPcLPBxW7NstnUTOCa/fpB0pBo8DmhZzuTk/fD1//DfvjpC1FgHKoFbgw/x
8rqVE+9/Z+hLzMYU6FbUwZor7Q4ab1g+pHmVJHymRY/PvfeXieD/19qVR+W4
ff9GMlaESDQhykxCvoe4bpQx0jV9aTAXUiENZkkpmTKFlLiGRAOZuylRVKY0
UGl4mzPlXrr8nmet/Xieu9fa67391vffvc573nPOc84+e3/2Pp9t37XxgxQX
ouxVyh6m7GrKPlfL0kicxI3/9gT1LiMk4//lplZIOrf+D2+YG3tL1h/bq4Jc
2yT9v8eya1j0ghGj5rUQ/1ftYlGmoVoVe5rzTHXwNLEfik+Sak/1j3kvf64P
jD8VjZ+aL8XDSdn/lP1JxVup+Cxlh+t9exnO65njTjmnLSV6Juf3UvsunP5U
iFW+tFqiPzF/4899S9ifVDyFir9gnkkKlxPa47iPIMe8l4KcijtT86XWh+Lt
pOx/yi6l4tRUXJvKh6Ti5pQ9P6r3iZ28nbBz+0HTqRI7Ye7ROH1nzv4xOfdk
sKPE/qH4ISm7l4pPUfEsiseSqhdJ8WcuhPeDG9H7QWpe1DpQ/J+Uv0DZw5S9
TdntlP1vN8PRle/fLdI+Udr/u93bq/j29iePJEjbU/yQlJ3s/bxhp8JoGVO/
f6joa564DgZvCjXq5svYq+DMPXHjxH4o+5xqT/VP8W1S86LWgeL/pPwOyk7G
eSCCnPILVnv3tePPtX2KjqWz5Fyv2jjrmgJ37vwPOY2eLDl3OF4pyCm7l4qT
pt17NumHczXLvmJ7wOKGeN6pvBQqPkvFcyleTWpe1Dpgnk9Bjv2On+Mn7F6c
ryLIqXwYyv4PiK4fw9+nlqVvMtZI7tPGZUbeU7n7MT5o4L0xUpyK4JOk7FUq
PkvFNSg+TCp/hooXU/FlirdTmG8imi+1PphHVJBT/gJlr2J7WJ5dTdnn53Li
e3lw9uoIlYg53hJ71cv+04TjnP35YvvXCYM5+zOv/3jvmNg6Zvp0V3zi4RLm
0s5tif8gsX9LjXzb67Hl7INNmqb5sGekXF4/+H+pcV7f03t/0OEq5nM70MPe
I489zLNe8liCnw/QjdxcWV7H0tw9L3fTk7GHubmrzuuWs4zZZa9it2SygRYH
VAa7J5NyoZ+P52/l8Dh84NS9RTwOT9UJovjP5eHA/YCvJgf4aii+90fd1x3n
41+D9Y/eG9r1GfO+YLWBj3/5nxynOKt7NSvK9B0RlJXPZsypHKlt9oCUU/WM
qPo7FA/Jzp671fn4ZrXGTS0+vvnA/PHfjZL4JvV+hKrjI6+OQwSq44DzwCm8
hXpfTPEhy8tXpHAAqg5Cc/1u7FcqrpxWOX5gJdM4n6gyJO0l27v099jSXink
/hTkFL8uPhfyzhHen4Ic5zlQ/HLC+NWJ8VNxRoqfJGn6ou4dg8vYy+86+a7+
4j11SGGtftcF5Sxh0JOxisPE+/eNT6h3dIs6lr3t7qmW38TvguNoVJxOaL9k
18g/NJ3rmWrhyXZ/z6ok44lCe8yTL+9dQ4O+2z2e99v98cyuUt5viiefisNS
/PaU/U/Z+Xa7753h+cyjY74mSfnMKZ5/iq8+ZVv4Sr5ej0pIqK20Xk9qu7nD
/6qUsbaWapr3akS7neK31/hN81oCt1+7Hg0Jd9gjjpPiTc3N2RnoMIjzK9V3
bn2RJLan+PCv7NqqJPtewdzbR8yV1iH6VNMwsit3DlusvnqqYZIoF+quFqG6
qxTPfGp04JTEP2XMOvJ7F8eu8uu9UnKKl2Mm1M/90fTP+rkUj/2l09u0+fpc
mrZ/6Enrc0XmOxy46VzO3rjv+dBrqniONPaq9+brf73I8/j7vaT+18D01hF2
wVXspZlyxwDZ/59HgnpXSOWZU/uTqqdA7dsZVn1T+Pma9RuyrbdkvlS9hoLh
2dn8fE1rzp+RzvdxnVFUzz4VzGNjD+Mrh5/LlVPnneI9pvQANR6qPTXf/9W5
aO75pc7p/0qfUOeCquNAnZc9RuNN+f4VP2z9fFfSP9X+lnLeIH59lHr23yFd
n+j/XHodkyJjGjNiOuZvkvD5QL1pU1RvmtIDVD9UfQ1Kb1B6rLl1NKj5Uu2p
9aTqXzRX/1D1nan4IxVnpOp6NFd/4vxwyp4X2mP7agnyC9qDXyDPDm9ungBl
XzU3j4vCVbDdLsgp+003Nva+5rEaFvz0qoVBkHhfHIzSLhnqUs1k/ts0e6WI
/aflv/PtYVDNoqIHWHrNFOU35068pjC3lFkMabU/11zEGYqWRu99s6uMmTqN
6p05X5xvbM/xqp9yyljt4R2rbu0T16ftUT8lO8bZy9vPZUxrFPdP92lbDdVL
ypn/5LL3+1PF89LCQ23Frfhypv44vmDRWPn1fajz6Jl21UK/kdOrGuaX17WW
r28pfRKzKGJ4YLGMDUhPGjbmmfw6QZT+rJraaPD+u4zNKun/3MJUlLuvj3Pk
57u3IDBdOt8Nx02aZnPr9udBvxvSdQs/H/iK/44bugQqSr9jSkLtVf67f3a0
7y397ka+58fW9athCztXn1j4TtxvgajeBK6XoYTqZQj8flWI34+qm3DimL6t
p1MNW7LsW9f1o0rkrhv1XajvHhY+d0GYWTVr52KeuXGtuA6UHlu15cKHjXfK
WIjuieu3bLPYgjH2oaGBNUy7OrDX1v1vmXtamoujoqgHUr9/navqIWOORpn7
owJy2fyMc5EbE8tZrtJHL03u9yGOZgY66aK/syPA1GvykVp25u8H+8bXl7Lg
+boFht61zHzzl+ompWJ2zXSJQtSOVLIenNCP8TzLrPrNMnZM5/LxG5dzmZLO
/e1qNty+GRE1pMn9OQt9cX2j2zlR73nMtjjiNaOWDci7MX8Nk8/f+8Ba23bx
yVL269fWfRol/PAV79sHxM6uYbHjV3roGInfy2F1RWmodQ0z+3wiIF1LEg99
ek/lETdOL8+I/r9y4+yxLdnuvzq1zLFOpc5zexE7WOqsNnJ6qty6b7gfef9L
jTMV5jUZzWvDKM9Wutx321Vjuz1QUnfA2eZs6OcxVSz5Zdd4ow/i+eo84dVs
rWFV7PCsZxmjnoty5fFsZCQ3TuvsQ3eeX8qVK6f6of6XGqdx3+d3+boVZfMM
Pp+Q1K14d3bMMb6+hlHvBX7S+hoPtdNSD3aXsdt3Vmwv8RXlDQm3XXy5ceqZ
7pnmIBknJaf6of6XGmdelyGefD2UCY8bnGMk9VA21SaM6KJazt4ZK1kE9BXt
gTf9LCLsufE07vQrqr8ojqfV2Yy0z7NqmIqW2ogfBiVy21P9Oyi+OMPXkdnp
cWqSgqSODDXOxAc6Hfn9Vvd+zv1ukv2WMHCDJq8/B0Tv28TrT8fXP/bFbqhn
ee1XBlUfe8dGDK7IcA4X9efj8KSXQ7hxZhSvW+sjGed3ddbNuqCW7ZnS1G/6
fvGcPoL2D6G9A/Sfi/r36eKT2YXT23Z+9764cHrbatWwIKnexuP8uW+jV60q
PljL5odGfa0sL2XvLk9x2cfpw1/esj5+nD70LlbIcOD04YqFfymV+dWw324Z
tZzn9pa1dY285PhV1FdxHUa2aceNc7/FMqU2knll2Y3P29Gnnrn5uw2wuSPm
e1yF9qHQfjn0b4f6F8YzEY0Hj38ejF+Qn4f372fg/ftRgyMOEVfL2YZsjefL
JmaxrLa+Ta6pot72HpjqwPNEPawM+U3KE4Xlrxd3v8Hzgy39dUF8zLbnTEXT
XTHowh/s4UBN80K9WlZkqK4btaeIVf3l0W+crTjOuBPdQv52qWXtE4MHsx2l
pJ6k2svr/86Fm+b8Pet/Q+WDp+SeLfXo0JG/r3fq+aRsl9zXanCOlNE5wu3j
jcMaC7j/Xd7bPS2S+9+Zr6e3kP5voczHlx9n4r41LfhxCvLkQBOX04W1LKlj
+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
ofITqPWk8g1wPsD/AVP+dWQ=
               "], VertexNormals -> CompressedData["
1:eJyEvHlcTmvUN545DaRBhpSQIZUUidSKEIqESGkQISFJMkURJRmLZKiUJpJI
ZUhX8zzP8zzft4yV2W+vbXuefvu89/uef3zOOsva32vtNXzX2td9ZK3sNloP
5ePjCxbl4xtG/Zn/y8rOJroYbG+cfuChziEjf+oXyQXUwUUBL7XckibCEZ91
K2tWJzF7vqoY5Vv3PHgpF8Ale56KWmoseKgly1n8HeVin49LZFP6QwzOS+fM
6oTKMIl6lO87x3f8IGW/785Asbs6ByrckrNQfiTHSpZ6Hnxw3r1yP/XfO9d/
6Uf5tFPPlLOpvy/8cd6WHMqepHckF+XV70i6XMDSxL9/csnfP+vAudBahdIn
FedKN6N+Uq5pD/1cQbGpeB735w900f67i9donKO26BpTeIhtrWwF4jn1cFo+
ylVl++Qo/CA1u1YC8ac0WJSg/OHf88KlqL/n7e7+e96nT95KU/6BXvHHQegf
v7GkCeV9je4plD/J7YPdt/D5Gw8o0DjdA9P0moIKIETDeo6WC4cI9VWO8eqh
7Bx7/OBBXz15b9+qVCvcRcZ4XHX3eFMP37YtvCX2kEMuSm1f75IaquU60Xtp
nEwTBGy67Hmf0u86+MajTrgLuMJndFH/XvmSRd1of/YQV00XDnx6f18F7bsv
shso/NINPr8Wl795UgqFl+4oaFQ2QsICDXPnne1wTDlNdqFsC+my2RouWdXA
08/5m89YUfqkOKJKGvVvhFgEo37hQGAfZZ9cH1dXifbtl9Qro/0pXW8/dwUV
EPXbT90Qj1vjKTXEY7LCOILCD7Hrcl0Rv1UwRwvxbzahzwtPJ/89b+eEv+f1
Ej3pQPkHHjzUW4z+KYjY74P6K90cGih/klctu2TRn9EqB0eifdfJpm7PkrMh
2+jF/KhEDnG4/zZcRaEexOz3O8RXVZOcLoX27x1dRLh6ZHF3ZgNI1XllyS3q
IRqyXttNuyK0Al8LFOVvawGRqX8iYij9lSY/hX52dIG/YvYy1A8f+nr6K8q+
d11m5JNEDjwJf/YZ7Z+cL7rhi0oX/MnSrxk6vAKim70/PChshsyKTS7blFpB
9saNI/fOtpKHCbcMH99u4unniNANbpQ+ETXQP4z6jnZhBqjvP2ndeso+KbVy
qEP7pZsMP6H9ne2r3r1MziZzzix7inj4OvX6Ec+lJ6MzKfww185jFOL3fS2o
gfgv/T0vmE39e95hzHkjXeVWU/6Bzknr3qF/6qREa1F/RZv1H8qf5JKzlAL6
841EXRDarz7S4VCanAZRF/bPH/GZQ7TCFFU0dtaDuP1sqa8G5UQuxflp3qNu
0rPdMarvVSNoDnMNnCzRRa5YznjXRZ5oaQglbD8m2g693afyv1D6Cjl7gvMf
dYNIU2vxF0o/2okTXU3ZnzQ7P2f4Zw78GOPtj/Ylb18os3rVDpNjXyw8+6IK
di+UDQ7+2QrfHupmf7VvgjuGp1LTutrIiUl3R2/JbubpZ8l5ygWUPrn7USsZ
9b23x4xCfSjcUULZJ7bqOYvQ/vGyoodo34JYnqPwkLppjnmIZ3fthkDEcz3p
bQeFH3rj7gUg/utXVfMRf9bf80Kkxd/z3hX8e94Ud/OBAUp/+L7hseifs9/W
xKJ/Avt+11L+JAp2wYroz6hoFSW07yc8M/TXBgKn+jf3XJTiEi2FM20tV+rh
6H3TL3w7i8hM7a+lSzf0EJ+j9pzFOk0gWBa5cXVpG1nro3Pbe+YzLXmB6bfL
9Logza1C97dVEUl5l3Jbc0MPyEUd3Yb65R2SiqMMCTw+uuIeZR8E9L/atlL2
swMe7Z22tAU4n+AthNbCocm9Tw+Yd4DDjDLVvCU1UHDQNPKpRgcxLDv9Nai7
hfGzwn/83KGZuojSJ1kTnz5G/RlLuQOo35sUsZuyT/LbYxPRvm2w1DO0P+v6
0PaRhoR4TdG+j3hWdvAdQDzblH6bUvjhRbjzLcTvZzfWGPE//nte6Pb+e94H
o/+eN1p6agXlH1g727IS/dO02esd6qsVFC//vYGQb0NUutCfQ0W1W9CfnluP
6g0feAH7FnbMfLiESwo03724GFUPpfNvJYkszyDKUzfNMivoIZYvC9UUrzdB
1I80w7dJjeS60/ovRfditLboLu4MyeKA1slpP4Uo/SH2jumUPuweeOeuQOmn
H6+OF6DsbxXczglewoXPZhXrPSn7WaHyE2Vra6Dp6f195z0b4F7fDLONsV3w
0Wmsr7ZZCcx3maGxd1sncTj77ODTulaefl6n0X6f0ifibduXoP7kuFG0fmr1
FAnKPvGN9LNF++tKPtD2f09950HhISLLsmk8h1XWGCCeU2EdE4SXZ8CNDss0
xC88RofG3/uTPi8YMuf9uerveYOmRd2i/ANSv9pno39EXmQtQv88nxofR/mT
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
bL+z7/dxaJf3jM0Efpvx2EMUzk9yD++/5wfTz0/piEc18PPq5fnsYC8fD1k2
gb38WbPcEfj8ixnepL1IKZh8Anu5rht5H/IL/P4tZH4h4Wp0GeQX/nj/eQb5
CNYnP9mhXeJaZCm08z6+bAb5l/Cji5aCHd1YeorvHzvCdDu6IZcFfgM1BCuS
fkNa7LYt2LuEYoA45KH0Pudkgt8YFnt2DOx9TrDD71bPMpzJI0Tm10IfcFhD
Ho0zM5m5zbMMuTx7sg/aLVZqknk3yp9guj/hi/YDf4IFs1lJf6LwUPkSyA+R
cr4B71BEuDfsg3coZ6Wjp+EdSrLUzjNw79+QyFoH936PsWY43PsaO7zZuypL
8I/7A27wziXrDV8wvHMJYWXrtEosQcfCe0LhHY3WMv/N8I5Gv6M0CN7jKKUm
BMN7HNOV6R7wHierWsMBcKaAj48V4MywtIdqgDMXjKIgeO+jtuyuK7z34ZiO
WAPvfZ5xXWozX1WATFamr4T3ROy6km0gZ9gxUhbeJTn6fPKEd0kd3AGa8C5p
9IVyPsQ7T9VuZkK8c53nyQKIdxJVjhfBu6eRsVZ3ePfk6RpCvlfd6/ZjB7yr
at5jKQjvqmy2TJWBHN2GndMu8P5U+nAjvM96bRfMD++zLgtWboU4uuyyNhlH
H6289Rvi6JqJgS54/yVtZUG+/3INUiLff1XutQyC92Ws2qV34X3Z4jusySCH
ko/o8g2u35AEnpnDzi8K5LMdvT36j3xEl0/pAf0fPWTNK4C8ho6wzGfQw4Jy
44WgB3nfTQXwbndnpgf5/ou1x5V8//X9xp3t8C74xrj4etBD9XmXEpBzieV+
MLwv9k46Qu7jfaHq+6D/tV+XO0J+LbaHWCCxjy8j5dT/2Uc0wz5i+j62xJjZ
wfvrz+/TlOAcSickMJn/7znE9HMoe8CDgziHyEJMgjyHl3w4Q/45h5h+Dt2l
fMYBD2gdPUPiwP0h/XcAD7wONY7MCi/FxpW6rqMXiPPcvcJFjKkJrVpRYQu4
bmClFIlbRJavuwT9uao62lPDS9HrPEmJ3xcI3H5kngH0X5fs4wW49Jnnhv2A
S+VZt9wCXKpyLzx6qqEAf/uY+svqNQOb39BHH/Y2/cXPiI6faxP1Vo02FKCN
Dcfsr75mIGUNpd+JRH/J38mPIA7a+uTRT4iDtNjk30McZOf0/EJfbzY2r2C0
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
ETd0UuFKUFio7b1WUF4pU/1gTA0MSDC4GTHNDl4lzfXi8JBhVnnCiOcQT++B
CtN7bkzvDWB6QFDAyuOf73+95Ok9SGF6bzzTe6nsfS5+vfeCp/fIr088vXeQ
6b0DrC5XjNXlSrK6XG5/+f8v/7CQ9U8bxPqn1bD+aR95eg8S+fTeHJ7egx69
p8v03nqe3iM9es+L6b0HTM8LCohTPX+X6b1ont4jukzv1TK9N7YXP/DC5KDn
cxIKQN8vuTD2Tgu8jNLfJWbOrX+e3Yc8Prs/itlBIYHJu/5Zx1s5zzQM7ebb
8mNiaDcz7B4sQnhH1qfiBp/dt+bZfTKCz+6PZ3W8gayON4TV8XJ8vsDZ/f/s
i9/PeP3KQli/MmvWr+wuz+7DU2b3S5jdP8Oz+6DM7H5fZvdnv7LKQr/lRWef
/kh/3ICOeUj/5f/zcwYb4nz7svkm8Ow+qWV2v4bZfQWe3QcnZvfjmd03Csqt
7tjXSvYnHB058O0bkFD7pZVRXQm+f29NurmoCjbFrcoKiG6C6dbONm/sKmD6
sKFEZHcrGfZgx1JVoQLSPy0sLqKkEk7ObU98v68V/kK1sOjbN2TGynW7EY9o
8puLhsYtpOvd8SurtxYSlxFHA+7eqIYxcWYuu7nxgUWPKtdvLQSbqQF2OK6X
VhaP79FHj5olgv1v13e834X9Zoe6/nr33qccRhlfc3Tn1tPmBxcnSC6uhKPa
v2OS97dAQPUMiR/zCknc8Etfz/pUw8w9CmcEksrJzH3tE7MXNxM/y5HXl82q
BA0n4zgOnjxb1U8M4dd39P+C8A5v6zM5/GTYwltXEH/ClhuTEL/OtWI3jk5w
35lYinRKWrcdRzrXLs9y4OYFrf22uOK8JFyKg3B82VfjjuFPa8i216+HKLTU
keDwnR/MomogMXnpu9K7jWTFzp9JemYl4JFYUSm+pQ6myiX/5vwr+G5ivxj9
q+Z5JgLoX9X+jcA+6jB/6Xwp7KPesXUi7aPeX4XWl5IzrL50GasvHXDu3bWj
fo1Ef1LZK6s7JWTrnIYvV1bVQY1A3YGpljVEd3b3GOzz0FUSLI19Hq4meK+V
eVoDlZnSPxVb6qBJz8cY6fQNPCL47m4jqF1ZXbLcrIQ4x8jpSXB0/qm4v/hC
TD0pW3hRPkO/lBzS3dax6G09LD10ROw8N1631kA7R78UxGQnL8Px+b8DCnH/
XkxTLcD9q6WttwP37/Amnl8XwvTbYKbfJmlO/pn/sB6aze72D5hXShZPWnl9
enM9hA1LH+zXVkAET0a+l85tIVl6O5bIyFRDa83vXxw8qe0o6ovwRacGuyL8
S92X6dx3ycFhekX43QVKcTvxuxmLQgdxdIKl39k5SGe5keoSpNPDMlWHmxf8
TRBTxHmZPin9iONHvL4H3jEuIrEB6kbYR133+Uhf7KOeLuZp/3tXJTmj/fPp
/fZysLf43jJJrRn+PElO5vwxcL246Sb6Y1028tQf+10kj/3b4Y7WrsXYv13r
gCTt327L957sCfauir5hxiKpM5XE7fmByQKyFaS8uG7zG0lOf3pM2DJUpYg4
vbu7HvtRhJ4uE8N+FL5OarJ+xkWgNXH6J+wn77p85znsJy9/fVDNn12VsPno
fCX/9nLiFXpaQZOjc+Wy0AU3FpSQ6rxPR+8EVZKrw45/eufaAp0Th2i5ceMb
c5aPCA6qhEOB0mZl3PgleJOCdrClz2hqBxemtFShHdThewf2IPMD8y/X6W/5
WgyOP83ntvpWkp3NqT8n3W+BhZ9OGXDjZNCo8jk4/uqlAR2Pr7BHO0tuZt2g
+I1hBrWzYZ9EFnL0gOHnFhmkxz+x1QTpcdkSM4ejHwaXXz2G9Lu8yf6M9Od6
6VuPMQ8lESfNeHV3UWtp3d0+R4k1O1ojyIi6io0b11SDsG/z6AEH2mCUd647
54+B9o8I6o/1ueBF/TG/CgfsOwEpcsW074R7QQntO1HwYNeluz5R5In1m+Mj
N1aTM9eHrJXf1wbGNZ0T1bcGk7+PftM+GHOiD9M+GO1Gf8plzUNh7e1EWt94
I7QvrW+UfrJkxa7WCMiO0P+6bk01CXo8VE6co6elqmY9jgdPX0THnQyE6fjU
pJFIP9j9zqL0H1n9hdL/1YvST3QY/X/P8+h3Z/6eDPP35jB/r7Gg70Wkf7Jd
IaVfzWoopd+XNy/IYvM6wua1geevwg3mr35k/qrxvoqNyM/LsUmUnjVeDZSe
9YmrcV6ks1WP0j/BUobSX85bV3COrStjtq6u1zjhuiLlNdOp3PvmvqTratGU
ydiPggh2BbSsi9cC7Yps2o/im5sTrh84r+xL188ux/10/WTmN/8uuPkaIsGJ
vkfwy+4XfY/g7kf5gpnducT+kv5krMdLdye1WI93dlM1rh+iIPfKGtePeucf
un7+3NnbivvFsHWtIu4X+anKY3C/HLl1Afc7OLfOisf9Ln6lhe73VQLNuN9J
3XN1ut99HLfS/f6pfNsC3L97oVAT9+/kmLlbcP/qWj2MrH2ZRSzeRwcleLSS
EXtG5udy/kDMD0/c7/B3lzKFr9iSQPe7T7pMKOqTIWYT6fmu3VtEBfG/dmp2
RP2jeTYzFukJ7S/UjPQs3lBQzdFPuv3GKiP9chf16H5/5rwS9TOU7VwEqPci
+g2i+rm79nQR1ZOrvN+gnkzL6aD6ucgoWQT1rVHbtI+ob0dOOkj1rYXE5N+o
nxt3nuyD+jZ68mKqb2M6VhevrKwkCyLiv+F7Bw9v3P0rtL4WrvD0KpnwjKdX
TZhevacq0x/tS/7BT/loX1xfrFmJ9iWNZx9hHLOP3sw+ysQkdWH8ITKoeRHa
x3mHv1P7mMX8Nxfmvz1h/pvJvNVX0Q42xt7PQTt4r0b1G9rBFTNafxlVF5Ps
x7mVa7a1EJuLg55f8KuC7rPUbsIZZjc3M7u5d4FcG9rlc5Pzl+J3PZObadxj
5tsNVWjHk4dci0c6F3hbv0M6u0bZo90k30r7U7tZ+FeJ2s1WsVN7LSLr4ZLw
iu7gM7WksHFOFvozLyT3of8DITNeU/8n25Ln//gvsy1DP0St5cpF9EO8l2eO
Rz/kYswp7F9BBF8r7Mf+FdNvZtP+FV+zso+jn/PMwlQd/ZyaNfae6OeUCT1D
Pwf+Tr8vgn5OUZg29XPaLvuEdcfVw9gful3YZ8PtlUQ09tlI/NaYjn6Xva2J
IPpdLbG3NyKddgny59F/2/Dx41X0c9aJDQlGOovVF6egv3dxt14f9Pd2Xgo2
QH/vyqfv6E/CtbE6I9CfFGhUnYfj9jx/kuxm/uQ05k+Oc/BIRH/SUSBqBfqT
bVYjE9Cf5HaF1rJJVeRR5Z67s582EU/PFZklFytg45YXSRw8SO8JXobwVyNX
Uf/zRZDVCPRXXw9yyUX8irVj7BH/o0VS9ejfzrk5ZyjSkxbuPR3pMf+Yiv4q
CSgdJor0b3RVoP7qpWleol9bN5OhN1tExDzayQCJw3P2p5VDQmB0n6y5VSTw
j7igQWoT54eolWnuqIBLotntVuebiWOHt8Hse+/IznWnjXZaVkKsz1NHg81N
pCXfd6GeWQXJWnvz6fKpnN+SIhh8hIM/OSFJUPveO8g95DMf4YXEt6pu4uCH
n8vop29WAaPkLl1C+Av1u9enyOWBd6PTYX2TNqg507nN+g3nB1+Xet9fqA76
2MV4VvZtgPdvLe0jn1ZAkbaU5YmAGvi4Weh9dTY3npJ07Woh5wesNprL8RN8
qiooP+NnnchAfmYezno3zqsNjoXYaOw1SCNtW5Lf27RWQpCHf41/SisMuNyy
7cu3dGIccDvrVHI1yzv8N86p7TtoKcaBH8dNHYHx3oyZD1ZgvNdl+TfET84Z
yVH8emc1KP764FLET8rvnKH4d/msoPi/TIo+rte4GV4kpIly/Ac4Pm8u8v+H
5KJGbr4ktdPMB+ebcXvkBZyvWme1CTdfsla6vhPnWymrdQPnK6Es2ZU+twrc
RZcYbk5tAsmcZWEoLydt54cc/+Fc/7If8zj+1/vnz0T+lyy0msTxH74XCP/Z
wPH/ZGasA/Jf0WZAIydfOKl7aA/Ktx85cBjhDwauOs3JF2qtF65G+U5dcJQg
fB0vXk3449VPVbVPfnbaCisHrRsmyq0rw4o/xw5w8xrG4tiv2Hl2IDvPZm4X
ubToUwNJkIhauX9NFcl5r3Wtcl4NFH4vP7jAdSs0aDoO5fBAoHMfimf8u2FD
F3Lw3So/5SzWVEFL2MA5CO9fdXSh5Gju3HnXz6nBtRHML3o/02irgvdSOsc4
vQG/JvSZhHpjYfNLd9QbDU5qk6vDW8DpQ8HYPVkvyFd1y0NTp9fCAxbHlmRx
7KMsji2dbYXw5NaYHRR+uZgUhVdSH9At57qVdNtdpXSq2IhSOuPEa+Zy9JBd
xXNdkB5L5+gUpMeZxbcnsvj2TRbfNjhzZSQ3L1CXeDkM59X61Wk6zutzOSmb
67yVHHRbSPkZN/oTxV++cP0Zjm+wpf7YRuTb6wu+7gj/Ju6Bzfb84+SlQSGN
Vz+GvjRePUJ4SD7mTd5IX6R5pdKyYTsxbzLKzlp99px6kuzr/1UptJpcOtft
emtrLTTuWnNaVr2WPPYcnLQwqoa4rrCI8LSvA/vynKCZHPy272N3jw+thv2b
SsQRfoC/69eRHPwmrXzFJdz5auzf0V89OHhpXr4J+PNNZ4+Zrl33rhxePF11
SntdE8z5vqjLy64abi05ZzBLheOPzcY39v2bIcIvIXTQn2r4kbyqi7Nr4GFX
UYF2TUliaAbatfEy5y+q6TZDyOJUz4j6TCIptLRAsZ6zazEfjs+zboTskr+R
5bNekcuHgyedTW7odV8r8fJW5A7LW91neavj9SmInyx/YEHxCxv3ofgzJ446
weEnXx+9ovgPutpT/AqucepX845DusJNml84Y+ZB8wuNQq4LuPkS/cfbz+B8
JdYc/IvzHRyycQU3X7Lt691CnO9tsvUhzrffi2MHMX/nvmlDAebFzj5PvYF5
sYOnzz7i+A9X/Ky2I//tvF6KIP9fuJl2cfyHk10BY5D/puv9O5H/UqkmSpx8
4XDggF8oX6sh5R4I73778zFOvrBhRWcKyveMd0QMytd9bIb1YZstYKIupynM
rbdy4wsCx7j1doDVEdnx5YWPsTzIOL544Dt3/csSp6uI3b7OMwFPOX/AOzbG
yq8eMj4fCde23QLhDaGTOfxw+lh0tzWH37lY3nkABy+Rf7c08GktdB00iT/C
wb9j+ZEwvjihQoiay1HFItihmue5PaQZ5sZ73Z19qAY0J1wW5fw6+KUT+QH9
upRwgaXo1+2cOz7ASLYeJr2d+TI4Pod8lQfpTSlNPfnl/6wHFick2SxOaMri
hE4NLxEPsan0zkI8G8NThiGeoxIbR6nYbiEtu8LpvPpsf0rn1eXCy6dcZXHF
JSyuOPPx0gsc/cSwarYX0v/xlFcA0r+V5Vmi+OKNXfP6enP8gXTjSSXIn5mW
MbHInxlVX97522whjTuGUnllx56i8rJrSz7O8R+ODxl+HvnvJzw5Hvl/xtDy
2934UuKscbtOO6KOZC5+KLfgSQMMGJIllqBUQOx8puf7Xqgnlz80tyvfagTR
qMcL/Tl4zRu+4+dH1EHyyu9lOhx8X1nFyjgOfvHqqL9+F+qhXiV7vxIHf2Vk
lUrrqzzQftz5bsmMFjhhO2dFRUENpLUP+X5jfyb0cV+mIcCdZ34oaNlVKNSC
1RMlPC9A/s+P9Lxg9jszD88Lc94a5hdx++C3mKnwVc08Ej7fKndgTQtYr7T9
paNQBqpHvmxJsswnAof7rUmpbutVjld49QDEidUDCLF6gPiB9xE/kWnQo/jv
DFpJ8a/Xmfybw09clpZT/JfyK1cj/v7bb31aW3Uc9FSDaX4q+Wk5zU/l2jbL
cfMlj+vFK3C+yYlCK3G+q946tHDzJeEKBXS+Dsa+dL7zVV+u4fgJ3/ULlZGf
KTHdb5GfK0Mymzh+wsCB4X+Qn6mOD42Rn80qokbf7WNhtqvJl+w+7aQ74WbI
9+2V4FPZv5mTIzRnJzWgHAdL9xuDcnRJS++O5/C8yTn+BuX4/veq9yjH6gtV
v0WjM8jTO1/3uSo2kCKp01eFdJvAsPOzrDA3ftmr/JSbYgOcffyiSIAbNxkt
2pwdnAhSz1ZtjvjcAkX1rd8w7uo16Gx96r080Gqa/rPqyBtSr7ZcZqldB4Sx
vFU7y1sls7wVgyf88KmnCwo5/ER26UWKf/Hyod8Rf7H/tAkcPVCsaEnpqdHX
o/RYuyi3c/SDrvxRI6S/y1b8GtIvtCnqwWjhcHLvNTkxwKaBaK/TXCAW2AQy
woU4DucVfOm4q40eHZ8tGhcqx8GvdR/hKG7TAFcUzpiJcuPLnpbgOMxu+nYB
xyt0/em4YJ6a49GaAGgdPa3pyahWmBAuaSFtXQvvXtNxwj8+KfeV76E3MZAt
e1w1TqSAXBP88EbJ7D137qfjpGfchY1P4hvngwd+eJVTKifwuy4Jc+h3DbbJ
0O8K8MaBf1zo8/sonNdYJQk637RDR+i8hgYMjEY+DLBppfMd5nmdjr/Mfe6H
fBvskkv5ttd1PuVb5akGHCedtaF0PC52Fx3f/3BOF8plc7ATXVezPUvpuqqT
WSOHclzof4QnxyljilGOc48fw3VFdE+OonK/pjaJyv0q3zppZOvkKt966xl3
L5tfhOtTT3gjxdPtYkDxbMy4huuHXJ0gQr8LpSF0/XTHnMH1Q1rGidP1s6t7
H10/Oj/Hi3N6DyQ/B+XhfinX0e/A/WL0+B7qSQhI1ad68lh+FdWTyS4GqPcg
Pc+C6j3FEgET3Kd2f7cswn1dOviFCu7rUM2L73BfW/DqLck3Vm85jNVbmp5r
/4b6YeorM6ofZjQMpPrhvqXgeNQnAtU5VH+C6D6qPzfEX0a9R9YF7qd6STpS
huq9GTw9Sf4wPRnJ9OTkR4B6DBKO61F4f8lOqsdieXoPRjC9F8D03vcDO1Ff
Qe3mr5SeNNVDlJ7mNwPkUZ8fGtZSjvRcWKFO9Zuw/F/UV8TZxYTqK8GZtVRf
RR85qof2wie/Swn58PCWSyny4UXoOAG0L8bj2ql9mb8qnuqlM2pzUI+Rv7us
qR4jd2ZSPaadNO5AKqdvDUeH0Pz+zCIHmt8/yvKPyszfcGf+xtj7UlfQ3q00
HU79Dd0B02LR3i14vssJ7eaIbNsytJuOAh1P0W7G9v9QtYrDr9Z3PdXnmn6G
DYi/kOUl+f2NLJaX7GB5SUuWl8y/Puga2vFFKRE30Y7L7nh8B+142o+F1E8Q
erw/A/2EGXU7qb8hf2prEto7q3NA7Z3slVxq70pZvlKM5StrWb7yw91G6rcs
j371AvF4WNVSf6Pxptp59H90j8l643fzFR5T/2d97OvPnJ0ivo1L6LzcJA3o
vAxYHpPfrwifuMQL/a48Q5G3yJ8UwTnUr0jrOnUC/TddaXBAfkodC6P+Q8Ft
6z2cf0hOffiDfg5pDxUSRH9jgct9uV1RBRDd+JvWn2fsrjHBOupu5+t4jgCf
F2cT0c+sPvSYniNsSqfiuQNGV6h+Q790y7pseu5QHDrsG/qx0zqeKNBzxPoH
9BxRJCsRjH6vWYDLLvR7r3gPk0B4v454rEsnRUlffLAO3OrbxzlYB94lPi0W
68a3DNaywLrxGeOP07r0aSlpm9HfvrDRJB/97a1b3MPQ3978MX0d+ueJOzfa
oX+eOFXsD/rnhrxzBMll54gr7ByhzDt3kDB27pBi5w6bLrOTWPce13eaGtax
36ttp3Xsz3nnBfjGzguH2HnBhne+gJXsfCHKzheTfuujPwn8/mSQoudKPB9F
F0QXIP26J6Y9QvqTbNsW4nlqpb7RaaTf9cr0bqT/Oq8envDXw1cKv8fzAjF4
6DCanheCJ3xCPqcnp+D5gnivqNuGfPYvFxFFPj98NcMGz4MLTuyh54U88oWe
Fw7Kq+D5guTXu9HzxaLqYHq+uCe90ZA7h4K6jyuvbqpYFPAcJMXy2tksDjCI
xQFe8OIAkMjiALksDiDcQuu1oKdeS5/Va6nw4gAgOJ4XB2hlcYD7LF7qxpfv
tmX5bkGW745g+e7bvLgB6YkbWLC4QR0vPkCcWXzgG4sPHHF27MZz6OfBkjS+
2i4gnY7nUCH2btcdvne7hvHiBuDL4gYrWNwg5Ao9J5Kec+I5dk6M5cUNoCdu
cJjFDZaz/Hgqy4/Hs/z4Jl7cgExicYM2FjdImGnpvyb/OCkqT6D8LwpUofx/
x4sbkG0sbpDH4gbnJGjchvTEbfayuM0Y3n0c6LmP84Tdx5k69AvG/UCanF6A
caF1x5/TuN+V2hsYJwS11SGbMY7UuHI2jRM26rinH16aAyt37xqP77GuW2P2
Cd9jdVV6jfFAeDDdvw/GA/OHlNN4YAsvfginWPwwj8UPI+Oemw/un0MKVWNB
waMNMo/q7nIVrIACXjyQdLJ44EcWDxzBix+Svix++IHFD2dVJeB9H2IrGmaM
93pCdn6g931YPJCI8cUDM3jxQ3KcxQ87WPxQ7rBGlkt9NkgNzzuM79Iu+z7h
C75LO1tCvx/eJ5p6K3Iv4n93v4beG6rjxQOhksUDd7N44DVe/BAcWPxwHYsf
vh9M40vAH19S5cUDYR2LB1axeOA3XvwQ0lj8MIvFD88P3DAV70PVGh2rwntJ
T978mI9y3Le9GeOB5NKF6l8YD9RMHHAe+X+ZFz8k51n8sJHFD9VGBaScWJpD
TH8ZuOI7v9fcr6jhO7/tshcxTkgk9iqvwvWQYHKXxgnHrS1swLjx2JBTe3E9
OD1VoXHFwPFL9L62bgZLrVAaf3aIMKHxz2LevTDScy/sEbsXdiA13kSpcTNk
jHpF46XS75dQ+N2JOksx3rv5cLIfxntv7PiRjvFe10E0vkr446stF24Y3Gvd
THzHPqXfVTW1peNGahbl6XOrSOKlbBOMo/4c5hmNcVTBHMNFWN9rrqYwCuO9
m80/r8Z4r9X9iZopHJ2PN9tZY7w6oGzYboxXBwnNLsqcWwX9R4wSx/j5w/NF
TYhHitXlLmV1uf6sLjeD1dmO4XsH7SGra21i9S3lrL5lwLqx+lgvrTjKtwTj
QrKHB97CuFDXMNdFWI9t8VvrD9ZjL5m1oh7rsc/w6q7JUVZ3/ZPVXd9VP491
1KCmk/MW44HlnUW0jjqD1ammsXotZVavZc3qTnNY3elaVneqzupFnfniGxGs
/nM5q4OqZnVQpiu34H0Boq1tTO8LXH26jt4XGMmr/wf++v/YD/Owbp/crzSi
dfvuqoH0HkHL/IMyeH+hsXXOAqzDN2taSevwe7svQHj32mAZu9cmw+61OfPu
o/0HvnLs6nF43+1+6g56v8zjloUW+hVu0Xq/d3L21DY6mt4XCxuWY45+Tg6r
v6pk9VdprP5qN6t3UmX1TgKs3ukBq1/il+9SnZND8f6gn5BwI+7TsPdDl+M+
ZXHL/9AZF2A4hdOH0Kz5dAHqw8vyh/egPtTi3SskwexeoTK7V+jZYl56aW4y
cbV6MKNgbTvZMU570pQwbt89sF+oPjyRWMvo/jmxvZ0kH9iv0h1bDm1z2lad
5uADFuS7cPCgGNUyDuF/rhVUkOXgT8QlLLPd3g6RumKDED7UyrjZsLIE7Edv
E/GqbyHDlYzbDw+qgBEDwc0zuAgu2OYvPrOglbgNVWgtsakA880tXzh4ovFp
Qn+En7euswXhJ4m23uLgyZ9zRxchvK7TrWaEF3Quv8fRA3dcNl5FerKGGysg
Pa9rhkZx9MDboMqlSE/84vESSM/4R+Va3HxhuvHYuTjfJRvTpiK8tdjLCRM5
eJN35QIcPJniL6KG8B5T6wtPRj8lG6fta641biePxu1cejGV07d2O25bcOMj
ctPH1xm3wwfpuwo4XnreMurAtgJQG2v7VterldQeqRGfV1YBGlqzE7hxsqPt
cgmOZ7wrEMPxjctlNA9EP4WOv3IqiOeq0LcxiGfW/RuVttz4tb8T2vC7rRnq
y3F8t8meEoE1MeRlRJGYiGU7Ofm21Pvlq3I4pKGn490QQZ53HT7YYNNOMiX2
y6QUlEOG9HT/z6tjiN/Xe/M5eNiULmmK8GZFlv2ucfAilYI+HDy8KlOuSObg
64uS5c7/yIMTuh4ndJtbSdRVfZfGKZUgSdITYoVyYMLaVFl5jTbSJqIzfOmZ
yh54wg/v7nD0OQdPnh1dROFnZEbIIPw9dy/pL6tj4JSunQ7SE27ctB/pyRpc
bMrRA4tvqd1CevTaV5UjPbP7vhHg5gstrh0SOF//fT98ED7unPZFLw5e6/v3
Qzjf8zWdw3G+nvJy+9Z/fkQS52ycY2PP7VOtXKv9ZeVws6L7cWdnBjwzO9y/
mbMj72cFrt2dXgkXtN4mceNkdkBhPxzfqvhFD8d/uEUM2PD5EVwdmjEb8dxa
NY/iOXZH995ebvz8pqPS3Djx/uQUh+PSqr55+7jxXZGWw3C8ZciFWBx34dED
/PS48egh/PSc4dED/PR08ugh/PTk7p+DcgcP+SNU7tfMeXL/6BhZjHxLGSUt
jnxLqq/zQr7t58kd+OWezlsnwL9OTIVj4lGOa2/JyaEcYcBcKkfjwZKyKPcZ
O5/YotyvRW50Rrm3ZRul4zqpI35U7peyHkr/Ax744V/w5E745e7PWyeEf51I
J41HuROJET+o3FfofKJyz1NQwHVCan+pD8T51lsK0XXixtu/wL9/lXn7F/j3
bzFv/xL+/avG27/Av3/X8/Yv4d+/03n7l/Dv3wKeXgV+vbrzzIUy1EthEUo8
PZyhoIl66StPrwK/Xm3l6WHg18OHwpffQD357Iwv1ZOTmlrbUU/GXbjZinrV
ZugoYdSrQxwkP6BePR/61Rf18LTL8xcifP2OvW0If8Js5HfU2+ObWvoi/Own
PlRvZ/P0KuHXq91OVA8Tfj18mKdXCb9ebVj8bR7anbWBPnNwvro/g6Yj/NGa
UtEnH0qIt9GDSWdLWsg9USglkypgXR3190iPvyfD/L3KsxtuKR9IBrMLFo9U
l7ZDrlZRWXduOQhBPdZXgONSU1ovscfhOK2viGs64R55ljvnS70/Un36HdHe
6vdOxbsSFDPclmDdhe6ROf60TqBbmfqNiSeeWEj2qSNbrrWOmv2znnzLePuo
qqQClKQLjseI5EHriGl+f3e3geqwsRbdP8uh7PiVpLAPJZAmkD7rXEkLxEa0
RSL9vjeah3B+Jiyw+079zEfp52h9xfDPJU/kDiSTKHPxfhOWtpNPasLZSH//
XuwLO4dCEF+eegazL1vZ+sxk6/PQrnG3Nirlk0djV47YWdxKblbN3Ke9uRKO
8OqFIJ7VC91n9UIdwr4nHebXw7AVxq1Vp6tJn4eqLiHHa6GxwlXy5vxmYiD1
Kevc3EzYHU62q/+sg6C0qcvXK+WDZVDeKw4/FGTtzpnH4d/K8msHWX7tM8uv
mctPtInNzyNzJj4c/WdEC6xtdc7S+VUDLkucsH4MfgTI0nqwSVP20vqxbRGv
vU1el0JwrFnt+wN1RHjH/HMXmxrgbevMrYI/qsk1syulQwReg5/fS+eu7hbY
dOVOxtP8PDi4PGlE14gWojXtU9h8Dv84Wfe/GhoF5EqUVMbnmfWQPkewz9uq
RjDpRT87MT08i+nhHUwPG09b+1PmTzYYa56OvTeG028ZOvYHIyrhevHm38P3
lMK4Ruudmxqb4NeyB5kyQ2vAv4bmN8ljvvzm6bbn3dk3I8jeV8uXNB1sh1XV
xgq6v8pBfM/QsooZ3PmzTGjAH/sakCsQOXEpsA4KpTKXyptHkhUTIqdvO9BO
ShIu+oZ9L4c1634NwvymufJ0mt9UfJ29GPOb/S82vm6dUQqHrY1nnWttImI2
1x295Wsg9qeLquSfbGIwo3VN4Jg2GNT4NO0AR3/u64cjZPeUkkC9QyM3NjaR
DZ6FRsM5+ptO8vTkSLYOP7J1qMX04Ra23l6y9ZYZ4pJ993YRvI6Z22w3q5Vk
3d4670kAd97ZUfnp9aMayNleuPJCXAOo57RN+vO5Enzf0boO0lPXcZ/VdXRP
TP/wPvEZyd1R+lBHvx0eZdy6N7iyHMZGr4nFOvaGzJIBWN81920yrXt3O1Pr
9Yo7bxp27rkhtbyCOA1UzA+bXw2T5itpxbonkvTFlfdvrGsnDWfcu39y8tUe
8fgc1oH8DFqvhnUgWqW5tA5kurzIJcKdo03jW9y+JTQQv0X6stf7VIFjRVHq
7dtF5Ne43IJTs7h1bpDZEc7NK071WGL+oxrS/VPhsUNcA0n7o34H5xW0Z70H
p2eI9AkJS9QzngEr3qKe+Zk7MwfhF2y7FoTwZxcfuY7wSp/skT/EXdl8FfLH
xWEE5U+190ycF4zc6noT56Ux/kEezktXJs0S59VdHEbn9UO5qQvnVeFa7cjR
Tx643ryB9Pt0zhuJ9LenjvZB/kSkbnVHPCl3DHMRD4tHkVi+OpayF8bdKC8J
+5NLkJ4/fYYqIT2bVho94+gHqwTfcKR/w25rPxx3Dz0iTBbWE6NpUdH7nKph
9O6Z7fXmtbD95YIZuK7qKucMw3X17Yj9HlxXF1idwFgWt/dkcftQ3j4io9g+
+sP2kcnYSpPQRbWgpbe8Y5ZDDblhK/Gszb0OnmZZGeG+iMz+MA33hWOQth/u
CwvfTzN2H24kpwWOaq8ueQlJ4s8lBmU3QPDN9mLcXxdftdD9ZdJ3/EncX60s
v9/w/+r68rCcvu79zHPKkCFS5nkOSbYpofJJZqKizJQ5GcpcmUIDCiFCRGQo
w45mY6EQzWlQoQyflPidtc/9/L6vc73vv/s61372s8/e69zrXmvdC/H9hYjv
d21yVKOVdK+NN0TOpvV8Kf8RQ+tZhLj8FfDn/uDPZ40vp3vE3hr2Fvfo4Pzm
C+n/Hunx506XWql84MPZT6scctjEBIfJl1I+sHneSXfijFP5hLUn/Bs+T2S7
2IB6NqVFbLb54wqyV0/31BD2quRoqrBXpxBX/Y646h3EVT97jrhH83Rbbi3m
0V+fV5fm0UuxSCN7uO62Xguyh4nmO4PJHm5E3ESVp+GD/bfffPoBrbNJ6a4n
tM6H41wsaZ3Na6lbkb39EaMn7O3sqLHC3j5GHOQ94iCrEQfR3XrpBNltg/7t
hN2+9dN2G9ntbMQ16iCukYe4RgniGksQ1/BGXCNwxCM3+l5sfufZlr4XwVOP
x9P3Yi7iF9ew/37Y/0SLcn3a/ytfN4nzditouDhvtZ1KB9N58KnXehidB7tq
JQ3pPDirpSync9V66cGPdK7+dEqIoHOlIb93bo73XoL33hF8dSz46qbgq9/H
zG5A5//AcLfrdP57xKQX0vn/J9mhKX0396ztG0/fzWFDXlnRd9MV/HNuvMw/
Xwf/HN8y0oW+v0tWTSyg72/vh0f20/e3Hvjko+CTN4BPbgI+OVnBJ88GP3wX
/PB98MMzLo17Rvf32bFm5+j+fs7q7kX31ycveDvZjTrn4nzIblx5u1mX7MbJ
C4/IbrDKGb0Pkt1o5/ZO2I34/rFkH7jJzVxjsg9+ZnnCPlwfdekw2b0bNb6v
J7sX/tYnlexeD+fGiwlHual1b0c4yj50ZyjhqNP3d3gTHnNc0mwtPd+0/ejX
9HzQ95+aEi5iec6B9QgX6b2KTyRcdD97qL+Er/ibu1HDCV+1aZIUQfiqd/QJ
mp89XzBPh+afenH8NZrfynWJqYQP+ZLA8KuEDxfW0U+jeVyGNUu6KuE001t+
BoQzh8f65tI8gzsteyx9v/h8zV/i+7XB0s2Qvl+m1q8CyP47LFv2luz/vISw
MrL/nvJ3iiXiO3UZ36n64PfGg987CX5v+Kwd2+j7Mm7zuiO0zyG7FujQPl8c
M9BAsuesebNFQWTP34QFVZE9zwKf0A3+SC78EddrpXb0fezo7HuFftcne+E5
+t1mi788kNbJQq6NeUXr7DbgSTGt0xL19d0VvNMA8A+f4L8cgP/yOeKlF33H
XXq6ltI+NHQaYkz7cBY85EcFT9X16sM+Eg7kToF/nhEOnDemcRLhQNOfFdUM
6qZJ32GD0YX6+TxHf0vFi4OZ7F635Q4SLmUPTh3UIVx6s7bxUsKly7IrCV/x
ZjamAl+16vtS4Cu9UZsrNaXx1fGlkwi3jNZaEUe4ZcKuLoSj2BOL5QJHbbud
p0c46g54yxjwlh3BW/aocSGOcFHZmyADwkX6ge/cCBcldr03XvqOMIvKXgJf
lR7bIr4jS8BzvgTPORE85zXwCbfhv3+F/36029azhOvOV3Y2ofXcWn1O4DqN
b9bdJdzFzjzyErhr+q+b0bT+YRUXgwlP2n5gd+j/3p02dQf93yDwpebgSzPA
l1ZTUyv+b3zmY5OQCml/WJeBJpY0/68/jrE0/90wFzv6XyGVa8T/Wh4/TuDG
Z/vbnaN9Y+tqinVu9+vSgdY52EyN1sOv3Vwj1tP908PttJ5154cfo/dlPKZK
+BHmLUzm0/vq++YCvXe2T3/Uc3rvO173S6T3fhf8Zzb4zwfgPwvKZtWj81C8
/8NIOg8Ojdv9pPMg/a/anf9LPWlIUWvyL/iuIU2f0PzfrXY8oflHgEdVnec/
efJ5bgZ/XHmeY1fuXkF+0IzoUe1o/UuHT1lM6/cD71qM8/wO5/n+y/BTdI/u
pn9/Q/eo4eerX+keJTUNW0P3NKRuB4G7an97+ZvuaYl8H1l73Edf3MfNrNyb
7ElxEv9C92hudAMTukd2sn3jBbBvurBvtp8C60r+L5u8elVfskvPCte/Jrv0
LaHKj/zK2Xc1GNm9SOeycOFXyv4vXw7/9yn834i+7clvZU27XWtD9rDO82bC
b20t20O2DPZwAeyhuu1E8lv5WDVNA5p/rnYj4beuGJ/xXLKTvGb0/KG0noXn
ErNp/HWZ8FvZLYXf+r94aR2zQaO1EpJZg/CjZxb0/8isXs/a2OlY2v/Mvw3v
W95dep6v9V8cRM/PvnTdhZ6PkPltng9+2x38toPJqLKZ6lHco7r1xWuvP/LW
X0Z5X3yQydoHqDfQdY3mQx+mizr3VCMfUef+7nHmP/NLIvjYbos/2EUW8cM3
Px1d1SmDHRh9qE+DyIfc3fxI3PdjRXxAN6PBDpXSvX5QuKJO5Q1+12rxgbWL
ivnCpW1fHC59zzruydkqjbNnd4aK8cWFJUk0XtfizGa/39msZclgl2fluXzg
QbMPC3PTWCsTn5NHpfFxs82HJ5bnMl/tm/do/K2uVgbl7ddI7byI4k0DnVvc
pjjRQQ+TzlbPXvM6mjt/3nlfyF68/R60eYi0b3P0PpfVj+SZtk1LS8cX83N+
Gq8bvnjPxvcY2+Br/Uj2sOb4LzR+y3VECo1fS95cT5qH5fu5/aZ5fqdfuEzz
rJbjVkwZt8pcaXpJWic/xq4MonWuafboGq3Tt6fecul/UZsZd/pfC+OWfKVx
57zKlHjDDL6vW/UGFOfa1nZ7Ia0/U9bV4Te+p5iSvk1X6OrkOa2gOhqeG9e6
OtWhjBjzRtTRrLHb+KvhgSL++drtVXHOUdw4dfDlOvUy2HVZh4epdHiKoMMT
eLbv4UNbClhI5I7h5/zfscPHLyy02p/O9sl6OzwAejvjoLcz+IJn55GHivih
LgYp7ppRrCRYa/6vRhlskKzDw1K/yessgw6Px8/CHKrradLfsTnV0SR9XyLq
aLp/fOEurZM969pJ74VzFPuWtcCX1qnS4THU2yt0eE6hPv0x6hpCFfkMyENg
v+P/rrs/AZ2cF6iXf4l6eZXujZWuPH91zG+FeoH2irj/aOjeuCt0b7QQX/AE
P1kEfjJW1o/is6Ef5Qn9KOPrDah+jdfSG/qC6rxMt5iI+jXeYIH+TqMC3ulr
+rGdufHcske5rW5pDquQ9aOYUj+qQMbJbBNwch/g5GrWXUk/ihu6lldQvDJ9
xZxsilfqtixSW5iZwu+n64o8f5+drWMpv6Kz5376jvCBLiHiOxLnNVV8R0xl
nSi2GjpRxdCJ6ifXr7F81K8NR/3a4k/DDu0wKmAdts4qOpQbz3SdbHVo/Y2g
5zDea/SR/9Tt+Yg8dkfksb9FHvsT6PMUwQ9yhB/0EXo78dDb6QS9nQDEHQaB
X7IBv3QZuhkFh0f/pZ/TcLic730b+d5GyPeOlnXYeHaNc8NIlywEumSvMgKo
rpPf5SvbizroadNEXWdEecT4t78yeVRh3yU9S57z0OErV7/7WMhayzpszB86
bD7QYXOV/UFWDf7gY/iDVpP6Hb+sncy1l0//fL56Pm9SohmfeyiHdY72G0j2
szB4hbCf7xzUhf1M335vJtnbDlmrhb2912KEsLe2sq4a88X6x2D97arKqd6T
dUpxE/WeOoWNRb1n5wWGB9/8ymSDj70sGFbynF2ZMSYoVVp/Q+ileH/ZIvo5
noZeSgnynK8gz/k98pyvQ7fnKHR7ekK35wN0Zlwxz3bMk4M85CfIQy5AHnKd
HFkPMO/Vtb90FC+9fEt1zXx71ThRF1zPt6aoCx44v6JxtQm3+BjLembDF7/g
o3VWnxm27RObJeslMqVeotnFuKB47VA26lr1xT/0PrCTx/at1P6cz1bLOodc
pXM4CzqHAX06tYrtdpN72zUz2af+gukNehrb7vAnNkbWLWTZWKdKt/Bo70Sq
a2adTr4Qdc05+W9FXbPb50v11SbcYmHBzM9k8Qu2sKoGM5TWqdLh8cH+qHR4
ViLv1wJ5vyOR9zsUejvtoLdzHHo7/aGTswo6Of2gk6PSvdmK+VW6N3ORx7sT
ebwmyOMNlfVRWevh2iak82kKnU+jsclU789KNfuIev/uAy+Ken97n7Ntamum
Mv0d0R3LExO5AZ94anlVEbOR9U55X+idxkLvdGfPUqrr579q9hZ1/d8DX4j6
6wfrk1lnl5f8j527zmhD6fs+Y0mvmMd5LF3WNWVZ0DWdDF3Tf2Seh7mB59kK
nidV1inlBUby+mth/b6yDgD3hA6AL3QAHDdlxdTUTOWdzQM+qSUlsiCP3ieX
Sev//3o7r+//pbfTFXmwxsiDNUUebDR0eJR5HQuhq6MBXZ3G0NV5gPxVPeSv
6iN/tQT6Oc/Amy0Db6bSwwlIkdej0sO5hfzSR8gvjUF+aUPo8Z6B/vBV6PGW
yfobrNYYWX9jOfQ3MraZfjZfkce8HvtoGng84rWO+n/sKNklV5+ylaQbvGCs
XS/Kt3y0PuE25Vtes7IjnQ1enDauFtVxd8hyFTobzV5MWxI8JptnvR1YTPzP
LC1vwStWs39MOsPs/nkbB8oX/VkxMJfyReO//0u8Ips+OcGIeCT1h08Er3gc
+slPoCfcEus3nLeD9Df4kssrDKkOfZtFXaG/saPRJ0Np/fx8F9vdJh6P2K0t
F9xp/da7upa80IhiS5yZ0Bkeb7H4IelAJlsFxgc4zWKVut9Fnm1qZYWo62k6
TN/xoeTHtdy4c6Xkx/FngV0+mEh+nKq/5zWv9n/193yKvMpzwCGJwCG60Pm5
Ap2fc9D5yUTeY4wi7xH4hCUDnyQDn6j0eV4eln9Xpc8zB3mJLYFPSoBPRkGf
Zw/wyR3gkx9n5fipEp90hW52xnCT6aSbPQn63oP6dXUnXRr7WA13qtdO9roi
9Ha0bt1/lhb+kV1sGlpxKiiaf+gd1abay0zmLet+c0fofg+D7ne6re3BazPy
ucuFZy5PhqYxvfSWbXUmZLItsr43ewx9b1/oe/f07ZVlffsjG+JaR+9ceTRb
36nolvbzTLYXOuQVRvI6r0DfO7fwOenq8N4P0oSujl2YrKtjdER7orRObvsr
b8vloGgWVyO3Nq3zsKz7zZS638cjRR0oW6GoAz12a+u7dMkPzfcP/iH5obx9
0vtd5IeufbjRjXD1K5s/HQmvllXt9yO8anSnWRcJD7Pw2XdfER7+2GqTLeHh
oQa+nhKu5moNH44iXL3Ss/sywtVdR7eoJNz7euDtdYTPU/q7hdI8p02CaJ95
3+IpVbTP1/aFiX22yH5oRuOhXX660P+K8SyrS+M9Ubf7rcvf+bop8v6zk9h/
Hez/nwHPxT7r7D6tS/ts1bbsJu3zFuDnUuDnUODnSiM9ep5nzLdvT8+335Ij
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
/d5u0O89Bv3eA/Ob1LVIT+e9MzJ7nRj0gTfu2+5WjcnZrHJ3t2jSjZ9gfqOC
dOOP3Q+uRuOrsuKuzqmRwQ54Dew3RP8De2c4bU/5mGxm0MFn3uGm+ezBW9vF
1ftO4yfmb75g2SOPlaf3+KRW8ZAPiNNze/JvEf+sY/8y9Xga8TMdO/+Xvm9h
G51oHj4yeKAZzaM93l/Mc85vSZD0u7xpcPcB9LvDH9bdR7971as66duz+PhK
oW9vNH+90LevW3tG6T/SeE/XgP70v0pZ/zu0/vbuGvGGf55xoyd77mutzucu
01b3HDEzl934XvM+9SNwsq3Rj/oRhOz5mUP9CB7Y3a396shzViN30yDqX/Bh
TucO1L8goFL0QWA1huo8nRQxjP0Jlfsg+P1oJfojVPd83ob6I0R0eCHGHya/
/PXyyHP+peS7mGfa7INinppbz1IfBPbiVFUf+t0OTVqK3605O+eitE5242wJ
p3W2uXy6F62zzoet1EeDzbk/SfTR2KvrIPpoHKq4lED9LHQ2R4t+Fin1tEQ/
i+9q94ZQ/4u1I/JF/wt2YJPof7FW7qPBH/aR+2h4o4+Geb+2or+GrWuBGE+p
/1aMt/6j1kuahx0f/0nM06zlNjFP1KLmadLvcrv42+J3E9rWF7+bt+nEXOr3
MU3fRqzzwN3NYp2z5b4tLBp9W0aib8ug0R9sqX9K9Bw/S+qfEuj+sz71TzF9
Ivqz8GpxvaZTf5YnTO7P8ktL2Bm+HHbmK+yMwyVN0c/Ftv5bK3peI721eP6B
3J+FbUd/luvoz+KcEkn9WfjkQ8dKqT+LoW+h6M/S6/FEL+ovs+LnrkW0zotx
vU7SOk/L94W1x33Rwn1x7n6pmOzk1BEdmpKdHFN6/BPZyVFuL9dQf5/sXs/a
Un+fbYGrmlF/nyy5fxDfai33D/qE/kGLTi5bSP2DUrSWbqf+QZdfL1pN/YO2
Xjwm+g3p/hzYlZ5v1nuCeH5zNS0HaX7Wdu1p0T+oz7Us0T9om9w/iBejf1Ae
+gdt2eKeRf2PonKOtaR1xu8+/pXGh84yrJLsHvt122wW2b2lM/NXkN07NiB3
wQ5p3Mv+mH1N6pMTP9aExgdbOU4i+xawMuE+2bfXUd8jyb7tle0kr75UtpNP
YCdrNXm/kuzkuJ6rK8lO/jZ5fofsZM5WI2FXq/0x6EnP222t1ZyeXyjbT5YG
+xkP+xm/v8pBWg83n1LXmtazdrTeMFpPhXOnMrLbemMmzqP1WwzcuInGb3hO
n3yzbiLvcPrIGap/tz+XtJLq3++2bX8zom4i+z2u979VtkX85KqRnjSuO1Lo
fXEThd5XbbPR9VabPGWtM5M60niTD36faHz6qGHcWRqv/7TGIdKVujM3oBvp
So3YsLRhxLwovraB2oQn34okO301a+iRNDajfeTYMGnc3Gf6BWmcNZqxZCmN
/24akSHZSXb/nZ+wkwcsCoSdvJxTY530PHOsy4Po+WeBYYvp+ara9jfDpfE9
YflmNP/APU9yaTx4Qdwr0t0d8mWe+C5vCKktvssBJzt1p+9v0qzBQ+n761Jw
uBqNj5X7HLHB6HO0Dn2OCiyL6XvNPd/tEt/rysDHavT8wtCPxrSe5A9nxfon
2tsvod/VW+lB6+HuOTFiPef6jf1A40kl7322TollemFDfsyVcJ3HMqPQx85p
LP9Oj3Rnabx/rZAF1m+LWFyy3kQaXyGff5asOP/vBwxovnFKLN8XvNuOnr/y
MNmUnt9zYttAaX6+2kmjguYf8nv6DRpvV77vJ71fq2Yxn+n9Ovf8sYver1YL
DUvSQ3j1xSSQzkPv/l8caLzh63Eu0vlk/hV5P+l8WjzpFEHnc7v/Hic6P36L
coR+wrcAtpSen5TV9oY0P1dr5C3OT9JvswM0fkehw3MVvLQz6teKFfU+WuXh
R2j9+n5HvtP6Z6iPuE7r3ybfdx6ZKd/3JrjvV400Wkj7wK4fyp9P+7DG7o05
Pe+CvBct5L38hA75AeSZ9EGeyUzkmUz1+ls35gT4eQfkjWxD3ogf8kZm1jzV
iOzk/fQO38hO7mrcfCfZybY3hb3l21wbmJK9dW2oLeytsWw/mS3sZyjspz/4
t5bwowvhRyfYJNWSvrM8Rr+p6BO0x/WA6BM0DHo11uB7P4LvTYF+6Qjol7aF
fqkH4s73EHcuQdy5pdffujTH8X8X5XjSPWVrhqaPp3MbH9Utm85t9ay1hH/Y
w0FrBP5pUJoi8E/7WnUI//DO2fEC/8QUV3oQDtlUEJVOOGfd967udH/3R1Uk
0f1tI+MQrgccUg4ckoz4xVSck1CcEz3Ec7W6/t0nIgh6j36Ic61CnCsW8dne
iM9mIT7rjfoy1Xk7iPOWjDjpSkX/hdX/ZLGNkh17++2ZB9mxBm57O5Idq9Gj
w52l13OZfuOIOtR3plb8dFvCqzE1+l0j/Jm/skrgz8xni78T/nxiKuwk11HY
SdM1i2cI3OvSpg7h3m6zNqbQPE9Rp7ALdQpJqFMYC515K+jMf4fO/CfoyT9F
fcFA1Be8gS53S+hyT4Aud2vkFVsgr9hYlVeMPOG3IXKe8GDkCV9E3m8y8n45
8n4jkY/6QtHvIw95pxbIOy1H3ukk5JGOUfTFMIdeSkuFToUV6lz2K/JIS6ET
dRe6H0eg+/ES+k47wAP4gwdwgh7IUNRrzEK9xiLoCKl+twy/qw19DFvoY8RC
H2M9dIFU6ynBehYO60y8EO/xvUr4U518DxiTPyXh+Zqd/0u/4EDEZ08odEpb
Qs/BRVEPHrQ7gPASa1TWXYfwjMUjA4GX+qJvwnT0TWDom9BNxo3sKXCjP3Dj
ZujAN4YO/FvowI/KuUx4mL0++03gWPueywWO3SDjXr5thYx7k4F7TaD7PQa6
317Q/T4EPrAV7FgR7NjwXgL/s+oWUw0mS/j/50QZ/w9DXo0O8mp2Iq+mFHoC
HaAncAR6Ar9kP4ipHez9pprkB72xl/0g7Buzwb6ZY99O6q0LJb9vilWXn+T3
jXIJvUJ+H/e3E/5jtbgzjPpS7T/9Q/iPqj4yKxT6PPcQr7RS6LjOg05O3mtZ
J6ccOjmw50xpz7E/XLk/p6B/bg7981oHZf3zYuhCG0MX+iV0oSOhKzsT61mP
9SSi3rynwu51gr6QteI8/+ks+nIyVV/OCejLeRO6Oqr75Yv7dU7GvXwncO9p
4F6edLhmnSbXeKc3awJ/6Bcz3erPkwPS09hVxBl7IG4VhbjVDOQlHkBe4mbk
JZ4dbU68BHvaUS+Y7lHsg5viHk2p5qDbsMk1tvlZk2XS/HyK7pwNp6T5wxA3
VNsvxw0TETdcijzAicgDLEd/gTvlXuQP8vqTE4RfFuirIfyyS/1WkV/GLn7d
IPyyfy1shF/2q6DFt6VBbsy5nfrLxSbFLLJRfu0dpRL+RDxO+b/eI39vPPL3
3iN/74jdDRG/OGnwVPA2v88kdyfexpTVbrAmyI2ferwyUJqfb/tqcYPmV0N8
rRPia48QXyuH7v1n5MvNRr7cJPst98hf7jR+tvDT/1E/JfzlqEHHgsmvvzxx
nfCXGz9u3Zv85SUvnLfc6Xab71tuP+V+l2L+cqHfzjnP09hFxNFMFXXr95AP
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
               "]], 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], "RotationControl" -> "Globe"}, {
             DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> None, 
              DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["y", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> {300.}, Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], "RotationControl" -> "Globe"}, 
              PlotRange -> {{-6.597343630060769, 
               6.597343630060769}, {-0.9999998571428571, 
               0.9999998571428571}, {-1.9999997142857142`, 
               1.9999997142857142`}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[2 y Cos[x], {x, -6.59734, 6.59734}, {y, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11774$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max11776$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min11773$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min11775$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11776$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2612085$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11773$\
2612086$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11774$\
2612087$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`min11775$\
2612092$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11776$\
2612093$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11774$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
max11776$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min11775$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2612085$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11773$\
2612086$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11774$\
2612087$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11775$\
2612092$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11776$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11776$\
2612093$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    2 $CellContext`y Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$]], 
                    (Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$]],
                     6.5973445725385655`]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11776$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11776$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max11776$$]], 1.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AspectRatio -> 1, 
                    ImageSize -> {300.}, ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11773$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11774$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11775$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11776$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfEesQfEJidGNMGlCS8r23xEksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+2e5JEpRwZNr+OyOMSHRe4TBDxI7301j3gs5A+3Ob/\
B9YFHBQJOvmjKqKVHTAwl5RiNVe8aSnpifTJmIgNGf5Nnw1fbwxesdB4OxjEFrIrnaaQuZZxIUSXoI\
dMOYdwz4N3d8XB4/FYyF5HtBeETUQ+OdSIgNjODAMB/vW682U/\
cwMQ08BhlfOk1WnqO2FygtKU8nZJbjGxeTtd0WGGSqHDf3S27WKciFfwsfiNDG5Dw2aXu2BPqFccXo\
Oy+rf87dAM9v28JLcbqaOMxvlyFvoOkJUct0Pm9dJ8dI1bU2+jlXlzVfNhrkxVOm/\
l86okovhzFsGwaZHZsar9beMvzLtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCkhPjii23ezSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1B10lH35o+\
JWcjnXZMj7IdckJXKt6G9jfaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqQqC7pWBzY0pz5J9EvC3xEeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DQlmuEY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.038", 
    "parsetiming" -> "0.659", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa79316h34fe04b8i3h1200001chf9c11e78bbdi1", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "53", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa79416h34fe04b8i3h12000035dh5fc8fd1g82i61494264905346578628", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 39, 39.6807145`9.351154366344387}, "Line" -> 
    19, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DPlot", "3D plot", 1, 1, "Input", 
    "Plot3D[2 y Cos[x], {x, -6.59734, 6.59734}, {y, -1., 1.}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot of cos(x)*2y"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{521., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[19]:=",ExpressionUUID->"3fdd1bec-5ce4-44d1-9784-fc6ac82bf149"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyUvXmYz9UbPi6REloQqaSSVJ92FZFHkpQlWlSSSiKiVUT2pLRKi7WiIoVP
DFkKZ5pkm4R3jGWsg7Gvw1jj+/m9z30/8527ur7Xzz9zXfd1nPdznvOcZz/n
dUnLF+5/pmCBAgVKlihQ4NT//f1gxsCV454ul3rJmoaTTp7cE96/9a7Hz3nh
RPhiZJXKn3xxnuMvn76k/0sbj4T/9svo9PrKcx3f2/q7d+a/ub5mt+V73/mt
cgnHuw87rdbrG4/Y8OQ8pzne/pGbahd74YR1SY4/EYi32DV+1tY5G61jEt/t
eMPzP76m4qL9oUDy39IaxOPfk+HtON6I347xb8T5HX8T84+M9NTydYGeXpF+
xzuC/glxvY7va90/ud4RkT+OdwN/wM9ayk/yuXXHCUOmdNgRrn+welaJ8446
n4mPy6rQ6fvrc53PxLPffe6xsx9Y7XwmfmmNq+anXJ/rfCZeam1W76LnHXU+
Ex9a6tOdX+Wsdz4Tv/O2uZ/cefFe5zPx+PeY85n4zRhPPhP/GfOTz8TPBz3k
M/FyoJ98Jt5lQpXkesln4pPBH/JZ+Uk+f39myV4dMrPDny/e0KbYzIPOZ+Kb
ZrzYcmP3/c5n4tvv6Tvy/aHLnc/E565ueP/27vudz8R/fnrgL6fPPOh8Jj62
8+EqP9Va7Xwm/sKU3EO/rd3ufCYe/+Y6n4k/gvHkM/EszE8+Ew+gh3wmngr6
yWfiZ33cNLle8pn4DvCHfFZ+ks+7v3q1dcV7ssKr71+x84xW+5zPxKtd2/vz
qp/tcj4T313k8y1FsxLOZ+LLj2ZNufOzXc5n4i233XFKkVb7nM/EL50zZ8C1
QzOcz8QfOdxiTqGem53P/rvJv/udz8TrYjz5TLwR5iefiT8Deshn4gtBP/lM
fNSrryXXSz4Tvwv8IZ+Vn+TzM0k5zwzXJeV8u/OZ+Njkuch2PhPfnNQbvzuf
iV+SPHfZzmfiJZPndLvzmfiQ5Lle7HwmXjupB9Y7n4k/g3NJPhOvgvHkM/Gf
MT/5TLws6CGfiZcD/eQz8deSeuN35zPxSeAP+az8zC/PCfB/g8hzAvK8RuQ5
AXlOE3lOQJ7XiDwnIM8bRJ4TkOc5Is8JyPMykeeEy3t+eU5AnpeJPCcgz3NE
nhOQ5w0izwnI8xqR5wTkOU3kOQF5XiPynMfP/HxOA75E+JwGPi8UPqeBzynC
5zTweaHwOQ18XiJ8TgOfpwif08Dn34TPab4P+fmcBj7/JnxOA5+nCJ/TwOcl
wuc08Hmh8DkNfE4RPqeBzwuFz3n8JJ8LyD/yWXHyWXHyWXHyWXHyWXHyWXHy
WRHyWXHyWXHyWXHyWXHyWXHyWXHy+V9wypuB/ybybJBnE3k2yPMskWeDPAeR
Z4M8B5FngzwHkWeDPBv57L8b5dlEng3ybCLPBnkOIs8GeQ4izwZ5DiLPBnme
JfJskGcTeXZ+in4GvkH4nACf1wifE+BzmvA5AT6vET4nwOcNwucE+DxH+JwA
n5cJnxP0I4TPCfB5mfA5AT7PET4nwOcNwucE+LxG+JwAn9OEzwnweY3wOY+f
4m8Y7KOJv2HwN0z8DYO/MUv8DYO/EcTfMPgbQfwNg78RxN8w+BvOZ+LwN0z8
DYO/YeJvGPyNIP6Gwd8I4m8Y/I0g/obB35gl/obB3zDxN5yf4j+D//tEnrMg
z7tEnrMgzwmR5yzI8y6R5yzI8z6R5yzIc4bIcxbkebPIcxbkdL/IcxbkebPI
cxbkOUPkOQvyvE/kOQvyvEvkOQvynBB5zoI87xJ5zuOnxIOG+MUkHjTEgybx
oCEenCXxoCEeDBIPGuLBIPGgIR4MEg8a4kHnM3HEgybxoCEeNIkHDfFgkHjQ
EA8GiQcN8WCQeNAQD86SeNAQD5rEg85PyW8Y4nGT/IYhv2GS3zDkN2ZJfsOQ
3wiS3zDkN4LkNwz5jSD5DUN+w/lMHPkNk/yGIb9hkt+A3lgfJL9hyG8EyW9A
b+QGyW8Y8huzJL9hyG+Y5Decn5KvM+SXTPJ1hnydSb7OkK+bJfk6Q74uSL7O
kK8Lkq8z5OuC5OsM+TrnM3Hk60zydYZ8nUm+zpCvC5KvM+TrguTrDPm6IPk6
Q75uluTrDPk6k3yd87PSJ28uKjKjVOrsyj0rZU7ZFVaOq/Ni4uj2cEuXK8rv
yT3b8cuKtZ276+h2G5f83YKOv3jTriYrCx60ocnfzQ3E09ct37N7UCIMTNK/
1ogf63iie1qXo+GbON7xPhg/Mc5fi3h3zF810uP4GaCncqTf8RzQz3Wdnrqh
2MCK28L+Ucu3Vl+a7esi3r7XDWc+sDTb10X8skI/tn9o7j5fF/Gfum789K7O
i3xdxG8pVen0Im1yfV3Ea2I810X8WszPdRFvCnq4LuKnj470c10NHq6TU2/g
plDsy3ZPjRqf5esi/uOBI42mjc/ydREf/92REl+X2eXrIr7m5jINxs+a7+si
/vKkhgPrP7jf10X8NYznuogHzM91Ef8a9HBdxMuDfq6rQlI+14V7rz826aIS
a3xdxI8v6Xt59RJrfF3ES9fvX2fYiGxfF/FT9t1bsPRps31dxB8btb1qhTd2
+rqIp+yN47ku4pdhfq6L+HrQw3URbw36ua5oRzJCz0svGbU3damvi/hHP5Ue
X/iXpb4u4t13lu368ZXrfV3EGzzy14tHhs7wdRFfurFaw+8e3+TrIp75cBzP
dRF/C/NzXf67oIfrIv4x6Oe6or+XHlpd+cF/3toyz9dF/O66DduO2DLP10V8
/gVNnijzzJ++LuIf/9FqzbwrJzr9xBsDJ/3El2Ee0k/8Ovwu6SfeDXSS/uhH
pYTBF0y+qNnQCU4/8VXXrt3bbugEp5/4U11/ufLi1dOdfuIvlLzhiqeyPnP6
iZcGTvqJv4R5SD/xBfhd0k98DOgU+g30m9BvoD8I/Qb6g9BvoN+EfgP9JvQb
6A9Cv4H+IPQb6DeRH4P8mMiPQX6CyI9BfoLIj0F+TOTHID8m8mOQnyDyY5Cf
IPJjkB+Tc2041ybn2nCug5xrw7kOcq4N59raxXPt+Kp4rk3OteFcm5xrw7kO
cq4N5zrIuTacaxM9bNDDJnrYoIeD6GGDHg6ihw162NdFvFXUwyZ62KCHTfSw
QQ8H0cMGPRxEDxv0sIndNNhNE7tpsJtB7KbBbgaxmwa76esi/lq0myZ202A3
TeymwW4GsZsGuxnEbhrspomfY/BzTPwcg58TxM8x+DlB/ByDn+PrIn579HNM
/ByDn2Pi5xj8nCB+jsHPCeLnGPwc9UsNfqmJX2rwS4P4pQa/NIhfavBLfV3E
T3016Zea+KUGv9TELzX4pUH8UoNfGsQvNfildt4PG3tV6F3W/ecqhWa2u/HR
v7wuQPzDg4dPFi962PPbxNfdlXrxgNrHXf+z/l4/Kee7HGe9+Jmkvtrqdo3j
/0qel132XnL+oj7/7mJXLany6F/OZ84T9fBWH895+mcXvv7yYSe9HsF5al1w
Zst3ax93u8nxUT/kOs75oz7PcXvK8QWTemNpkP0K2C/fX87zSVLPL/HxnOeZ
pJ457vUOzhP//uV+FMc3x3jGcRw//cprNtzUeZ/bd46ftDfSSZz0NAY9lB+O
vwx8GBD56fHLTvCf4znPMvCH4znPW+A/40TOM/e5wYXKFD3sfgXHb8C+E+f8
12F/Kbcc3wZyVSbKrc9/M+SW4zlPd8gbx7u8tX5o6KXDTnodR+WZ54Lxzlc1
3zvz/mWH/VwQn7eo3s66Dx8QvzobfvWmQPnk+B8ffbnkg8sOi13Ohr+9yeWW
47eM+Glk/22HxA/Phh++V/VhgD4UO54N//x3lzeP45J/j7hcEX/q07QBoz/Y
JX57Nvz23wP3neMnY1357X42/Pm9Lg8c36HYjPcbPXxA/Pxs+PmbjPvF8V+D
//n9hGz4/5t8vxjHnd3lsXEvNTng+0W8wPeDV/T8Zq/4q1nwt9f7fnF899E/
PfRKkwPix2bBD1/v+8XxH1Rqt+GtATnin2fBP9+mdjnALovfmwW/fY7vF8fH
vwe87km87JfrWnbssFL85Cz4+XN8vzi+G9aV33/Ogv+/zfeL40uOX3dev2/2
SlyQhbhgve8Xx58D/uf3t7MQL6z3/WJ8eix5Hvf4fhGP+bRtEt9lIr5b4fvF
8W8n9c8e8dszYS9W+H5x/HPJvNZuiQczof83qn8Y4B+Kn5+JOPEX3y+OrwB9
w/0i3jeZZ/tT4oJM6OdffL84vh/WlT9eyIQe3uj7xfGvJPNy2yQOzYReXeH7
5XkM8D9/fJGJ+HSFnJcEzsti5z/j8fN7fTb56Y+z5bwkcF4Wy7lI4Fys1Pgi
IL6Qc5HAuZgifVwZrufy5+cz0K/1u5yLBM7FFOczx5cF/fnPRQLnYqXIfwLy
v9j56fRn5mQ+9XG2yH8C8r9Y+JkGfqZKvJ8GvqUK39LAt/kS76eBP6Olzycd
fT6pwoc08GG05AHSsN75st40rDdV8gBpWFeqr0vr9VyX4lyX4lyX4qRfcdKv
OOlXnPQrLvuCPEaqyHMa8hipksdIQx5jvshtGvIYo5X/yGOMFnlLQx5jvuQx
0pDHSBW5SkMeI9XknIL+xXoeQf9iqf+mo/6r60pgXSv1PGJdU/R8YV1T9Bxh
XStlXQmsa7GeF6xrsccpzA+sjOdL6okZqCdmST4nE/mcFWoXkM9ZoXrMoMek
zpiBOuNmqTNmoM74u+SFMpEX2qj2AnmhX0zypYZ8qdQfM1B/XKX2AnmkX9Qu
II+0UfWbQb9JXTIDdcksyTtlIu+0Qu0C8k4rTOy4wY6b2HHUxbaJfGZBPteb
2HGDHRd9mAW5XR/EjhvsuO8L8cejnRV5zoI8b1O/C/I8xyQ/b8jP+74Qj3W0
LPW7IP9zTOy4wY6Lvs3CudgWxI4b7Liclyycl/VB7LjBjot+zsI5Wm/iJxv8
ZBM/2eAnS14xG3nFTSZ+ssFPljpCNvKNm4L4yQY/2feLePYXST9W8pPZyE/u
1bgG+cnfTepEhjqR7xfx+5Zf9cTma7dK3jIbecvfTfxkg58sdYps5DP3BvGT
DX6y5DmzkefcFMRPNvjJUtfIRv5zk0kcaohDTeJQQxxqkm8x5FtM4lBDHBok
rwJ9uDVIHGqIQ4PkSaDfcrwezfFdY/xokg8x5ENM6pWGeqVJHGqIQ03yGNB7
S0ziUEMcGiRfAX2YEyQONcShQfIP0Ht5eQOORxxqkmcw5Bk0n2bIp5nk0wz5
NB/POng8vydN8myGvIRJns2QZ9O8mSFvpnk2Q54tSH7MkB8Lkk8z5NOC5M2Q
V8/1fec882I+SvNmhryZSf3dUH83yY8Z8mMm+S5DvsskP2bIj5nkwQx5MM1r
GfJamgdDPj83SP7KkL8Kku8y5LuC5LUMeS3NUxnyVJrXMuS1TPJRvu+SvzLk
r1R+EMedDOwzYV5rMfJvsl8B++X9HsTrIl/K/g3iQ5AH5vzMz3REPkf0QIAe
8PmJ70Rei/MTX4x8GudnPuF85B84P/Gnoz73+YkPRB6G8xMvgvwP52f82w3x
MucnHvtqsnx+4i8hb8D5fR7kK/L3rWXgHlOW3EvKwL2kVdI/loH7RJstfz9Y
Bu4HZWn863ZM1mVYl+Yl4L/sMVmXYV1B1oW+nW0m+2LYF81Twd4eMNkXw74E
2RfDvpjIlUGuNG8J+3DERK4MchVErgxyZXIuDOdC8/DQN3+ZnAvDuQhyLmyI
6HPmn58bWbF67TLHXK8Sv/+mRi/XKXPM9R7xEXXO/bXVi4c9/098MHDqH8/n
Yx7qB+Lt8bv546bsEOOmXIl3spG3yZU8TDbyMAekryMbfR0HJL7IRv4kV/Ih
2ciH5Do9zAfefd6v3Xqftd/pIb7h97W5fc7a7/R4PvONp5bvunev00P8bOCk
h/g6zEN6/u13me9qkuTnDv9d4l8m+b/Vf5f4IOD8XeL3YR7+LvEoDzucD4yn
2kXchB4DPUHoMdBjQo+BHhN6DPQo/w18MOG/gf9B+G/gvwn/Dfw34b+B/0H4
778r8om4PtdEPhGP5waRT/QhHJA4Ohtx9AET+UT8mxtEPg3yqefXcH5Nzq/h
/AY5v4bza3J+DefX5Pwazm+Q82s4v9as8nsPrvqwTOqnf5RZX2/gztDr5g3F
ez9zNJRKjj/d8dan7Gw64/Xj9n3Sn9kfiNdpdHTVxWs3hzFJfZVtxBulLiq7
dPrBcPqCO26sVrdYLeL7Jlw8qd8zRy1xc/XxrV8+3/G7h1TrOfP144H0rHym
65yTJ7eEBjN6/tDwP7lOD/FbVzyxosSuQ04P8fb9J41v3yLL6SG++frcIXts
v9ND/K7CvTvc/59c58NFf60eN6XDxnD+neWblMvZFzg/8Sv7ryzwysw14ZMk
n48a8W6dR47+4ulpxvmJD3k064ryOfus6/5F+8YUPjs1LanP14RX+s45WLfB
RqefeJeT9UcXm5Xh8xO/r0Gjp94eneLzE1/12Fuz/3xlh20qt+ZYw/GlHf+t
W+X61RtsDPzdaAeXhtZTh9dqOW2V/y7xT3d0G9Sg+yL/XeJ31869dVPiO5+f
eMfU+uffP22Vj49yPiesWf5lsxcmDrcqSX+1APyERdbg6/af1p+22Pc32s2V
NqRc2beG3rbFuL/E38gqWPWns7cFzkP8tanfj7ym7qrQNCn/fwTi6cUfefCn
l7ca95146ifjpj9bfqPzjfj1E7b2+PK2LU5PqFeiwsCKG+xEscw7Txm/x/eL
+NLBfdY3qZPtckj8xaHvDy1aZp/TSXzJMwcyimzf4HQSr3rfAz0bj93rdBIf
MOmJqTecu93pJN6vSKWip4/fE8h/4memt21Xp062y+3rE8dWy5yy2SadbFRg
8lkHnH7in/1y9Mc2VXY6/cS//PX886eNOuj0E9/6Qsk1hydkO/3E3xvUdemd
Fx10+onf0LZ/s7/67HX6ib/ww8R7p511wOknPqjNzjFNq+x0+m8td88DFe/Z
btmvTWixpd5hp5/4f16d/lvNc/c5/cQX7Rw16JkqR/2cEl+xo2mduuU3Gekn
vn7dyCtv/fCI00986OGWKzccz3H6iV/wWOMBO+sddvqJn9Nn6itVzs071/v7
ZLfvkLnb3uv/6oR7ih5weoj/MOHzl458vsXPEfGHFx8eeHvRA5YVcc4T6kc8
yPwB85vMHzB/mBxx8/GCU99eBr3dLc5PekIvzC90BtAZSCf4EIpEPgTZr4D9
MtmXgH0Jo+O+kP9hddyXIPsSsC9OP/GfMA9x6vMm0P9cF8dfAnpkHwP20dcF
+Qz9onwGOUcB58jXRbzAFWeX+fiL9b4u4v3jeXE9Sfzc4vXnX1n7Z6sWzx3P
RTgZz53jtCP7tp/arFfDTcZ1cXxf0CPnK+B8+bqgN8KJBUm94TjtxXSxFxwP
vefrJd5k9sA/w+2rfL3Eb4n6zddLfPOGQ2+UfPNHXxfxTVFPOk56xv0y/9vy
xdf5ejl+DughzvFtYE9FTwboSV8X9H8o9WLRM2s8uN7XRfyr2wp3ebTmn74u
4vOiffF1EX+lwz3dj374g9NP/ONopxyn3Xxt/LvDavRc5nRyfK9rt1x944Pr
fX7YzVCuzNf7F5b+xuch/ni0p47T/r5547DyP2bNdfsL3DpEPLwT5w/Ej2Qk
7bXjtNddz0v+rssJ6LdW0e67vqI97RTp99/l+JZxvT4/8S53JP0Kx92+t0/y
0881xz8T/RMjzvFvxv1yeeD4h6Kf43qA48+I+67yb5B/k/NiOC/qvxn8N7eb
xN+LcuvrIv5T/aT/5jjnvy2eC18vxzeNfqCvl+OvjOdO5d8g/0HOi+G8BPEP
7TdZL+0y9J7vI/SPrY76x+knPr1T0u91nPNUK5bUb74ujj/+dtJ/9nVx/JZK
Sf2p+s2g39TuGOyO+v8G/98+iXbE8T3R/3ec83wDuy92xGBHTOyOwe6Y2BeD
fQlixw12XOMmQ9zk9BBvFuMmE3ttsNcm9t1g303suMGOB8RZqRpnFYp+juO5
iMuEngB6Qtnod3m81gbxYPPovzn+JuJH8esC/Dr/XeIVon9l4tcF+HXG8bTv
9yBek30M2Mcg/l6AvxdEHgLkwdfF8Yvxu+IHBviBxvGcpyriUPKB43dgvcTd
P0E8K357gN/u/CH+SvSfTfz2AL/d+UM/4XPEm1wvx98W/XP158N79E8wnvOc
cWe1W857b5fzh+NH4HfFzw/w850PxKdiXcQ5/0WIryX+Coi/nA/E34txkEn8
FRB/OR/oD6xHXMx1cfwXMc7SuCxUpd+C8Zznpor9qjYcnO180N+VeC0gXnM+
EC9cPK6LOOdf/HGXzQtf2eHrpT9wc4xPnX7iC2I8q/FvQPzrdBLvG+Nop4f4
FzHuVj/H4Od4XEZ7kR7pVD4b+Kz7Zdgv9+c5/orITxO/0eA3an7DkN9Q/nvc
LXw28FnzOYZ8jp4Xw3nRc2c4d04/xx+pnTwXJn6+wc/X/I8h/6PnyHCO9FwY
zoWeI8M5MsmPGfJjqicNelLzZoa8mephgx7WvJkhb2YSrxniNdWHBn2oeTZD
nk31rUHfqp406EnVqwa9amLXDHZN85mGfKaJvTPYO81zGvKcms805DNN7KDB
Dmqe05DnDGIfDfZR859OP+tE3Pf496Dj5EP86/N4fuDVQzc1LfXrCderxM/f
f87Mcn2Oe/8z8QInN80OuXl2mfjvp+1ZVqHPcecb679TJzbd0mHAX66HOf6v
0jeeV/LXE1YxWXcu5Pjqiy6v0vy+o45znov+fP2ZJfWOuX7j+BJv13hkTqdD
rt+I31R5fo+rTjnh+or4dYJz/juPnvvgtxedDFfG3/U8xmbQw30kfgL0E+c8
91ZY9uqs7JN+rjl+DvjDOj7xz9+479L5uYddbomXB/+Jc/7nGn//SZsBf9FP
q6X7SL55/qTeguffapur8gB/56iv1/0fjGedkXif8Mc5C04eVnmDX3BQ6lDp
qEOtkDpROupEK6SOlkAdZ73n36jfWuZkX3nvpjx9QvxJ4Fwv9UDTtRcW+7zT
AZcH4lOql+h5e9NDPg/xScDJB+KPYx7ywefvM/qGe/7Mdb+d5/GqKx85tdoH
+03OkeEc6bkz7JfHiZynec8y1et8sN/r9cSPPLAhu9VFh3x/3f+f1HnJS80P
BzlfhvPlfOD4on1vXnr9vGPOB+KnAZdzZDhHnv8kXjCeO+cb53ka9JBvxH84
nrvv3v8c0/NlOF8eh3J8E/BBzpHhHHl8yvFVwH/WwYlX2lmsevOLDpmcF+c/
30VhP8mm/zwxrckPa2u2K37t178sKOnxTsmcrKf+HL/K+wM5/nivkcvuejzL
41+OP+PkHa1bZu7y90w4vkLvOJ55G47fnv314M27f/F3/zj+2nBZkp4DJ3vc
e/PWczxu2nbrhrRi/13l9LNfZev2zif+yF3p9DOO2LL9y2nF22Y4/Rz/QuNz
ihQotc7p5/icA5c++VKpbU4/x4/DeNLP8WO+OrBjcoVZTj/Hzx55V5Ie0s/x
p5z21I7b22Z4fxHH92455Zv3tx1y/cbx21fXWXLW//wErpf9MzvHDKjToOYy
Xy/jhZ+ymp9Vr2JC+zkD+jk1XxGQr9D+zID+TPXrAvw6f2eG45v1bZOkh+vl
+LJL15d8oWLC94v9OfEdnsVOP/38C3+86fdCIV37hwP6h03ySAF5JO0HxjvY
WepXB/jVTn8ePf2T9JB+jn+qzi+v1Qrp8i5WBt5Jnuv0M2/52zfju3S5+Vft
S8d7yL9r3i8g76d95nj3eJX0VyTQX7Fe3q3KwDvGc51+zj9wfer8r27+Vd6p
S8e7uDOcfuZFV1e+r9Hqh3/U+wh4/zZV86UB+VJ5hzYd79DOcHo4/q0jvW4u
+siP8p5bCt41/crpifhX4YcKxUadV/IjebctBe+XjnZ6OP7hyt3Kzr7ga3mH
LQXvkY7288vxE8Y1KP3ogU7y7mgK3h39yunn+C/mFmhRveRHSj/eo/tqFumP
fPjZitww8NDI4d/J+6speHdutOdFOb5PjZ8qjv5uhrynmoJ35EZ73pvj+/Y+
sqj2rR/Je3EpeC/uq1mkn+Ofv/qU4iuHfyfvJKfj3cIZTj/z2zdWWzaizYaZ
8u5xOt4hXOz5Oo7f/NSeGtnd58l7g+l4NyxV8/aGvL28K5iOdwVnOP0c/9Dj
vTd9u2GmvFuegXfq5jr9jNP3j9t7qXWda9IHiPfrsrTeYah3yDt1GXinbpXW
QQx1EHmPLgPv0f2udRBDHUTPL96dm+vr5fjXz71j5Etd5wbRn3jHbLGvl3H9
Ny1+vm3zKYu1fxLvkmVpfcpQnzK5F2m4F6n1KUN9SvWnQX86/Rxf8ecKY4oU
XOz3uzn+veQ7Y7vdP+H4x9MeanBmmX0m9s5g73y9jPuWtD6x8fu6S7Uf1dCP
qvVHQ/3R5N6u4d6u1h8N9Ue1dwZ75+vl+OK7RvTMqLvU18vxFXuOu/LdATm+
Xo7/uce9R/+/PKH4MwZ/xtfLePav5+94/8V3V5j4MwZ/xvUJx5/ocuPGbZ13
BPFnDP6Mr5fjL77wviIjeqYG8WcM/oyvl+MPlr/k4VHvrgjizxj8GV8vx59f
3ca0rnJU/U+D/+nrpb9auXPfW25ZvNrE/zT4n75eji+aNqZjh//ruwwcD//T
18vxP048fOXVLX4N4n8a/E9fL8evbjzy2o6LVwehM4DOsD+Od7xsk+R4I04/
9pKq0Y8V+gPoN9aJiF8Q6XSc8zSH/yzrCliX1z2Jl8P8xDnPFfDbZb0B67X2
cb2OP4P1Euc89REviNwGyK3zh3jli5Py4/yh33s9/GSR5wB5dj4QH35BUm4d
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
NfilQfSDQT8E0ScGfeLrgp60aVFPBtHnBn0eRP8b9H8QfW7Q50H0v0H/+7o4
vjbucYjfbvDbg+hzgz4Pov8N+l/jDkPcEcT+GuxvEHttsNdB7K/B/gax1wZ7
7evi+Gdx/0LiGkNcE8T+GuxvEHttsNcalxnisiD+ksFfCuJfGfyrIP6SwV8K
4l8Z/CtfF8cPwL0Jrou/Wxe/K/6SwV8K4l8Z/CtfF/xGmxr9xiD+rcG/DeIP
G/zhIP6twb8N4g8b/GFfF8evxniui7/7In5X/FuDfxvEHzb4wx4v8L2sqke+
K7f88SNB8gABeYAgeYCAPIDbNc7TavyBZb8lch33ugbqBVwv8aHNYn2BcQfn
eafbU28vn5oTJJ8QkE9we0f88g8LPjTlwGG3a5zn1Z67dnxRIc/P5O9OQN2E
dQriWaizkD+8R9Bj7PmT53c66PtL/MHncrtk3Zcjdj87NEAdgeslXgB1B66X
85zb/f6qtX7YK/p/W+hc6c4PN9+7Q+x4dqiJekf++4bZYQvqI/nzAJvC7Mf7
N5zx4T6nn3j/+/dWPzFkj9PPukNX1B1IP/HfX4t1Cu4L55lw+pgu1S+c7nQS
L9RobN33H8x2nPOkoz6S/35oVtiJekr+vMG6UKrC/oWPN9mRpzeAt/sj541b
P9kq/lUm5G2z0088ytsEp5/zRLmalBdnAf8oKecbxF/KhPyskXusmWED6i/5
+ZkAP1cLPxPg52jJK2agPjVW+JYA3/401tHKIy/UBPmi/PxMgJ+pQk8a6Pld
6EkDPZ9JHjgd9aARQk8a6PlV9jENvzvBf1frCPxdxTm/4pxfcVmXYV1B1mVY
VxD6DfQL39IM9Iv8pFuUnxG6v/jd1fK7CfzuaPndBH73T90v/G6q5gMN+UDL
n9/OQH57o+ifDIv6Z0PIr38yLOqfseLPZxrOS5DzgvVOkHx4BvLha0UvZVjU
SyvEP880nJcg58VwXiRPuM5w3k3Ou+G8O53EJyTr3ZNkX7KwLztlX7KwL1NC
/jzkOrvr+LPXX1Zjs+oBgx6QfczCPm6UfczCPi6WfOwmgx420cMGPex0Et9a
JKlXJc7Kxv7uk/3Nxv7+LPneTVblWL/FTRruUP1s0M8SN2VjH7fKffZsg30x
sY8G+2hiHw32MYg/AHk76HVAjr8o2kH1EyCHqUHspsFuSpy+zWA3g9h9yOGu
IHbfYPdN/CKDX6R+jsHP8XWx3nF+9EN8XRw/KPoz2qdh6NMI4v8Y/B/1Zwz+
jK+L86DvIkjfha2ROg79ot7wi4TOADrdzyT+Avw62h3id8BvzB9fbwvvwm+R
/Q3YX5+feAv4UZyf+Jvwuzg//YpS8Cs4P/G6Uc59fuKD4edwfuIL4Bd5Hhh2
/wvYfc5P/IGoH3x+4p3gh3B+4hfBb8mfL8pAv8oKn9/fq4l6VeqJGehL2eDz
E/826n+lH3W6DUqngc4gdBroNOGzgc/KTwM/g/DTwE8TeTDIg+67Yd+D7Lth
31VuDXKr8mmQzyDyaZBP5zP9/FXod+J44k+j/yr/vmRjX3aH/PzPBv9zpJ8h
KyxEnw/HE1+BPiKOp9+4En04HE+8Jfp8ZLxhvMnvGn7X5HcNvyvylm1Yl8hV
tmFdyjcD30z4ZuCb60/WWd4uvavf3FuPuH4jXujVE8ffGJzjfj7rF0Xrbmq4
4I68/jTi6TOvfmnkG3lxK+sC73XKLLWw/j7NbwTkN0zx54FLfilMkzw867af
XdHhqjKp60zyQgF5Icd/EVzycuG45MNZz63wyszBrb9bZpJPC8inOV4f+C2C
M++NvKLj3wFfAJx8Y55t1nOzD9RcvcnjUOK5h/5ctblunp/J/NW0ohmtq83b
qfUX2yZ5LdY9lz894dkWL+T1dXB869Zd9n//YrbPzzzSqqWv7Dy/2X6tW1kl
yS+xHlqq5tsTp3TNq7Nz/Iql5Yu+ODSvX475nIe/6XZ5mca5Wu+zlpLnYZ20
cdknj5bol9d3wfGjLskaUK5lnn5jXgX1UJ+H9dO7jgwbOanePsUDcLfvxKsC
F3oC6NF6bkA9V+kMoNP9BI6vinmEnwH8/Fv97gTqd5yH4wtgvOx7wL7/rV6W
gXoZ5+H4eRhPnOeuB84d50ddPlQtOdGKzVvt85+BulVz1K3y54sWhaJl8teJ
cC5ss+TtMd7aIm9PvD7fWZJ8OH7XHkc+nPQzXjs7nmvH2VdQIdIfRM8Y9IzP
/wvfC/qXfHVl5KuFbwa+BeGzgc9/yxuP/pe88WXIG8u+G/bd7RH6baxS7Ldx
e8H8akbU247zfHVEH4L7VzhfE3C+RG4Ncuu/i34haxT7hXwe5j/PifZFz5fh
fOk8AfMEmSdgHrfLHH8h+peIc/yHsHfSjxHQjxFELwXopSD8CeBPEP4E8Ef5
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxFnQX0FkUXxt//u12oGGAL2NjYIoqF3VgYiInd3WIiimJhotiKiY2KGIiK
YncXYreY3/PjGc93zrtn7js7Ozu7O3HjuXe6DTpwywParVZrn7rVipR25K3W
Th2t1vtpq7V13GpNUeY/yv9R9DXKX130RsrbQhddp/+vla3WLco7qWi1vlHe
tcr7W/+XyKms1TpR9fyp41/9PV7pO1mrtaXK9Ve6ldIxKtNP53ZS/a+r3qV1
3Qc6t7XObav0X10Tq8ypSpcrfP/z1db9ErVZR6pzt+jo0LGOzvXXdWNFbyb6
YJ0/UMdM+r+s6i2Unql6RovORZ8u+jjRjehzRO+pNryrNlT6/4/yt1Fd26sN
2yodp7xtVOe+KvO+yvTS+YGi3xSd6dwAlXtMaar0AOV/qPyZaZPavLmu69G0
Wivoms7KO1/36qd2radjZ53rqzIbK31Az/WX7vWQytQ6fhJ9q9JIxwRdu4HK
P670SR0bi35C6fFKj9XRRWVO0X2/1n17K/8j1XW06txNdT+n//1V5lmlm+v/
AOU/o/NHqPynKr+i8r/QMa/quIrvrjK7qMxCavNIldtf9GXUp/Kfq3xXlduw
8PuYoPwPdO3syrtI134neiHRN4reQeVfVfm2/p8r+mfRa+n8jbrmJaXtTupD
ol8U3SG6j9LuKjta1y6qex+v+nfXffrp2Er0zVWrdajqOUTHrCp3ja49TvnX
Kr1AzzdcRw/ln6bz3+peC4j+RufOVJm9VQcd/CnlzaZjqMr8qP8Liv5MZU7S
6T1U5hzVcbaO+ZX/pfJPVf6eyl9ZbZtLeZepbQ8qLTvcpl30vdcS/YTy11J9
l4q+WMcGqv9Z/f9VZQ7Vtc+LXlTplir/h/KOUvnP9H031fGb/q+n8s+ozMIq
s4bSC1XHBTo2V/lfdP4QlT9L+fspbzD9WeUf0P9Pda6X0lOUdxLjU/nj9f8b
5b+rujfU8a3oyapnuM7/qHpeU956Oj5T/sdKN9bxk+grVOYMlflWZVLV8SX3
0TFVxxeMEZW5UvW3dSyn/y3GvNIFdN32qqOX6POUXWb+Pheonodyf6+TlF5c
+53xPb9W3tO6xzCV665z3yv/AJVfRXlDlXeWjrVV5kn9/1HnNlWdPyg9UGVW
VN7pOj+Esa86hyr/VqWnKX8P5Q3Ssb7Kf6L8gSq/XxiPy+s+D6rcu4x/9beL
ao9NxuijucfrMJU/UOU/VvlZ9H+7zON7iPLzwnPO2yr7uehjlTdJ/fQryuj5
l1T6rfJPUv6zyv9e9MmiH6eMzm+u4y/d7wfV/72Oq5mnlL6ge/2p/I11/ddK
BzN2Ms8BZ4v+R/WcpfQ51bOh8qfSJ/X/PF13uMocomMexjB9WPlLqc77dG4u
5Y3ScYDOf6r8VZX/KONCeU+onhOUP035I5R3nOijdRyq59sw8Ty1rvKvVHq5
jl9VbrrqP1LpSqpnHP1D/9/SM62vY5roY3PPn8sp3VDHMrruLpXfUe3fg7KM
J9V9so65meOU3kx5Xb+w0qWUvqpy45TfScdK+n+1rn2e/q+xP4vyxqjcKsp/
gWt0vKhzD+lZFhG9utILVX486w/vXGvTk8xdunYhtfkSlVk0XHuxjgV1PK38
hZROVrmRKne+6EWULq77rCr6HeXfoGe5jv6gdHTla5dQepWOEaIXY17S0UP0
F7rnw2pnlfi5ZlJ6W+Rn+SL1O9tb6cEqf6HyFlf6ktLldbylczfqHr1E99Wz
rKJrb9K1y+r/Iyp3kdKeSq/UMz6rssvpGZ9X+5dR/mu8h/A+KX+F6llB6dqq
5xHlz5z4va0Svt38jAHlXS96CeUXiZ8RenbR9zJXU6/K91XaT/V0Cflr6/9y
SjdQOqvu+42eubvSsWrXDZXf85JK79c9zle5Qukjun4N5h2li6meU5W/rv7P
LXquxHRX+oby1xH9mOg5Et/rUaWz6ugjetR/c5ruuaLyRqt8T/1fR+lmfAv4
jMr8yUJqz8tqf2/R7yq/s8rfrXKr6/9sgabOSSqzmNI+atvluvYC+onS73SP
JXTdvarnEpVdWcdGOrdi5Xn7B52/qW1+Zm2+Xdv3XVP0Gqr/rnCvPko3afsd
dVP+Aonr+UnXr6a8+1X/iWrDNJWbR+Pi8cxjaiOlb+ncAirTR2UXidxPtlGZ
gXqnmyl9SX3pFuXvBb8E76VrVuZ9KJ2sOhfV0V/5v+h/d+WvpvRqld+NtYf1
Uf9n5nsq/Uj3GKt7naV7Liv6HtFncn/6i8psovJLKv8Z3fN39b2Buqaf8ibB
O7EGiH6H+U73nE/Hxvp/bHgHq+m4R/RgpQOUv4PqWRm+UmkvHRNEX6x7faTj
GNVxterfTvQg5b+seWMSa6fe2zNK/8z8zddQmipvwdjjeqLS7jq2UP1HhXGw
tI5nlbewjt117W66ZnOdf5kxGHkOYR7YA54TfpZnUbntRL8teqqu+0LH8fq/
n8rPS5+lTypvHh07q+xjmdfTDZTOnXtd3V3XfpR6fR6k9KvUa/K+SpcPY4f1
eskwDlizeof5mTVgmTCHs4YtrbRf2/P8isp/KPIa8Ebbczvz/vuxeYPPRb8e
m4f/mP6We/3fX/cdpPZtpPznRb+td7u08jfUu39P9BHwI3rna+naCZHX2u9S
r70HKz0+zAdr0m9Vz5yMA6WvqPwSOnZQvauG8cHa/WHbvATr+nOZeYzNlC6h
Mjsrf0d4JN17KZ3vrvuvG9b6hdTeiZnH+CZKv4q91n8HP6Nyh6ktV8GXKv8f
3qPKz81arzJzKd1PZS7m3SjdTmXvFL2w0plUPqLPqFwl+i+lq+kYVzpvAaVd
NK57Uw9zuMr+yTPpeLI0j7cw60lqeWcR3evu0nV0VfqYyie8H8av/vdVuqDS
R0vndVc6q+6bt31unNIz277fw6rzctU5n+p8QOX6KG8+pWN0/oEOyy2P6Nqu
fFc97w8qt6vO7aq0F3OFzj+nOi7WudlUZnulSyt/HeVPRH7SGIl0dNU1u+Qe
x1NYxzOP0RfgkUrfZ7re2zt6r/d1WEaaP/K33lD0+NDn6UP7K39QGAv36drV
4UGUPph5rlhF6UyV+eQ/VWeh8h+IXl7H/cqfS2U+Ufn5RK+rvMVFD9I476L8
j0W/2PacvKXOHcDaz1qs/MVir4/MaaybK4T5sL/6xAKiP1eZ/VT+XMa10ufb
XmeZ6/ZU/fOI/pS5NDa/sZXy19S184n+TPk7q8ysot8XfZXKXB6Zr+0Rm8dg
bnm69LtdVOkdpXnkNXSve0s/3waq7xp4TtEr6Jijch19ld5VmneeLrq/3vs1
+u4LKL2Z+VD5nZXeqmMV5BSlT+ieDesL/YQ1T+k/uvY6eFTRK9E3Sqdj1fZC
+b92uK7ZRXdqu63Ptf1++PZ76Jl2gTfRsZfogUo76zhffaPUNVshu6u//IvM
pvKdVOaXUOdCmcfEOLV5gPJ30HW/6f/duvebui4RX71w5nHxqMrspDIDVOZv
vnHmsTYBPkj0TsrfWWlb9+pAltf/u2izjm3hx+lPKvui3udNjJ04vBd0Eh3u
c7fmXlP2Yl7X+XM7zGNvIvrMDvOsn+v8oTp+F71d6bylVOdx6BRE/6w0q3z+
NaVbl5bJVhA9Vded3WGZbc3Ua9Z3auuupe/D2r1xaZ3HJ6JfUttGd/j/ZqV1
J58pf+fSPP4bqvMJHQMZC8p7SO2cI/Y6uouu3VH3awW+i3l1sJ5v3czz63up
+aC9w3oKb7N47HV3zcxj4g34/8z95anUfCz8AOvZHrnHylup+UF4hhV1zBuZ
B1hP5w4MvEE3xk9kngE+Az55gdhr5825+ZC1MvOfrK2snbcrrWPPX4fo2t3D
2govvGdYi29XP3ld18fqJ7We/1615QVkpdqy4z56Vz8hz7NWiv5NZZdUfXeq
XAVPovQele8aWeZiLh2re3aOPUdPCjzAbrl52yVVZvG25YueYbxPV7v3EL27
0t1Yj0QXzMWZx/erusfzpb/JUkqf1f+71J6eOj9A9GPIF0ov1HON0HG4/l+i
dBcdC+uavdTuM+BblL6idiyqvJuQ1xib8M/KOyfoQ9CVfKX/Z+naaUrPVLqN
jvn4frl1LRfr2sOCrgY9yyV6PzsgE6v+T1TmGJX/WOnRSjeBb1aZn/T/UtE/
Iuup/Lbo7VT+KtGDRe8q+ludO09lvlF6i/pko/RjvdtEz3yb7jlZ9Pk6/0KH
9Spnqw0vdlhnsp7Ova50JHNyY93AYNV5OrKt2tmtw/oU9CrPKz016GRWRxeS
Wzdzte6xRu66r0ut60HnM0npubrvjon1Qehf0MO8gHyh9r+mvEt13wUb66DQ
RV1aW2eF7mq07pXGnit/gAfRMULn5mWd1n1+1XUvir5eecep/Pyixyt/gvKv
yz1n36//1+r+1+gYonLXK91Dx1I696vKXCn6F8amjp7KG6Pym+ae/+9L3Xfp
w6/Bj8BvRO7H9G/6+atKjwz6tJXgYVhvlH+48g8o3LY3lS7SWHZGhv5c5U7S
fT9T+raed0/l78w7Dno/9Her5JatL1cbjlH+VNZv/tfmpeGpT1QdWyXWZ83O
HKSyU3SfJ0rzIYfQdl37u65dXGU6lL6rdLEOf2O+9St8C+aixGvPp+o/r9I3
Vcco1XeAyjQaLyvBuyv/HOUvKnqC6NNFXyl6sujhop8X/bjo00RvkPp520q3
V52PKP8k5a/buB+eL/p1lX9a9FmiN1H+k6LPFH1QaZ3Jv2rbRonz0WM8rvIP
Kz0eXheeQPR5ogfo2udEnyv6HeU/K3qY6PVS96s/kS107XjlD1H+Z3oPz3R4
DM6p9zN727zXFNqtdBn4w7Z5D3iarRqvv28qf1Lp+XUJpRPb5nO45pXSvNVy
SuePzYfAk10m+p0O61BuKZ2ur/ruTv3+59C7nTc2H8X126mdpejXVXbTxO+c
eWDjxjzkccrfv7Ru+2/kO5V5LzJ/dl3pvvkDOgnV+Qbt1HF96f5+p+q+RPlv
dfh/rOveVro07VQ9LytdhHWhdpkrdN0wlX+pw/PhqNr0hcr/Qvd4k/4oemji
d46udUjsb8G88HHlOi9SmQ9FT2H8ir629FjrB39Vum9+jT6k9P2/FP2J2vZE
h3V3D+u+9yg9HD6t7e/YScdhpdMOpR+o/KMdtgHMq/L3Kj2Kb8EcnFgO/yhy
/8SOsGvjPjBUZYarza90eH6/OvF8SPtGlR4rq6o9N6ee02bR97qp9Dv7WfnL
6l4TmVN597p2WJDx5hU9T2L6a52bA91mYXmHdz6b6jszd9+YXfRqlcfm1aV1
tu/Rh1uek2/R+UOYw0NfOhs9QmV97hjkkso63tuRTSrzeo+Jnr0yTzdB9ANq
x+ltn9ulMh94YGGeED7zRsZqmB9OEN1F9E/0KdE365nfF90FvXLu9zNz6v7z
KeMX3Zra9pnoeZR/BfMha4ryZ6usc149pOh451CZJHL5S/V/WG6ZomtqvTT3
OjfM1fTD09G15u5vs2aeh6FP43ukXlNuV9qtsZ71CKWXJ37PtO32zO2ZV+fu
Dnx1d3jFoBvnPa9beY15SO9qrsprzTrokJC76dupZR/05MNVvoycf3XLZVkj
5kotA1zT8jp0re71Hf1I//tXtgetWtg+xTy2NW1rO79/y/Pzq+H9M2+zPp6I
DqHxfccyxyOPB14dOZN5Hl6qitx+1kd47N9F39Ry+ekdlnUHqQ1/iD60sFwM
fWuQgTmPLNADGaZlO8j1sftAD52/Q/SPokfTj5HneSdKx+o9f93htbBrZXpt
xkvsMlcqf0zma7ujo1I7pzG3KH+ryjaYldWeUYn7AO/2oiBznd+yDnwX0R+o
PW9gfwh6B3Tg8N5v67pTlPdK27qSS5GplX6o8q8HvQomI2w0p4leqGWd575B
b3O10oN1/MW6rfQg9AWldTgn63w3lX+7bR37LC3bd04U/Znu+we8mc4dqXte
lbn85/AWeq59lP8LMmxtvfRU0TczVwf9zjux7UD78m14dv3fn/kau1XkMivr
mq68v8I2oH06PI9cBr9LHSq7dOVn+VVl34qtj91d59ZqLOd+yXpaWwafJvrl
tvXA6O6WjK3LRSaZM/G7RWe7dONxfaPKH6hnPIj3r/MH5H6H36S26RzJeGcs
VLb/HlDajnAU87Pyeyn/QPqZ8j+PrUM+tsP20NuVrqcyc0bWz9AP4fc+Yn0h
P/WYgn/rXFkv1Fvp9NxluuodXBpk5zkz8zDQF7Vs1ziCtQDZj3fZto1puOg3
27a1ZKrnYL4X41T0qaxBopdRPRdGtsONSdw/oKepzkOQf0vbBCm/oOq/LfG3
Rq+4OnoQxqO+12ex7TE87yex14XDOmynO4a5iH6o58FoP531XG04lH7Lc8S2
CVH+Vv2/IrR55sr26xNU/v4Ojx3scOQhF/zFOlzZbriG6uhbWlf5uP6/o5fx
K+8Mu0dlneklSq+urGMdVfnaBUP5NXTtV6IfE/2c8hdlThD9QmX7ZqY+9Xxl
XR86P8qgb0TvOKmy/rN3oLuFeoZX1r2er7RV2WY4Uf/vrKzLvgt9SGVd8/WV
9f7o4TesbJtA14rO9fvSevjjKs/XzHs7V54fmSd3or2F9fkbsR6WtmueIboP
+kR0TaJvrKwPvUnp6cqfTflDRS9dGLewuejlC2MRthC9UmEswZaie6rOK3Tt
bZXXbNbNHSq/k556vKfgA0rrXaEPq6wzPVzpJqzZkdt/RGXd8ZGMFeVvLvpk
0UdX1hcfw/jmeUWfKHov+EzRJ1CmtH5vfvi1ynzgebX5JPiluWvbRsEnxI15
R3jIx2rbcMEh/AlvpfztIr+fybSn5e/yHHo0pWcpryi9Zg8Q3aX0PL4rtrLS
vMIe3F/0npHf4UOV7RkP0x8r2wweV7pI6TG/J89b2RZyELYzte8+9c99RbfR
w4Rv9LPe+a/hW/wh+vfw/juVXoP51oMr2zb2oe8ov7/oIZX5Idb3HSvPZcxp
tP/gwvqugaLfz80r/p4YBwK9KbxQZpsy2BLacrfyN2wZr8K73YTxkBijQrmm
Mn1EaczDNchOShfWcanowY1lamSWA1W+QBcAj6P09NwyUZ5aXkaeOqhlLA33
7QhYFGSunZR/i9pzh+j1RV+nc3eKbil9KjF2BZ0C+JNHAl8B1gWeOcuMpYEH
3hHeqXL5U9Tm43Pzz0lmeXyE2nKU0qNz95kIOzZ6T9GHqPxJbdMbqZ69Y7dh
A9GdKs9Nx6jM3Ylp5qjNKrd5ycL6E+SCWvf4OTfv3aTWpSAjHNHyGsycypo8
Ue1YNTWNvZA1fFRYs/9bw9cqbR8h/xmV7w0fJvqf0jYH6PWQNURf2zYPBP9D
Hz5ZdN12nzxadLvtPn9sYd0mffvf0vYQrv1Q+V8iMyp/vcr2m35Kpyn/uzDn
zKoFsDP2crXlzrbxKrvr3ifmlmeLzLoU5KZEbf06t9yUptZBIWcdqfJ5Zn3I
eej2VeZAeA/RGxT+ttsxl0aWQaifOX6C0sOUTkFvhzzTsv7hCl13nNKPcss+
VWbsEDJmnRmTgzy+G3oB1Xljh/Feh9VeQ3/TO3gzNj4DHuMn7L06f4zq+w2+
qO0++bPoY9HDtcwXkA82DLzZcW3bVf9SmVNEXyb6oMx84lB0Hqllgk+Vt4ye
7bK25aZD9f9heEOVmR67/9H3/oRPE32J6AMzj9H3lf4a+159W7bpUQ/2POaG
49vGmB2Q2d77ttL5UvPynwc99jkqc6/+L6j825V+nXkuPE3517Y892P3GdOy
7nGY6Ad4zyp/n9IfM+uBz27bdnVr22sK7WOuHdK2nuif2HVe0/LcSXl0lIdk
tttOzYyJOyG0GX0+ctwNgX+AN7izMF5mZNv2x/0z26NfzbyeHKP8VVrWCYM9
eK5lvS74hxdEr64+8ZfKvqd0TGWbwnBwOIXb/q6++wmRdSKcm9S2zWhiyzoQ
bFj0ucfb1sHyHs6uTJ/ImAh2LmzQh2fGPDyQmXelzTcXtkONCHUurnf4CP0o
M2/O+O7RMu/J+Gb8Y/s4T/S4lnkj3gN2VfAvV7aNgcH2SHnmhVPCPMF8AV9K
Gfg07CbD29YFH6H7vaT098y2NvADT4axxPN9n3keWoD+qfO99b7+UN67Sm9k
DY+sH8dWclboGwfr/G1Kh2OzrmzvOKKwfQQ74xI6f4nO/YtsktomAk2fm5ux
rTLP6v0/0nad2F8ebbufcA5dfQfrgf4+HNs2ejf9St8v5vvq2lmUP7Tt/1zb
Dn1s4WBXxe4/T2W7zUvM25nrQU8+vu2xwLm9Ks+TzJfzVta1v1pah489lH4/
oe2xwLmLKr/bhSvbIMDVgAHq2dh2fQLYwMK6B2ys6P/Rfd3fMg4VmRQ77TJq
x4Mt20HGZtbFLct613YfwP7Ffau2y2Fro50Pie6Wuv5pKr975Wdnjj+/cB/b
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
           "]], Polygon3DBox[CompressedData["
1:eJw1nXf8V+P7x895j/N+n5WsrLJHsmWXTciIUGbJqEiLwjerMopkl1IilVUo
SkWUMiKyN9kiCqnI6vd6ep3fH/fjc+9zn/M+576v63W9ruuzxdk92/YoBUHw
eBQEFf3dPAmCA8MgaFYLgjvzIJihv1uWlVenvsq3Ulqkfjuo7lnl2ytNUf+2
Kn+ufD0LgleV364eBN9qfKC/zD9QdSXlG6vunmoQrFJ+rQZBsFJ/B6h9TFHX
LQ2CLdR3uuZ6S32bqu4PtR+jxV2s/D5K36v9cpVHRp5/gMobavwk5Rep7ozQ
daHKP2mec5W/QYvYWm37qnxc6HuaqXzDWOvV2LZKr6j/u+qzjdq2Vf+Wat9f
6Y3AdU8rP0jrO0X5MapboWf1WeRnsb/6H858uv/Ttbb91L6z5r5W/U9W+2Eq
76PyCJUvVvl39f1E97eO+ndQ/wPV3lztLVS/hebqoT4rlb9B/Tsof7/a/6f2
lbpec+WP1pjeWu8/Sk9q7U8o/c2z0pg+6n+X5rhE+X1Vt0TlH5X2U/4X1Z2v
/G1q76P8aM1/u/I7ad5PtZ5zlTpp/ga61jr6fRZrzHWa+3qle9RnrPoPU/9d
lf9MfRup3xlq66Ux6yu/kVJHlS9VeUPl39U1juD30pjuyndSalTyGn7lt9Ez
PFL5D5R/X/Otp+fRSfd2iMbvpfGHqX4v9f+f+vxDn5r7X6K6JbrOgSo3415V
9xfzKTUt+RmsZqzShipfoPJvyr/Gb6p8L9V9o/Eb6npddb2jdL39db23uUe1
n6v2c9S3serO4/7VvonyZ+r+E7Xfq/JUrX2c0o68/xo3Res/SmkPlY/Tc7tF
+UmaI1X/O3geyt+t/lurvY36T1Z7P823i9ovUt1qtXVQOSt+76dVPkPlusqj
VX5M5RkqP6DyOpr/c41/Vuu/SOsbqvku5ffQNT7TXLspPaG6y9V/V/X/n8p/
anyoe3hK/acrlZS/ke9T93+z5r9B+ddVN1D5hhr7uObrq/E7lv1NrdT4Y9Qn
VP+71aeJ+qxg/Wo7SvVD1f94/a2q/T61b6b2L3SdjZUfrjlStT2n/o8pv77y
X6j/7ZqzscYfo76Pqvyj2v/ge1H7Vyofo/t7XPON0xz9tLalmu9/+m1eV58D
NWZLjT9I49ur/zD17xn5Wkerz3F6Fmsrvav27ZUeVlsD9RvF91vx/R6pMbuq
rbXyNyv/tea/ne9Dqa662br+xapbR32u0LWOU/kJjX1I67lK6/kk8v101fU6
61p7KM1R26aqm6b8Y3wTKn+uOe7W/Kfr/qpqG6G6BzXfyxq/icqZxu+i/juw
n6qtkeqeUH5rrWGe8k1V973m+E3pKvV9T3WHaOxRfM9a284qz1b+IdWNVp+z
ld7R2LmR5yqVvKc30vrP1fr7qe1LrWdB5LWup/bman9P9edo7BC+Z7Xtprqn
A69xqvJH1/wu8U49z7emNFHt66g8Wfl3dL83sX6N7a35V6sc8z5q3htUvkx/
zy6+73/U5xGNqWnsUJU3UH656m4J/Y2+zt6hMTuofLjG3aT8ErVfyXxqn6f2
NkpDVW6p8gL6q99f/H58b+o7t+a+F+j+PtJ9vaTy3nxv7Ancb+TvqbPK56l8
rNK1ofu8rHwPpSvVdpLKX9T8PfVk/+JeuR+VL1S5q8pv535veX+v1vUz5U/U
b3yoym/xHqr91ZrX2ldjuil/VuL98T3WovYfNN92uv6hGjtE5TdrHn+Z+l/I
WaT2FZp7W7X3V/uims/e/mrvqfz3zKnyEJUvUv5Upemhz4h/NabC76nyY2q/
Vvn1M/8egyL/PivUr5Xm/1PtD6j9dtX/q/yLGpMwt65/mspnKP+m+ocav6vG
f60xe+peTko9P9dZoPblmu8gtf2uMRNUF2kNg8t+Z3l3SxrfXOO7qf5r9T9N
4z9V2/pqe13litr3Uvv3mmM/zd8+9XoeZC9X+208f823ieq2Sn0+cVZwZuzA
Wa1+Jys/SWkg50Pk681gjK4ZcJ7oz0q1j1d+qdq3VvlA9emh9l/1/la0njWq
H6Tr/a6/96i8hDNJ+Ye4B811Fd+A8tup7ia1zVE6NfI5yXn5utKZkX8Tfpuu
GrOsZpkE2eRZpfaRf0N+y/Zq/wrZi2+47D1gK+X31j1NUPsVartG6+mtclO1
PaPyiypHel77au1LtJ6Wel4bqu5P5dvyXrO/6hoDtf47+SaUb8b3xu+rdJry
F+gau2s8otWnVe9b7F8Hqa6n2rpHfjZzNH6LuuUG5If5vBOR62g7QH0ujLwH
sxdvjoyitjtSyzbIONsov2XNZx1n3qPKX6Qx36jtWKXjkYWUfg19hs5Q27dK
uq1gD+bXfE10T3uqfbzytyo/CvkUWUNpka4Z63kcp757acy7ul4DldupfJXm
uV79v1OfLQNfc4zG/qTybiovU3msyndpTG9de2uVt039fvNt8I3sp3fjUs2z
WOWRWsOqyHId8h0yCLIIezZ7N33uVfm8yGt/Wn0aa833ab7LlN9F7dsr31rp
BPYb9X1F68u13pMrlvm20/V6RP4teCd4N85S+V1kT6UjNeZflSdy1qncv2b5
4QeVmyi/MPcey15b1viHeYciv/uPF+841+X6DypdpfxmNcseyCATa5ZP+D34
Xd7QfENTy1bIWFsq34b9iW+t+F6W6f731vhfVXe/xizWPaxR+S+1X6f2Lwq9
g3sYwf6bev3cx6u55VNkO2S8psqPq3n+fTXmD/X5RPOvq/wnqrtbbYme1wmF
/P2++p8fue0opWPUvkzlnwO/I6P5PdRnA80/XnWXa22bqH2A2p5QOpGzQe1X
qP1f9X0p9x7IXjhZ7dcX++FaZctDvTX+c/0mlyD/Kt0ZWUaijT6PqX879f9H
Y1ur7gD1f039T1Xf05Rer/tM5Gxsr3voy1xKp1Qs8yD7/BS7fCl6kNYzQPMd
X/bz2EltnVRuWMiLF8eWOZE9x2vsao05AB1A7YM0x/3IeMhIRX9+64sS63Po
dffzbSGHIS+r/63qv5We7ylsm2qfoParI6/1bfXZUX0PVFqOrK10EPJeZNng
T825Le+M0sEqD1f5BM5QpVbI0yqfqPxvWnNV+V04JzT/HK3nVLV/q7aPVD4Z
GQf5WnWfKP9xzXnOaM7qi+qFrqjyYt3zFM64Qp5mr/mm5vn4jfmtX1T/49Xv
BGQD5ecjc6t9MXOzP9Rcvlb9N1X/DipXSj5jf1A+VP8GWk9zjb1R/TdW3Q3s
J6rbRPkN1d6iuPfb1b6tnt+lWt8GqrtObVfo9zqo7D3nF5WXqF8nla/XNbbg
XVUaor5fqtxL+avV/1i176n+2+tZ7aT5zlI+1rgHNX+fuvc39gt0xR/UJwj9
27Df/Z1aPm9T6CfcE/f2FHtOZB0dXf3M0Ppzf6WL1P8cTXOk2o/X+FXq20Ll
XTR3b113MOPV5w71naD2yzW+hep2VP4AXeOtwLoo30/3us+G9VX3tebrxR6k
vo+gg9SNG4AftOb953zVHFfyLqGjKr+m5u+Rchflf04t77Uq5MMNlFYGPjsG
5H6GPMsZSu2Uv4o9Vv13R4bS+jdnv2A/VP/x6v+z5rlT78IwpQfYz1PrO0cX
+sHv+nu/2sZVjZmwr7K/IsNORR/RfH24PzAIdEOV+6m8kcqDVG6m8v9U3lDl
m1W+tOZn/aDm+1Nzd0Z+0FxHsEeo7YLE7zvv/dhCPioX8vK9amuLvqS+h6q8
t+7nLY1/QfNvrnSW5jshteyFDLaH2oeo3LlsHeP62HIW8hYyzESN3Uzr66mx
a6vuf5p/E5UvVHktlfuq/JzmPEJrPVJptvI7162LhGrfSfl9Neen6PuFfvG0
yhfqWlVkfZUnZMYL3kSPbKDfvmbZrA37ueq/4nkpf6z6Z2ofVPNeey6vseqe
rFuW2F7lH8B8Musr6C1l9b+27r2tJxiGxu6p9v4qN9H6hmj9j2fW5z9AFlb/
62qWhU9G5lX9PK23r/KJrnVhbr0a/Zp75t4fiovzRuWRav+I+Xh/0Etyfy8j
eb/U/jTYDPiC8h+hF+t6H6p8jcqbaD23gR+p3FnjU/Y1jX8oM37yNnq5+k/T
3y1VXqg+u+sa96L3634eUd1fyn+nui8rfmdqKjfIjWetVeA3V9YsL3IGcxZ3
Rb7i29L1Fys/U/26qa2ifFeN3RmdLbAsg3y5BL1N4y4o+nyj9F3gNdyntsdj
6/fo+aM4z7X+wcpvqvlv0v0NU//Lqj4TORunKG3G+1Oy/lhVaq/x52u+K9X2
mdp2qFpHqKp8seb7WG1jOBs1f0u9v18Xe+sTufc99r/e6nM13y5yk+Z+mf1J
126oPq+hv/O76XkkKr+scke1j9Dcj6rPHRr7Z9k6JrgH+Ad1g9j71Od95b/i
+9H9rNbYw5ER+au+M+p+3w9T+Vn2NvUfUjHGA9aT67ovqe0YpRf4vnX9bhq3
VPMdrPZ5quvK+160n6/xryBb6j6eUd/n68bjWqt9LrKC0uGae7quMVz5mvq8
iPygPndp7NF6Pj/r/vdQuamuPatm/aC9xhxSs3yJbMt5s43aL9GYRRX/pn+A
D3FNzVdTW6TnFenvHJXHgh8he6r/zeq/rcqj1X9L9nS1f8Ja1H899X+D77tq
PPDI2OcH38KP6nuQyj3V9pnKdfVfrvnuU/lWZETld1P7BSrXi+vfFvm3RQZB
FumvPqvZj9HR1Oeems/GTcBH1Pdgtd+m9hspp8aRwZPBfMF+FyY+vznHp2k9
/2bGwyao/xtqa6459lZ5vMZ0UH4+eC5Yher6qf9eqttf+UfV3lH5X5Q/tOpn
dDDfkPq/ruufrOt9q/nOjvz+nscZrvxeau+CvqPrP6z5bor87ndRukL3t4/q
57NfsiZkiprPrhUav7XyG+ue31Pb+1XjkS0033Xs92ofrusdovKwivGPZbr/
N8Cg0U3RLXW9MzKfD3dr7j/Zb9gzNNcspYr6Tkef434r1ql4Z3h36PMw+01m
vP449cv1+yyMvNYm7DE140rgS2BUYFW/1H2WsqeupfbbatY111LaXflDNd8I
9b8T+UfrXYpcov69kTE19/dqv13lrbSGkbq/gzUmVzlRelB9D1P7aGwB6v+b
xrdk/1H5OuRc3V8T3dMH6vshe5Ly49G3K5ZRkVXHRe6PTIxsXFf54sB9rld5
aM26+T9giMp/EPnau3GmqnyT0kzlH9aYrdS2s65/hcYO1Niluv6ZifECcIN7
Vd5F7Veq/Rq1L1P57sj9sWlg21hbaQfNV0P+4FtX//sLPPUv3d+oyOPB9MH2
OTc4P9hjv6xbJkI2aqTyRJXjuvfancF8lf9J8w3n2SF76frfqHyTyptpjcO0
1oEq/13gu6t0vUsznxdjNfZf9b9G5bFqOzmyvn2orvch3476jFafj1X/pvLN
lDqrvAEyCedZ1faAjyL3bco3ofYBNeuq6NNgT9dq/n8rvgbX2iM1HggueI+u
d0Hm+e/R2L/Rf1T+S+W71L+75r+6Zt0VeQfs6W3wLeUBNC5HFlX5ajBpzTlY
9zuH/al417qhr2aW349XuQH7k64zAsyZM5pvo2asA30X28IN6h9Vre9vl/o3
47d7N/D+gX0Le1d/3v/Iciby5jnodMhLGj+w4vPyTq3nEdV9ga6vMU8pf6jm
/Eltm2vc1Nx7JHvlCZHtZ/Tnt56tVNW93Fwz9hQhLyt/q9LzyL/oC5HPnh8q
xoDAgn5Cpwtcdz86AjI+ugOYOzpY5LV+XDaGu5D3t2r9ZSj7Jc+zYgwfLP9n
lUdV/Qx5lms0ZprKUxmjuXZHPglsSwSvaqU+Ewp8/x/d63Bk9Kp1sheL9/e2
wn4B9owMjSx9F7o5+KfGD1LfH/gW9Dz+4hxWe6bUSn1OUPsMzf+45r82tjyD
vHOj+v2o/Ca5f9/f6v69u/L9qf+nyNMav7Gu1xLdVPV3qO8z+rtX1d8o9qbW
mn9S8X1eGvsb41trENh+wG/Ib3l+yd/jG5nv7xvlE+SRurG49dT/K11vo9zy
FmtD/i2p7mVdfz3w0sjfLd8vOsrPxX4xvsBHsIUt03pbl4xdz9Zc7dSeF/e/
jcbOqVt276DyGt4x1d2n9krFNqtc4+9FnlT+N/Qp/Z3M3sgZofy96j+0aswC
7IL9mu/nVpWXKf8zNqKSsfg54OORZfU2JWOQ6OvoKm1L1t931DM7Ed2M9zQ3
Zs/ZxZqGar7Zqe2v2GGfLfBusJOTSrY3Y/9sq3K7kvHtVrHLsf421PObovH3
Fuf/1qnxge3U/lrZ9mR0HHSdm3XdcZp/s9jy+rDA50Wua7wG3qV0H3uexkxC
P+CMLfSfd5EdA9tjVmrsY+pbBsOP/N3y/fINBJpvmPo/o+x6hfz2cd3yzrGq
O0z9Z6EnKb9aY7apWU5CXjpDdUdE/p74/peGnu9S3dNOuv7Z4I+6l/dS28ux
mw/EHqf3bVrFax4Y216xc4G//67+jyp9r3xjXetJ9Z8LPqq+f7PnIStrzOXI
K7r2Y+CRnFeBbUwr6tbHebenas6NVH4RnatsGwq2FORjZOVE5d2Vfz72+co5
O0nzna26LbS+11W3m+rGRP6esTlje56W2h6LXfZq9X9Fc7Yo2+aD7eeWzLoW
OtdH6vuM5u/Odq/+E9X/KLU/zHmhuj6x93P0y5HFN/8gepLKH6s8Irccizx7
JGdGzfZRbIXNuR/kcz2vOtgN3w14T255hXcfeegIXe+BQh7ppbmvRCZV/oHQ
mCf7USO1n6b+f+ReJ+vlm/pJdRH4lMqn6Jmernw9t/6AHrE2+pzGr9D4luqz
K3yAzNgeGN+KzDZ2bO0n6Hl8qvybmn8e54tSx7r1CvQL6kaiS+p+TtDa3lG/
6brWsJptFeDzcBE665luVLaNb4Cud5Wusarie9qTb1flZ1R+QuVBKr8MvqH1
NNKc12ruq1X+veLn2VLtp6n8vMrHqP0DtW+r64a61gEqn6L8+7HvZWPkMK3n
j7qxFmTYdcFDtJ7NtZ5j1f9DjW+n+Z7TfK25B5WbKh0W2pY6XON7qP0dnrfq
flBbT+QHzXWA2p/LbePBprGM7xfdQHXzqj4Dh6lvL+xxul47jf8uMR+G82uz
kvkjidY7V/2PKvSzu3jmanuf58M7UrOtqBnyrco3Yg8umYswEzwu89l4C+2Z
92j2as6su9irwe8L/b194v0D3e9m1V3MN4tOUPw+2GLBz38t+u+ga92mtGXJ
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
c+sncLDhYuPfi68uMbLgn/0fG9X1hw==
           "]], Polygon3DBox[CompressedData["
1:eJwl1nmQz3Ucx/Ev8tvdH2IYFbVFmpKULsJ26FLOdS27IqV7lKbJdC0N6SCi
qKw7KsadLLWh1Uwp1VRyJEcld47SITU6Hu/5/vGa3/f9/L7e78/n8/1cv8YD
H+wxuGqSJKOoOg2olSS7c5Pk1UySnFYlSZ7NJkkJTfE8OydJhuNH8pLkAWwh
Ngcbjf2LvYv9jDUSr6GzxN1rJEmRBor5ng6mfj98Gt/PGhyB/SJ3HfYfNknb
n2AXii/hnStvgried8OwUdTQ82RsBG8XnqXYQWwB73K8pngFHcEm8FRi+eKO
2rnLGDuIJ9I5chdhbTw/Jncwf2u+ptjlfFuwb6k1X3PawHel+FzjeZnnExrK
Vwv/Qjuv10ySJ+S/o04J304aafz38Q3jm8c3n85XaxPWw/NiGundoPh+8jt7
Pua7bFevQnwnPhh7jW8WNZW7WM0K7GL1a/MtEX/BV+j9mzTEu7vFLajA83a+
HdRG7ufYcOxkvi/lvqGND6lPzD/PD9hH4rnGUYb15BuFt5DbFFsrXiY+YYxr
xeU0k68XPhq/mK8R9oF4qfhXvlXii/Ch4mE56VoqxuboS2u+v7U515iPaXch
bRRvoIHYIvHZcsfwDcXuOcn3xRphz2CvY39gLdW6FFup/iq63BxNx5pg4/jG
0wD9vAErj+8i7szXge+wvlzN96+4gXrl1XwXnkPaOSquF2tX7kHxHzRbv/7E
31Kjmbw98ouMaXOsU7wddgDri22PfYRdh7XB9qmTLz6TrscmY0342omvpfaR
q+0nYx7Fk7wr4rkJby++ib6PvYhVxfJ4T2Bv61M18RnUXe6pVI6diO9pfbTS
7jWx9nhviLmQX1edF7Ensc7YS9jpWFtxAd2IVaFcbWyNMag3Qb2/xM/FnsHm
8d8vbwg2XRvjsPHUQ15HvAV2FW+pb3hh1KKavDXoI/XyxB2oUE633HTPLpfX
3/t+9K32nubb5rclvku9RXyLqUReX54R3u8V76HbYr6z6dm1Vvwx3YK1xfbL
XRLzRn2xm6lTjJ328s/n2UJdPH+pz2V4T55Sbbwht6rfanRHrEe+fL7pfPv5
bsf2Yr2xLdhUrAhbw98pk/Yv+rkx9jReG69DPbE+fiuoI98uvlLsU74XzNtY
6/M8/Fffb6y4WO4snnuxA/pUEGOl1eIlOek5+Hacu/SK599jHdF29btTtzi3
4pzSxjq/DdTr4n0Nely9nVgBtk+tvTnp3n4k8mK/xRnHd7a6Zep3xZ7CpmTS
M/lFrDAv7X+M40e6lWcsNtA4Bqr3Oe8FWJmxHBMPoZe8myxere3v5ByXX6jd
VeJB+Aqeh2kc3/3iVXHW8ZR538tzEVXGeYpNxYo9l0SbsZfUm5FJ52qi/p1C
K8VnqvcT9pa4bexh8e6c9Mx7UO7MOJu090+cdXQVzyHe9lil+H26DFuuP3W0
0VzNSrnl4ok0nq8Z9nvcX+JC3pF8UzPpHhut1oJsuu4W87yH1xe/oP9nGcdS
3jVxjsl7GbsR+4sq8HHifLwok961cee+E+e1PrfiWcnzt9wreVrSes9f5aR3
2lG+VnH/iDfmpPfDb1iB3D763Bd7Xs3GPNNqputzXdzJ1A87yvdUnLt8M7Q7
QG6vbHpOPcTziHc7eNbGvMidocbtMRexD+Q/Gp7c9Dxqhl2L1Rdvk1eixv5Y
z1i7TPr/IP4n3BLfncbEfwb8oZg/nivoG/3YnJOeM01ijcd6U29MbnoeHfft
e2PTxVvlFauxT61rsLrYJqwXtjubrplYO1/r83Btb4j1xTeFbz1fId+2WEN4
KXYpZbET8e34ZsSdxbdbu63i/wY2CLsT24NdEed//GfIpPsy9mcP7FS+q8WH
tDkR6xprQ7+nuodOll+L5ouXZNM1G2t3WezZ2G/ZNGcWVhrnTMwPVhnfDdtF
z8ptqI2u3tfOpPf/HmOYSb21+Zn6n1J/nluz6bwe53uCdqq3Mpve44vUqsDq
iOvHGpLb0Pv1cX+rNQv/jm8e30K+6uJ/8BV8Vfi2xD0lviu+vbheXtr+bX5P
ibn0nO95c5zvfKdj3eJOzaT/Tw9j/wPM7XA0
           "]], 
          Polygon3DBox[{{2498, 1612, 1692, 3367, 2396, 2397}, {2389, 2388, 
           3365, 1687, 1688, 3366}}]},
         Annotation[#, "Charting`Private`Tag$101002#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0r1LlWEYx/FLPb5kWS5BNFRKQ5CaWGbJOdpJsaGIckwwtOhdJYgwPGN1
iqChIf8CG8QxJ82Goq2lNy1fj2ENEUQtUUN9Hhxuft/vdV/3/dxcPDX9Q92D
RRHxzNpTGpHwbCqiF+zaEFHNv/IavBN/x7W4Aec2RfzkGdykdkJmZY88JU9b
V/A5eUtekvfkH2cG8Ci+445//Am+i4u8YRLncQl+ib9VRtQXRxzib3mFrOMt
cn9ZxDu1Bn4Av8eNuBl/wFN6mnirnOVVMlvunNoc78DN+CNOedO0/Raelp+S
ucjDPCMPunNerTX5Nl7AaTxdEdFmf5HPyDa1I3KJd7m/nS/jYziLV3Cpbz3X
08GzsqC2VR7lY/be8N3mMopf4O34Pn6Kq3EOj+FB+Vhek3l5UQ7LftlnXcYn
5Rn527l2fBz/wo04jUfM+gevx683RrwqidiBM+ae8x/s864tfE3PCH9k/7Pa
ZrVhvoqr8E1cwK6LVb03+EO9rowC/2Jm19Uqk7vwEPaE+Gt+484N8Af6aczr
v8r3JnO1ypP/hy9gR+MCTmnM61eKOf3n1W5zGCua+jiNZXwWG21MOLPNgc7i
9f/9PyHyWGk=
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwV0DdOA1EUQNFnkkTaA2yAnMEVEkiUNIQOFgACbEzYAaEn9OTMDrAJNSwB
SlockLA4U1y9/+99o9FM++Ly9FIqIhbQ1hiRaY7I4qcposPMt0ac8MWWiBWs
ok/LawfaqfbkHHwK/docf4gzbYdb13Moap3mOV/i1/BnbwYD2rN2oRXMGu2T
n8Kg1sVdat/Ovdw7NriSe8bulVY2s8n7UOa79YK9a23IfcJ9EsPO4/wRbrQX
rtYzdRjR5vlj3Gq73Ka+hYrWY97xFT6Hqr1ZjGpv2r32atZrX3yDOabtmQ/a
fvL/+A9s2/tNvsd81NLO//g/OJI=
       "]], 
      Line3DBox[{2337, 1256, 2811, 670, 3527, 2622, 2521, 2623, 959, 3017, 
       1084, 2624, 3484, 2484, 2797, 820, 2812, 671, 1453, 1257, 3430, 2625, 
       961, 3018, 1087}], Line3DBox[CompressedData["
1:eJwVzMsuQ2EYheGvkaZ2y5gpc0ZtMTdwCFFEG9IGF6BTpwHqNnAXuAoURRxL
wtjhBjwdvFnrX++398B6fX4jFRFlDCYRk9mIVC4ij6PeiCFM2R65aXlp37Nd
yQtkeiKeuFmuz76Pb32Xm5Fd8pSf04+5Z72kX9tv0ES3f3xyL9wiV7AV8dPp
9lss6GnbptstLHlvy1ffZOwtHLgb79zrCffGVdwN2xoYsZe9J2SbW9H77Yf4
1ZeRcKMYQ9X7hHt3W9PvbQ+4Q9b/v7gPbo07k3+yaGthVc+5O7fvuP0HXoUv
8Q==
       "]], Line3DBox[CompressedData["
1:eJwVzkdKQ2EUBtCriGjyYlmCxN5nxiUYSyTgQBACURQUEtCpsQws29CdONQF
uAFLYq8jR54MLufyfff9vL5ytVhpiYiSme6MqCURe6mIJB2xy8tMxKyZ0i3L
flmW//Bc3ut+0t7Db5Z0XzzTFdxP2I9ZladY4RHH5VduPrkm++CSfIyLvNG9
21d1b+z2/ijn5Q3zau9w98IFjvCQO+7buc0Ldzkz3PxO9swV+RNP5V3eHLJn
2GBRV+eJbpAHvtmStXGTNQ7I87x282gvyB+YeKOfadZ1983/0t1xzn2WM/Jb
syFvla3zz/2++QedRzBe
       "]], Line3DBox[CompressedData["
1:eJwN0Mkuw1EYhvHvb1ExtOZpRd2BeWrrGtSwtJBISIwJlZC00iJhhxtwFVyE
C2Br6QLM42/x5vnO837nLE52Zbu4lUTEsgw3RFw2R1zLlSTpiFQmYoi/dX7B
1caIV3zWtXMj5g58wzXdPt8vc00Ro1wVS3waD7Bsd4wfsHMj69y7cyc/jl14
zn+YN3SfWHR3Ah/4mvmQz+ARnuCkbh6/sAW/sds7T/anzD3mH9y0/4v3/IK9
afMi/uGOrsRnZcb5lC9zrVjBijdy/B0O2qn3L7t8SC+X1/XhhS7h9qROltwv
6B75M3OVa8MaHtuf1f0DHUIs7A==
       "]], Line3DBox[CompressedData["
1:eJwVz0kyQwEUheGrieQJSqb6YAN2oEt0kYFJmFoAIyWpoooqYybCAjCwA300
wcQGbIElmPgy+Ovc+5/7kvfym9trW20RUcFMEnHTE3GLTF/EtP3OfI+d7ohB
+dMbMSBndUNyGFXdLv9ofsCcLmXvQifq3Dw3Yb5Azf0oN4ICPyYv+RL2dA37
E4q6fu/RznfgjzvDAn+djfjGif0Ux/h1s6h7Nr9g329NcV+ouF3SrcsNHOiq
/CSW+Vf3NfObXLE35TsS/3/odtycR6n1HfKq9aw80n3KD6zqcu4zugRpnPNl
/h8GZClj
       "]], Line3DBox[CompressedData["
1:eJwVzksug3EUhvHTIaWJWoGJhIEBE11ApxISA6GTb+RWVkJvJkTDmFqAu6IS
EiYkFaVsQGzBr4Mn5z3P+z9fvpFkc24jFRGzPfoiHgcilgcjTuUn+Rkv2OqP
6KQjjnRnug95jB/Htm6RP8a5bo/bxZD9wj6PUXkFJW+/3F5yn+aEd7/8DMq6
uv1Kt28ucavI4ppbwCu/Zr+R3+Q23lFxm+cbaOq6vj3JT6GqO+Fv+QI63Lr9
rvcPchfpTETC1bz9cXuv+zandX98ztzRHZot3YFZ4IsYxgOX4B/eszPz
       "]], Line3DBox[CompressedData["
1:eJwVzktKgmEchfF/w0wtbAUNzKDCBKtVhKFSUeElalpzy2HZbQGB4LDLTgKF
SihIiFpAtIZ+Dh7Oe57zvh/f3MFJ+XgiIqpoTkb0khHTqYgZzKYjjmSD/+Z/
cJuIWJdP/Jqs24pyFTe2Jv+IL71mG8m2/in39ZzzGa7dLXAr2OPz8o8v4cr2
ob9j19bgTjHUd/SuTOlpZPzjodzmX/k3XHq/wT1gWd+yLcoldGz3fBZV/o5L
OCcxhQr3Mna+W9cv3F/QcyjbsvKXn5fntoHso2Sr8S0865v6Pzu0KVs=
       "]], Line3DBox[CompressedData["
1:eJwVzjlSQmEUhNGLmQJGGGBm5hpAxciYYgmOGbAZEdTEWRN1FyKD0w4UZFAC
3IGH4Kvu293/q7eyXSmVExFRxM58xGcqIpuOSC1GfPE99HG44E5G3OueZjs+
J8+jpgv7C76pO6dnyNg+u3exypdxZNv3tiXr0TW7qbyIuu7a3dZd0YRvXtKO
ew/f/LJdWj7ghxih4d2W/AHd2c531+UbONY9yl/k+xjLKu5X/of/xQRV2Ynt
0Ns33YAW5H/yTXqqu6Pvuls65x9u6JL+Q3aAf0UYNNk=
       "]], Line3DBox[CompressedData["
1:eJwVz6lWwlEQB+DxIIqo2CxajPAImtBgJxpNbgePylvAK4B7ARd4EJNbJ6nI
rs3gR/jOnfnNvfOHtd3jQnEqIgrszUV0FyJWFiMymYieuk8iHVHlcz6ibPbl
/CBvNi2vkXD/Tn9Pgzon7j7buU9WfcqFu+vebnCu3nE+yZPqS771XTq05XVn
gxc7DhjY+8eq2ZJvDtUjZry9Ylteoe9Nj02zWfk1LfmrHYeM5Wf6N/WP+pec
vsSNu0NvRwzYmnxDnpLf0tS3eJz8f7/hwbls/m7XEf/t2zTn
       "]], Line3DBox[CompressedData["
1:eJwV0EkuBGEYBuDPwqJHQ0SkEwsn4ADmocOybWkLe+0MhsTKcApEDKGqI4gr
sHWPLrPG04sn7/e9/19JVY2sby43uiKizkYuYqsYcZyP6C9EjHNTihjlRLdi
z8lTMvO+/lW2mPdcXn/Gov6Ad/0b287O9QPmCSa5sCfuFOQVU7ppLs2r8slZ
0XzNp/2LD2r6FiX9oH2GWTL7nkzkkJwjdW+MVFe3l2WTJd0hP7pvFrxfj/6W
Yf0RO7pd7nSVzvd17nFvX5PP7vSaH/i1/9Gm6pnMWZ/+kdTeJKG77H/KNi/+
dYN/M+Y2bw==
       "]], Line3DBox[CompressedData["
1:eJwNzLsugwEYh/HXiFpaVVWnchdcgENr6dYJLWvrfF4ljA69CLFIk4pBkBpI
JVi5D0bxG5483/f83+/LV+qlWldElHHUHfHRE/GXiHjnVl9EFYf6am/EpPaA
CTT0BXcHtiLntXuM49K24n7fdspvWo47vKe17WOe7zCKgu939Xn+tY1otxhG
1Xc7tmn9G69aVnvhbT3HGe9DfGEvYUuf86+s1sQgzvWKu03bMme0GwzgzLah
P3tO29p8wuvaEn/a09o1+jHr32u2Gf6xpbQrJLHovm6b0r/wpKW0Rz52/w8T
3y0f
       "]], Line3DBox[CompressedData["
1:eJwNzkkuRGEYRuHXRG8Hukr0vY0oihUYYMQK9JRuYiBsgkVUFEkJCcKAkDAW
MWToGbw5/3e+5t7C/EppuS5JUQ6aks/mpNCSfOBPQ7LPTXrfy4SctSVzrcke
P4vj3J3c1Cdl7sjuu7ob33CXq+ndeo9Jyc4ON4N/bo1yNRmRJTvbet+++6ru
Ur/gBR6bP8dhdScO4UljsmV+Wm9QfS0DcuruoplNvQXs566k6j82uGfvDv4J
D3Gdu9Srqvuk6N4aN4W/bvVyFemRVf7L/z16t9t9wLK5f1piLgk=
       "]], Line3DBox[CompressedData["
1:eJwVzUdOQmEUBtDr0LYI+0BHuBN7w8JMQdyBDm0IiBTZhB1L4iaMiZqQYOIu
dCLnDU4ufN+9/xvK7M3keyIiTaM34mgg4piJ/ogml7QHI+q66b6IHzL6Z9mW
WZNvmJt8657kU1TldbcNxqlR5UL+YLY4sNdxs+42TUW3Zv7J52jr8vZ2Ode9
yirJG4xxzx1l3Y15yyg5srzZL+m2/d7hy3uzskdWfaeoWzZX+NR15Nf2rjjT
lZPvMkKJIgX5pL19PtwsuV3kVD5v/soXzHddihP5i6yQvMkw4f+/nUO6/4I3
1Q==
       "]], Line3DBox[CompressedData["
1:eJwVzUkyg1EUBtBrqFuEmXZirF+CKubaaPMHm9EkkkiCFWgSCQasgqJKzxIY
OP/g1K33ffe91zOfTGfbImKOWnvESWfEKUMcc98dMUZVd+N8y3dHRK4roiVP
zIpu08zypZuSN7m2e6SrmjUGqaQZZXnLfLY3yad7G+6vU9KtmX/yWT50O3a3
KepGZY+UnQdocsWhrm426GeLO3vDFHSJc453783IGqz6J6/LmCu86SbkdS7t
HuiKZom+9A8K7MsvzCd747y6t+z+Enu6BfNXvmi+6M7tnrGrG5E/kHfuTf9I
3+PH3j/PoD7R
       "]], 
      Line3DBox[{3021, 967, 2816, 828, 3520, 2799, 2485, 2632, 1093, 3020, 
       965, 2631, 3431, 3358, 2630, 674, 2815, 826, 1313, 1312, 3583, 2629, 
       1090, 3019, 963}], 
      Line3DBox[{1258, 1454, 1259, 2814, 673, 3528, 2627, 736, 2628, 2083}], 
      Line3DBox[{2158, 2626, 672, 2798, 3519, 823, 2813, 1258}]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/G3hDMwKBl06RYMSjcoGSz+A/+A8mPBHcqJ5S7yc8Mghwnl
xynKsYiRyY+RssmoLEblYXj1fL5fr299vqnBif5sRUQMyXtVxGiCV0c04zCO
4Ued8AwfxxRmMItfOIk5bMNP387wKf6D05jHZX0HL/Ac/uIsruCaLc1X+RxW
1kQc6vJ8XdeFG1jAWtuRbZ4Xdd24gwv//6Kvty/yfV0vHuASftsabMdS0jXi
o+6Mn/AmOZWyO4lPtite4i1yLrfuTX0rv+MX2C6Xcu/esnXyB17GtFzrtr3/
rBvAFyxij+3GtstfdSP4hnvYZ/sDfBQ4aw==
       "]], Line3DBox[CompressedData["
1:eJwV0MsuQ1EUBuDVREtFSwRzj2EqJgYdIAadGBhJI0XEQ7jEJcXcjBdwCSHE
daKtSNwiwSuYIr49+PKf/a+9z9k5/ZMzo9VMREzwno3ItkXkGG6NOOOUh0LE
lLzkihI3aa6/lhXuqTPCo74pG0zzzAs7+nH5xitVPnjSf8oyf779yw/5fERX
MaJdXlifU/TcretMM+50t1S8o8e6lz4auox99XQmF9Ehh/iyr5A6FlmixLd+
RS4z6x6rco2afkxusM6cWU1uUmabLeb1+zTtP5ADHHHIQvpv+mN5wiB7zuzS
4q7/pPo29g==
       "]], 
      Line3DBox[{8, 1324, 364, 1449, 3320, 23, 917, 390, 1454, 38, 920, 408, 
       2646, 1456, 53, 2345, 426, 68, 2360, 441, 83, 2375, 98, 2392, 2393, 
       113, 2405, 128, 2410, 143, 601, 2804, 158, 2421, 603, 173, 1331, 3216, 
       607, 894, 188, 2448, 1333, 611, 895, 203, 2462, 1339, 615, 1317, 218}],
       Line3DBox[CompressedData["
1:eJwVzj0vg1EchvG/oUoEg6VrjYyMjHwAX0BiqYk2sRAWBgNjDYZ6CcFAvCTi
JenAyGBgQ+iESU1qwe8MV6773PfJ85z82OTIRFNEjKKWiVjNRhSaI94wjs2W
iN/2iHe5YivyJ0oo6Ou8oZ/mb6zrZriBLf08L+r+eAHbusCj72Y7IpZ0s/Iy
z3HG9sqttrLuRV7hGrfZ9tJb5Ep6I6/xR9rc77TX5Z30Rt7lovtfcpetwYfp
nXzEU7YfOWfbx7kuz3f6C/lA7sYxrpzL+h75Wj7hXtzIfXzLp9yPM/funQfk
B77kQVT1Of970g05P3OVh/EPo6U9HA==
       "]], 
      Line3DBox[{1506, 1080, 2079, 1081, 3556, 1769, 1092, 2085, 1093, 1777, 
       1104, 2090, 3558, 1105, 1785, 1116, 3464, 2095, 1117, 1793, 1130, 3466,
        2099, 1131, 1799, 3493, 1141, 2102, 1142, 1804, 3497, 1153, 2108, 
       1154, 3567, 1808, 1165, 2114, 1166, 3569, 1812, 1175, 2120, 3570, 1176,
        1817, 1188, 2129, 3572, 1189, 1827, 1200, 3477, 2135, 1201, 1836, 
       1212, 3479, 2141, 1213, 1845, 3512, 1224, 2147, 1225, 1854, 3518, 1236,
        2153, 1237, 1863}], Line3DBox[CompressedData["
1:eJwVzjsvg2EYBuCnpbShkjJQx/g9BgmDQSKpSESkmoj4QUYmA9YKEdpJKRWn
RBcWh8VhwfUNV+73ufOeJhcrM2upiCjRzkRksxEH5Jjqjjhk17oqL/IRK/KU
M6apU9XX5CqNZB+zNPVNeUmZO+7Z0s/JRx6o8ERL35bzdNGTi+il0BeRl8f+
cUTBekDXnyR1XY2y84PmIYo0dGn7zuWweYRRrs2d+is5Zh5nghtzRt+SKXOa
Dvbcu+A/LzyzzitvlPjgnQ0+ubX/Sy7xwzebnOh/ZdH9f3KZHet9tpO3vfUP
DTI46Q==
       "]], Line3DBox[CompressedData["
1:eJwVz7ErxGEcx/Hvid+dcCWbm66U6SYlKUkppZQopTCYTIzCPyCDwW41mWyy
ucHCeqJzw2G5W3TK8JPyeoZ3n8/3/TxPz/NUdw/W9gsRsY2pLGIHV6WIUcwX
I35xp+eyORJRs76FC/M0vnHL9+Qkv4lzvYYuOqhyGzjTJ/Bi/6f8QIVfx6l+
w1fkOMa4VZTL7nB/D0PmFQxzXXMH/eY955blu7mNY/PfQMQS92Yu2d+UP9wi
95rcYETGF+UXv8Bnei4bzj97QyO939ocd6Jfpn/qT/pjer+1WfMDf5T26nV5
n/5orc7PcLn7DrmWXtD7ELjGP1i9Nmo=
       "]], 
      Line3DBox[{1588, 1063, 2148, 1226, 3579, 1582, 1053, 2142, 1214, 3577, 
       1576, 1043, 2136, 3575, 1202, 1570, 1033, 2130, 3573, 1190, 1564, 1023,
        3469, 2121, 1177, 1556, 1015, 3467, 2115, 1167, 1548, 3502, 1007, 
       2109, 1155, 1541, 3498, 999, 2103, 1143, 3564, 1534, 993, 2100, 1132, 
       3562, 1527, 985, 2096, 3561, 1118, 1521, 977, 2091, 3559, 1106, 1515, 
       969, 3456, 2086, 1094, 1509, 959, 2080, 1082, 1498, 3480, 951, 2074, 
       1070, 1759}], Line3DBox[CompressedData["
1:eJwVzz0oxAEcxvGfdEfqDMpokMlkMimzMEgGgzpdGSyUkkGdvAzKa9F5Sacb
lJIrqwElpI4UNykMMt0kw218DN++z+95/v3/d62ZycGJmohIozMZsVMXkcMY
yu6m+oj3VESHvK3bQgYld1bfzpvuDaRx7W7DqryCETx57lxXlFu43zv7sK7v
5TPdMjdzmWsbI174Gce6H07xI4ftgUs41FU4ySfedSff4gY53Sc3eP43EXEl
X+ICa7YZz7/JVdui37WAYSzZpm1H8rdtjrMYwr1+1l6QK7ZueV434J6S8/yl
P9B1/f9P9zjv86t+T1/0zVP06EZtu/zBf0/0OXY=
       "]], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G3gWM4tyibKMOdIt2gRClRV0qdlFLXlVVRFGKRzWAwmCj+
CANiM/gbFKW4U+5u4ZQQj+/w7PXr8/l++vYtrc6ttERECSNtEWV0tUdMpSJ+
8YOHdMSwvoQjeQxNXOs/6IB+EYd8HnXU0K9bwAGfw73zVVpBj34e+/y5vpdG
R8Sft7v1RWQ6Iz7lJjLyLNK6hlxHSl52d4ZW5BfsyCEXsCtf4U13Sb9aI6b1
N/wF8sl5PNm36bt90j7ED+JVv0k3kvdsE7Ycv6fP0nWsoWobt90l3/EfDf6E
HuPRdqsf1W3Jz/TMnVN84x8QcjZG
       "]], Line3DBox[CompressedData["
1:eJwVzT0oxHEcx/HvlYdLKaPBQ54mk0kYMHAbEgYMnDwMuhst1Ok8pEjdok5S
EgvZrFZhsVpMynSTLl2Sl+Hd+/P9fH79/23p7GQmERFL6K2JWEtGrGIFb+4z
/qmP6JHT8iIW8OoucsXWLc/Lc5jFt+5RdyJ38QxPYwpl24OuILfyBI/jWD/G
97ojbuQUj+LQNsK3un1u4DvdsDyEQVzq9jjJN7YBuR99ONXluaRP/H+j1lvU
oeC+5hdbpTpiV95BFZ51B/Yr+cu2zTn86p5sOb5wl2xbvIm8vqzfwLn709bp
3x1oR0af5Xd90dsWuRlNWLat8wf/Af96NYA=
       "]], 
      Line3DBox[{356, 1241, 354, 2806, 619, 384, 2812, 625, 402, 2819, 631, 
       2820, 420, 636, 2829, 436, 1475, 3332, 1350, 1479, 3338, 1359, 3345, 
       1485, 1368, 3348, 1491, 1377, 3441, 1558, 487, 2836, 642, 2837, 503, 
       647, 2845, 521, 653, 2851, 539, 659, 2857, 559, 1292, 562}], 
      Line3DBox[{1766, 2055, 1638, 1866, 2223, 2224, 3483, 1504, 2059, 1647, 
       1870, 2226, 3583, 2227, 1513, 1656, 1874, 3460, 1600, 1519, 1665, 3521,
        1878, 1603, 1525, 3446, 1674, 1882, 1606, 1531, 3448, 1683, 1609, 
       1538, 3452, 1692, 1612, 3501, 1545, 1701, 1615, 3504, 1553, 1710, 1618,
        3505, 1561, 1719, 2212, 3472, 1621, 1568, 1728, 3522, 1885, 1624, 
       1574, 1737, 1888, 1627, 1580, 2064, 3455, 1746, 1891, 2228, 2229, 1586,
        3552, 2069, 1755, 1894, 2070, 2071, 2236}], 
      Line3DBox[{372, 1251, 370, 2809, 622, 393, 2815, 628, 411, 2825, 634, 
       2826, 429, 639, 2832, 444, 1532, 3449, 1397, 1539, 3453, 1412, 3436, 
       1546, 1427, 3439, 1554, 1441, 3443, 1562, 496, 2842, 645, 2843, 512, 
       650, 2848, 530, 656, 2854, 548, 662, 2860, 571, 1300, 574}], 
      Line3DBox[{1857, 2215, 1751, 1856, 1750, 2067, 3514, 1848, 2213, 1742, 
       1847, 1741, 3550, 2063, 1840, 1733, 1838, 1732, 1831, 1724, 1829, 3473,
        1723, 1822, 1715, 3507, 1820, 1714, 1814, 3442, 1706, 1705, 1809, 
       3438, 1697, 1696, 1805, 3433, 1688, 1687, 3494, 1800, 1679, 1678, 3491,
        1794, 1670, 2211, 1669, 3488, 1788, 1661, 1787, 3461, 1660, 1780, 
       1652, 3486, 1779, 1651, 1772, 2210, 3430, 1643, 1771, 1642, 2058, 1762,
        3581, 2206, 1634, 1761, 1633, 2051, 2052}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJx8/Hk8lev3P46jWUqKoqSoaNBEJNMKUZqRUoZQSIMiolGkzJqQNEgUoZKQ
oVzmIck8xTbPe6NBiVTfe93t8/547NfP7/zT46yzzrqf17rW8Fzrvnfi5id1
LXi4uLhmTefiGkf9+acmTnR/bCnMW+q7xVuBSVov+BUvCakHB2OlpaVlTWSb
TtCmbKlOYqymUIrys3xmSUtCWMT/6axXZ/2KVI88Xv8L5eaP8hbkUPpb3aX+
fpDqhP1rQ+pRruh9+owDZd8s6PTLawpM2GT6Nw/lr5SaWj2of9//+vh9K+q/
P5YwGUD5jlsSZ/Op//933BG9QspeGZ8uE+W1vSRnSYhy2r8/WeTfn/WQ0151
jtInqZp8uqjvo8ndjfKAvTtaKPtk2ZK5IWg/SP71T5TX/z2kR+EhH8b1vEY8
noGxH1AuV6a+hsIPP00v/kD8O4920+ddP50+LzCOKCXheU/c+3fe3GP7BCj/
QIFw6G70zypd4SaU31CpOUX5k6QcqVZBf0o+3ZaNcreVkx2yHn+E18t4d2+8
zCQCy69d8e6h/KlmMf35dwaJU7toUj2ti0h+WGPkmcqAevuOgFnhTHJ9c6KI
59MS1SF1YZXEBU0geXrelwBKf1/TE4HGaV1gubEm1Z3SZ/rlX/9O2T9tKxug
fJkJnfeu2vhQ9rWk79SXDHRD3U6e/MTn5TBnaaipUnUjVGu8CbpwqB225DTP
kxdvIQzvJZfn1DSM6eeFh3/dp/RJoOoPYdRPz1t5HvXFRzbXUfaJdfGUPLT/
Lt7ZAu0Lxc3XofCQgzcfBiGe1Tnz7RDPGg2j6YHfGXDEb/pUxL/mQdxrxD/J
kT4vJGn8O686/DuvyROl5hhKf7ZG1BH0T0JO9hH0z9clbyZlU/bPVk/Zgv68
eVL0PPqzI+J6aVBGAShvl+x8mcYk9nJr76+VZsC0AYlxmTW1ZHVg96PBji5i
ZN7rxsxrgO/9K/KXrO8hTJnkMPhWpvqo5FZJ0f4WuFyQ/SiG0id31BT/dHTB
igdtYl2UfscTZmwWZd80d9LXmDQm6C3uspCl7P+M6TX8LtMFxw+pmP8eVwVL
5bbJPS5uhoSYsNcGq1rh3Zm/hx+4tpKZF90WRQc1jenndxcevaH0ySvZZHPU
H7cmQBz11wYuPUDZJ99HDh1G+24Rk9ej/WtJx5wpPMS7ePMA4nEu0zyCeFwd
FdMp/BCxRlsW8e+7MHke4r/7lT4vTFr977x1H/6dd4H4ok8ZlP7uXfcj0T+L
9tn6oX/iUgd171L271tvakZ/XqvgDkR/Nj2btolkZEN2w0W3id+YZKZOWdKG
Qwxo/i1uzL27koTKf/1ZENVNWq1jVH8mN4LO/amP5gl1kS5pZY/ozErVR5fA
2GlmO/TvvhvWt6uSRJD1dsVR3RD3aonoN0rfd884vRbKvoTi3w3jvzHhi9wq
UKbs+9xSG3c4uR0emtzefyG+BqKNni4LH2mFs6z53D9tm2Cvus3jnK42IrIh
8K1+QfOYfv5xMXwcpU+urpCn9U33u6ag/tsCUW7KPklojjRE+zwj+ivQvup4
j+UUHpIk4qSEeCLPpWxEPCuWfXpL4Qet58dtEH+tucMcxO8UQp8XZJb9O+/k
8//O2z7LQIHyD0xsdvqD/mnkddFE/zxeLRlD+ZPkvY+/jP4MMqmOR38+mbuo
umE3gWeal3u9RFkkVr9EsNmPAR/nvLaZfKiEgOqsUMXdPWTGwK87ShpNcLN+
ie6W8jbitCFO/vfsWtUK/9tBFdu6YLg9a/uQeQkZ1mjjh9090HwpVkmB0u++
H79PUIcAV+2llZ6iLNjcIi3TRtl/vKH86SLlFtih9e76hqd1kKC0JcDGpANk
HH3z3it+gsWsEMdYpQ5S9rDa/XF3C9vP0v/jZ6GoY8WUPlmqvvkM6t+xibuG
+kkHysIp+0R4g+xNtM/MOhOI9g/aM0UoPITHd+8qxCMYyy+LeD5fZ5pS+MHz
78NpiL91o7Yi4tdqos8LTt/kFfC8T27+O2/k7UU6lH/gS55VOPpH/RNvMPrn
NOPj6cbdhMjqGTPRn5UqN2eiP+v0vjj3/4gHseve/eGKLKK5KDTc/QUDJBaI
bZunnktKUtVMDT/2kPW17utW32yC201vdr9LbyQXzPQm/4ytV519y7XzST4T
eBzSfkyg9KsW5Q6YfOyBLzaC61ZQ+o3jpz2cNRgP3+evCAhTZAHzg5SMN2U/
cvo8/UV1n0B882c+Z68G4GvRS9ZL6IKdX7WdwbgMBkQF+o/s7yRMsdq6F/Wt
Y/rZ0b7mCqVPVHl9+lBfkGVF6+9Xm65D2SflGqxpaL8/bUEK2g+qtnag8BDh
egkaT4zjzHWIp/iR66yJ6rmQevfVN8TffNVaFvG/76TPC4YH/5134o1/51Xi
lRen/AOP71aYoX/CKy/LoX8Y82SYlD8J15ebfejPlJjgMPTniOmh3vPjn4BT
rNL61u0sssK+US0xgwGLLXXEqq8kErE/2pevzmcSmMZtJZrZBK2tv3MnBZSS
JB/p10K5japhjrPbirL7YAJPAW8Gpb/IZsJVj/lMGFDa+2sOpR+gqqL7iLL/
yq9pbst2FlT9KhJMoeyrSqStfFH+AcwitIwkDjeBKmvujqtXe2CTtlTCxe+Z
sFZSOHN4bhdJXcIo2efSxvaz6P/42eFhczKlT8qcFWn9deU2tP7GetZSyj5Z
YbiAtq/z+xpt39ZNfimFh7zjGaLx8MZ10nhe/fJbSuGHCU3v3BB/Fs9yGv/7
Lvq8cMNCPg7P23/m33n53n35WkXpKyrH0f5RPKdG+4f3kf3+C5T9J8Uj8uhP
rn0PaH9y/fvnsu2Vy5/+6rKIhLuS9aL8/yd3GZe+n+I/5FmUUOEHisf8Jzdg
bYwruNqkOv7tr79///b/nzxPSlvak+JLVef+bsgfpX/gi1D5H10WpPLs0ZMa
ZV+hYdnqXErP4K/1SS/q//tPbnTVdcXHg11kb8i07NbUtv+Tc/r5P7keW9+U
Q3832/4WDvuGbDyJHHiy2fg/ceA3YC38/3leN7Z/nnD4h9Of7HgmY8QzjBHP
oG3573454hnGiGfCGc8VQv0Yz6TK8qchxlv0982j45mMEc+qnH7Oq1iegvE/
xftbBupL8aSNjmcYI55hjHgmY8Qz4Yznnii1b1Wob+ND+2fbzwuj4xk445ld
n8kY9RnGqM8wRn0Gzvqcc2lBCNbDoPwMf6yHKhYxsqPqMxmjPpMx6vP/+Hml
u7Eb1vNLtoO9qL+5dnB0fQbO+vzaeJ899gv7tT50fTZo9JUZVZ/JGPWZcNbn
5IslWJ/JL4+rdH12Kvw2uj4DZ31m8w0yBt+AMfgGjME3gJNvCK/bth/7+7O2
mTTfCAqPkR3FN8gYfIOMwTf+x88iXLM+Ij/ZtfsyrW/Qk3x1FN8ATr7hN9V1
HvKfmKAeGo+F3fV1o/gGGYNvkFXy/87LwTfIGHwDOPkGn62EFvK93rqHV5Dv
qT/KTh3Fn2EM/gxj8GcYgz+TMfgzGYM/kzH48//4+cuDQ+ORbx/k+fwI9fv5
dVJH8WcYgz/DGPyZjMGfCSd/3q9mtQHnC93qrN/on9fJgpvRP1U/FF/gPNKb
V+mM/sx9XvAG/VkhNq+CmgfJQ0/VDpxffgrNChk1D8IY8yBwzoOvO1aH4TxV
OPedAj1P9eaIj5oHyRjzIOGcB6dnWcTjfGf24dUhnO+Ej0svHjUP/o+fZ982
T8L5ca/nMTPUn7JARWLUPAhjzIPAOQ9uO1D8DufZ4OdF6+h5VlpKeNQ8SMaY
BwnnPBgjc0Wfmgfh91OjJvTnlITWINqfddPtsqh5PI5/hN5vGN1+c3nUfgPG
2G8A536jnHGxL4DSP56oMQv3A3ffQjLuB762Z9zCfUK8l5o/7hOOyeyxxX1C
otJsBu4fPqVaZeP+4fkEFTPcP6yetDIY9xU1tzREcF/R77XRddR+43/8zN5v
AOd+I46V/wn3J8fNw9+j/aXVrYdH7TeAc79R9zxtauB3BrlwOIYP8VuIzH01
ar9BxthvEM79xonyd+OzKftO737R+w1GzQ4n9Cd7X0fG2NfBGPs6mHXq3/7q
v32d1bTF4rjv8lt3+jfuuwSG+htQnrZBwgn3Y9ftzrzA/ZiXYtJ7lE/s3NaG
+7SNuWJ3cZ92wqCY3tfxLcl1xP3bOLu/+rh/azQJ6x61r/sfP7s5naP3exnj
w/agfvAd3U6Us7iTcV8HMxQ+3EP7FscXD6Hc+MVMfdwf/mKw4hBP8Slr+ryK
ELIW941K0wsGEP84GcWKUfs6cjDk336SY19HxtjXAee+bs/r3sa177vIfY9N
Dy+uqyNpOxIemfxggPwGk4TllJwv7ox70Lo6yLtQ02VMyb32a17Yrt8Kw3OM
Lf6UtoHu7MInWbYMCPWrvqhawASV2WucZCleNq/l7paubQ0QpaGyZZZ1DUmZ
dHzhz8JuYri62/bjt3qYS/guUfrkK1P2POpvHGeyGfWlG/QcKPtExfaZNdpv
Wt8YjfavyEelUHhAQPfdJcTzt0C5EfGo3FlUS+GHni2nnyH+nHUTnyN+/3HR
bQWTOomNGK9ucAOD7BhY1/vRrgkSJl1lZFByk7M1cxMbGMBoD/AtouQW5xrm
ndzcDAO/byYV/W4HL7U3TzJFGiEoJmx/KMUHZ04aefLMPIcIx8087TG7GYoa
d1QfF64kQZrxEvkGPeTEcyXBmpsM8MsWPUDpk90FS2h9PxcrO9T30J04m7JP
Sl6FpqL9d/5To9C+96mgVgoPtOWYzkQ8gfIsD8SjLWDFoPBDsepyI8T/3TT/
K+L/4P44OCuujQRbHe1PsWoi5rPiySGBFrDeGt6RQsmvfmrnLrBqgmqfGV9M
KbnimlvSD9IYwH3Gz8FeohPWrHX6WWLYBF0nxi1KfdEFogGH/Ffq5RNuqS1v
Kk62gtJj7TZB/1Liq3yqclNlD9lc+UL8+vwG2OFhhPpEILjlNuqLzWlORP1N
W16KU/bJnMhWR7RvdFZsGO1fN1vSS+GBfI81f/IpPA8m/WIhnlOB125R+OHk
4JQBxP80qDAb8UtvishtethMFgzac2UPNBNeCSefqNxWEHsT2FFNyeetie0q
HWiGxAVaFU8ouesxI5nANTVwMdVwyY01XXB+8VBd8dxmeLB07lvhb+1U3Too
0FRcSD6tE162eEMHNL2S/FyRWUh+yjtEDKswybIjpjyCtxvg7N4Q1Cc96QUz
UH+ZxaOlqK/o07OEsk9ME22k0L5e8CkG2v+mMruXwgP3rn5sRzwX4kVKEY/l
oitpFH4IWSwwHvFXDtveQPyF/tHLXTbXEWmz2nB3h1Zy237k6gmbdviooDLR
lpJ/+XqMJ8ChFTZKal2zpOSCPzLEInpKoV9Df85WoW6oMImq8n7bDLKZDU+3
NjZDT3nxONn4YhKrN7xKTb8bzog4VZXwZxOdl6GmqdeZpEh2QX1FXwP8Sb0c
QekTYbN6btTPEntJ67M6hWZT9kmfn7Ew2udXs6hG+5e4nsyk8MAZLgcuxLNK
WdQN8dhMsptH4Yegx+oRiP+VZrgH4t+RZJahYl1KeMwXii983Ub4E3q85T90
wJQ/I8IylFzP5fFb6ddtIOcjr7eSkvsezoCT/Lnw4sHZ8U/fdoNlGixslWmB
ji+RzL8/q2HlNQV9/qRSYszPbSmkw4J0uXksSk5uzRqi5VMz3lug3KArTIay
Q7KufaHtXPfwp+04+fFIUM+Fqql5qfjcM7WbdPG5AYu/JlI4oUJFTAJxRm7j
8UWcjhf6lr8Yn0S2nZM75nG0nUQq/nksF9gJE3hnDNyn5D/13E77H22H4k0b
R5ZTcvP8WW/2FD+HrDdxdw8J9cA0V92ex7YtYLA+KmCeUAZ4P+h4cOZzGTFx
VeHZu6kPJtnqBlJykqTUSstj5yrQcn63sxGUHTLhXhptZ7D7AG0nf6Sa+8H4
JDA8fIR+7tnL4vRzCw4smUfhBIVz+jTOBifxMMTZP4cgfphy05qWz4stpvGf
sgHEDy4qu2k7O4ptRuMnY+AnY+CHMfADJ/51ZpN4KPykdcc6+rk/eHfTz934
4/tc9POPG540Tp2+rzROF3dxjB+YfdqLjp/dkYF0/CStUhHBe8w7pUDHT0uQ
1+j4IZzxU3X6JsYPiXg1ZS/GifOudjpOyl7LYPzA3C4pOn6YlztGxw9wxo8k
Ucf4IVt/GdHxs6gjiI6f/G+vMH5I104POn66VV/4IE52XgNnXhsO92Feg1/t
bW7Mo5wPpaPzmnDmNcllYV6TMGM9HszTLTLTV2OeDk/o/Yh5LebcRud19eqj
o/Maxshr4Mxrvsy9s7DOzOq8/9efwvO6JWJ0XhPOvGbXYeCsw0lf12EdhilD
Ht1Y90Itasqx7hmsDZDFOjlFynYx1skdO6vqR9VhwlmHvwwyurAOX/cspusw
5OWMrsPAWYf5dRdJYZ1nibtJov0l2Tsa0L7v2XgW9gWPnREdiMdqOLpkVB0m
nHW4a6P5Pew70mvSe7HvyJw0TB/VN4Gzb+pay6zAvhar73EG+9r95MRB7Gvf
H7MksA9uE0kNxD64eJ083Td33xCpwb75Z/r0KuybNl53JUf1TeDsm8YuuxZi
X851Zzih/Xxu46FRfZNw9k3fXVq3se9zpx/8ivgdB+xyED+b58AYPAc4eU75
8hNzkYfcWBWSgjxE1EMsbBTPIZw859PJhI/IcxbWty9GnhP3y3vmKJ4DnDzn
B0+AIPKo4y0v3qH9XXV2EaN4DhmD5xBOniN407sJed33XzL3kNfNEbUPHcVL
gZOXVie/uYi88c9blUPIG+VW/I1A3ih4KAl5KRm3q43mmSHtjjQvnasgrIq8
tNrcTBx5abIRnyPy0mc9K5CXwqrXzo6on/bXmealTqq5Z5D3qs32skL72dtn
vRjFSwknLx2xz0BeSja+NXuK+EXH5dC8dNeWxxJaEelk2u4y4cSdLPLm2LIj
fM/q4af8CWeJukZy/a775y/3OsnIz6bo9FUMePMg+s/aKyXgEF54/LIxk+TF
rKvmzq2HZIGODp/L3cSJJ7Tw00gtCZ09if5+4MuchPqMn50kU4jfosG5nngn
VVzXP9QINhkZ0tco/TmHCpd+H6mFfrPn9FwTs8Vajp/CY/snZmXSThYM/fZa
hnj2DyxXT6HshK4Wzh9yrocHTw+z9Cg7278mN73vyiBlRtxcXzax4Ntm/Xy0
YzrPOXU7hdOlsEfzgjETfgle3MpD4ew7VNchpNIGrw4XV8yg/qwN6Kbnr5Oa
rySWUvP3B+e9H/5YtYO/1PwlHZoNoG23Kbefsnvd+4R3F/UclbPZ9FzDvi/g
vK9dCxNdJskzQU8l5l2ZKMWDipfFr5jZBMulB+93Uuescr4c5Umdu69BsOT/
3/cVf2J6Iil9Epi0OhL1/fzPF6Fc575Yzi7dDjJVrkqS37GZyCldenE/kQEz
b3sjTiJrXuSFOLvdsodR/1YtryuFh5xvPpiMeCqPf36NeIrzzjVRfiBni/hr
0Q/NFaw21NfWKPei/A82U1euQP93zRgnhf5farVjPuUfsvvv0WL0z4C60zL0
j781n2JhVwZIRKz5/Znyk0vgeRp/o2vRZ966RoBdkRLD9zohIkOFQaj4EfpS
uZa6d6hZW7AA773yQkYP/dzBJ5up+4UbYlkE73fw+PpWvN+kaylNVFzBsje3
qjCuxDMFB1H/s9CPK5oUTjFZx/kYt3ULGccRp+VweyUVb7BY2fokxpvJWaV7
GG+NBdKiE7ozYJzFSGwf+qkUCtGO2JbpO2WulJBLOdaHMJ77ZPcVYTzXwDKb
lRvfklnSLkVrTVnk+Po5XSSlHoICbjzpGKgjli2p669e6CLc54SnGmxqgKfT
Rwy3fG0nSm96rhnuaiRVy+5dbFRphquaa6uL4S15KzztpKwpC8LHdcujHU33
GwNA6WfYVV933NUI5hVlDgxKP/11UICz/AeI2KUsH/2ICcPvq/Y+5WNAzilD
K8EFTeDL7Z/cerMD7sW/vLWa2QjvJ7wpoeoh3JiRsAjr4UizoRDWQ/UjHlmN
sd1QN9lB8XhBLpnhEKgnK9cyZryduiJ95oxBG7kXrXJpQ0kLmbvXOo3JRdW9
zT/QDlmtm70B7cxUm0Lb2WYTZlkCb4H7M7cNnqsvab0MnsthNq8ZhZNMXxn4
FnHat30ORJybRTSPlAzUgXLubwOfC11Qekj8ij7lt9mrJ/6i/AAmeyPd0Q9K
Yjq26IezAs9MpDe+hT/Gd0vR/74xd2n/3wycvofyM0wd+n4D/ewgvOgK+jk0
Mr921bI3ZK1r7JF6GxbZK/Jkx92CerDJasvxDa0mc3fah4ps7yZnhq/Y9G5q
hBNRx286a7SSk2snmimsbCYC1iWW7T0t8Ko1433z0jfkrHXUM4YNCxTDz20I
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
k565/eGjDjL1y3BrmXG16oLN3ZepfwdnIyVXXY028n3CwH6/gQpy/FPUNkHb
jv++HwbO74f5PqtJDac0wPeDQO+RhoSf03ukwX4T49BEBiFzRJrxe6EzLOcP
+L0Qm1eT/+HVq2k8cKH3H57nGv/w7Hxlob9dow1U7ywIfTNQAef7VijPoPBs
MzBPuXy3hYx7vWFedesnVTN/g7q5vD3w2nW//EuvRrLD63jAoF812fN8VWam
Yvd/36UD53fpq02/494PvL9Op/d+72JV6D3nXPs4p0m2VaQmdLcUfo80n9dF
G79H8gtb+wf7hYP5C7pfrH8z5wb2ixlGNB5Qjv2HJ/bmPzxiI4YzwrwaocBK
Q3jx9WrIeC2+/C2FZ/KDo8JDcrVERWV75u2DDarzylc0P7buhU3hxirFcuXk
6MdbjIDyWuJnZHfwRiTzv98jAOfvEdj7UuDcl94Po+1DntI/+3Gl/+zbRHQZ
5MqVQzH/lYjs8lqQcfD4c42yn5hzfanw3EyyjTsuXcuwSVXO5/uNqOf9IH5f
cJy2YCzZeyay/vKEOmJ9dPDsqs8s8Mi3kFx5+B30292M2pbYBAk5KjPP8DJh
617x5au9nsCZAxJmFiKdIOh9Ojl/bgecjFsjTumT4FP2tL76Pkta/yWP+2Df
D4q37Nu6a2FhFvS7ushM8OwH/kIaDzCe2NF4xrPxPPcRY2wUjAX77eqhsRPq
QNjMxGIRhYeNHzjxl1qKNqiQPHD2OB9aH/yJeAQsyhq6yILwZGfET9aIHaXx
JIXp03iGMzU/RvGmkztfJON/9nfAkNO3p4u/tYNexmzED/tz7tH6cHYnrb/x
r2eOlc17mFMaXL7iaBY4P22r9Onr+w8/kWHj+Q//qfY6WRmSRwxYUrP47n0C
s4n7t/VTeNjxAJKfTTNGx4Nqqom+XFEt2NbN1B/MrSHiH19PbvPogfT1164d
m/6BSN99vEAgv5OcP9KlWKLYBjwXHhvY81aR22pXNEzVW4jG/WKJA3Wd//3u
CTh/98Te2wPn3p4dPyS27x+e/+KnY3jTvuVFteT74FHxJXk18HDJh3H1FB52
PgJnPs7S5qovkm8BX4kod4Z6FVmR0i4+t7rzv+8AgfM7wFkNqV8ceypB0my5
IO691WIYe3HvPfS7B78PJN4rQul8XFZRRH8fyH4PQjjfg7B/7wacv3dT7PLC
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
J49OHJIGOem6I5sOfXdXTgvrg5xr3/5Efq88yLz8HJwr9218MpzLdaWUMpyL
uy1zOoeST5uy62yQT1PDBd4gn7S/hJn+0lj0/Cz+EQt9ieIhtzLBL4oq7SDv
bfVYIAD31ctyng/3NeOGUw2s034LYvotck8n+IB+HUrJmQn6Fd4yjQP6la3R
bQ79mU56M36BPzMOx5DvTnfbq/FR/gma7LiI+Ce2K5SJXNHfOcTM7xzS34vA
zO9F/NpToDDOrgy7cWVuExZuw3Wvj84eeMBGI0G9zS6+n/A3Q8/EKgUOlvB/
IjNZjYoL/JWzhIYjsFfCqZ/nKRzbOM3/zI3mWqRVGeA4s/AtftsS+Eh5iIM6
5WXqLyawkPwEm8boznd4/3PDxVXcHShOpkV/1Qb2aJ8hYvYZ0vV6xKzXL20X
jMQqn9HAvZ/8kFdZ8qKB5FXQ8/vnLwxHoGiHbRYUPVjNoXiDD0VPVO+JWInC
t0gpRPfwqiEOrr9iuOAaRc/NHZMDn3W+Q/xuVn9KuDtwK3toxRqKHsMUMYkb
cVcx2zCk3PFGFxIZrv5yk9KLfeV7gr38Y7CW1d9TmSs70fFWWZegQhYqE+7w
dfsZiZuO1VT5mnSgiYHxKbGX2Sj6vcOk/rWRyLKqsOBYcycOsBu4w97SgPis
Z9/qXPAM7VHNFDbf2o4LuMoLZyY0o34Z4+BNeY8RV38Mv4QtG2ft22dmfoDC
LbXKp5/jrqLxPxabUvRgzWUbX96m6PFgxSdH+cegoKQev4yVnXhSWwnvHYqe
/njRs/4/I1HarVPi3iYdWHc+97xkih4eE3M4F7qfeomc6+1Slcr/nAsxz1Uz
9/B6m+2p6MK2mYu3rKHs/sAUzxZbNtq/LB7OhXuyk8i5SlZbhv/nXJh5rmti
gso8jdn4TNgUfU8lNi5ZFjDebF4H+hUcAOfCG73WknP5j7SlwLmkVpbDubAr
dz05V0l7DzlXHu4rc9meirl+LNXSWdOBwyScMrsoemg5RGPIIWLK4bxzzvhm
Zz7aoxd0dNOzdhSY9ei5LA97VH4wU35i3/c/ouQH2z4JJPKjql4rAvKzLGTb
xpjOfGwdnlu6/lk7dhdii6+i9qG/34uZ3++lv7+Emd9foudDMXM+lP4eKWZ+
j9SucW8bPP943SYbeD7iyn03eP7wonVzZm8uwVu2trTC/KbSsQVGML9pXNE6
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
bcfKYcH8Bsz97uutI+vbUMjMGrHGPfXo4JLwu4qpbSjv3TSF7sAG5PbD6/Ev
4TpUKTPw5m9cJ+r7wXPpjW8uTjrsugXoiZbavdu+uwYdfazE9/NbOxaZc2ug
n6JH8IBW8n3FcuwmVnhEZhIHn9VacGmqfz0KirH6PdDSjgUlMycmrviMvTo1
tS9YNaFdcw3atMc3Y0eex3nj1zehuTcf9gxNbkSZiRP2N09oxPkpi4IUbrdg
DxHOTCVLFnK8EXVXt6oDK9atDQ/lTkEHTPrCTsc2Ic0VccoFKTV4sZbx4lTJ
dlRdVbnRnzrHEpEpPacsirGBUa+c0Q0O/p1nGBinROFhpaxBpX8rxltrlzm1
FON6+bn9yuXNqPDoIV/DvY24ujRH18OfjThGu+byHG1CH7SX79rdWYs1zZti
UpJacaSFe4HP9kZkaO7rIR7ThsscZqhEXnqFEgyE1qYZt6BzMxY8fT/7C25U
0zzQ9JOKq8/95j9mxkJzQvmP7Y/KxWVVyma8Axx8O0ZnKC2jAUXHfZqVrcrG
594NnD2cWIo3nbBYcu1OG3omcp1bY2YtljKJ+7KosRldOv3jyZsPbLTqTwpf
YXUFdhUWv+uT2oZPG6lcNpJrQlur3uzyNWnG09tvnWkVT0Nqza37W8+0o899
+q4GnGIsFh+21Ci+A83osX0l2sBCqvZS2yzVs/Cc59dE7wh1YrnabgNJGxZS
eiT9dV9JLR4RnNFgsaccJx6fgVQvctBKGf5jdh2lWHpRhfsTnlYUbuhUsXug
Gc3kadpVql6Eb/Ap32R/aceewSGzHgU3IdXUiOZ7JfUY+3JpJ918gwT8ZcU+
5Hci/2X3NYqv5uA1nHD/deocVGco7bBWqxGJSdc4xWU9RBVDdwJRdicSfrto
YGpSA9p02M8i3PopPvqjdVGMXid2Pxl//asnCxlN0lzDcizCz7i01GyCK7CS
TPNBBXYXill1WEIh+x1uKUy22FrcilyjgmYnl7Ygz8lhdqaxb7HHaXGxWR/b
cUg8V5ZsMRtFWU8V3/HnMy6oLIjIN8SIa3BL79fQbmTlKK1b0vUKr5q2Tcw9
mINarHf3Sl1rRDtXa/6yEwxGOwvOPdmWQ+lHdHXP+1cNozg2rh95dSfu68Qh
Ix+6ZwWy/l2/sPf8X+3plFxYxdW9r/r673p+kfKOB/Pb0L6e3c2dkq3/rp8X
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
lNv/w4fW/plbQZ+2VOYVw/fT9hil/5d+JLdQP8aifnxj2AD6kczxuGoA9Lxt
J2pATxSvH6mgfgzg9SM9jvrxPurHqDetoB/pdL32I8CfMQu/Mf0Yx+tHIqgf
lw+zf9Yp/oFkH5+5+qFxLX2glZm/1qiYPNMpezugtYYo9O33yTPo3cKesxbH
Lu1RQdY6STbUcd9vu/hO6YlxLUl5u89gNff90gcuryLuJFGTM1/H3i6pJ0oj
jnfVcPaMuuW5tdufVdFDN412rwn9QOqmSTbWTS4nR6Zu+LXfqZR+drTctdG4
gr4dHBr8cGMp8V8xsJ3DybanRmaAu5gcCQJ8kXegNjcOmW5kvBfGOSQS2wTj
XE3YepWbl+y3dx4P866VlBeu5eY1bPAUrRf/QH/fsFEAOvtNGawHdMZtYOui
2qL8ujSn8+vSmSd0meMD1ZtopAN8cH00uAL4EP19yTQ3bvyS4oU3wE4L+Zgf
DXbadN0PG5urP5Hsm9nuyRE1dM/UyvZdTkWk+kmuWIFfHUnbGLTbf1POwsO9
Rtv2SywlNt8SrEq57xvUG/dkRdQQ7dJIUXPu+/V/eVeoXGl9us+DGlrYecxW
xiKXLAnUVJbXLSUX3cccfJlQTkvq2l/GypfT3OXmLrVaJXgOVf/nHMrcszvK
fU86iwzi4fvoq4pO8H38yEep3PjE+dj5EzD+9ttNM2H84l2zO6Q6Usjo16M3
Aj3RHQfnAz2+LpWXOPrp0DxpC6C/NWRHpxlH/74otl5aup5fb5Awv95A3+Bp
HH/oNIMJV4A/P5QVRC257xWf+V0He9jqi5EX2MMHEyMmgz2sLj1TWXR/ERny
bcnPl9+raeOxla1vrxQS935zvvZ5XU/u2Jb0EjPLWnir51rXrZzfFKPxtu7L
viKSZlCQmvK9mliNmu6Ww31f5Hkj3Ek1kxr3yolJPFpPDDReDrnH2eEj5CbW
GU2ooyfP6s0fbPmWVH38qN1zdzGRFn4o1etmJT20efoyw+ZSOj6mZViFR9Ff
+bnAZokM9z2ZfsdXE76/vmfAQPi+sve4Gm58cm+xA4Hxx/Uz0oHxkxtHHuLo
IfK6t58DPRLGxcOAnlDtPWJf9xXROavFE4H+Ae6Jp4D+EHG2Xpprza93ye81
/Hpb1/Xk+EOX6rkJveL4k+DZIvKO+97eVGpPI+d3lD9e8TuD8zv2t7f9AL+D
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
eyrQuXetKIsnzHDcmfeDk4N2+TdEIA9W9Ofzdogn3CG/xsP/5guNTi2H+EbQ
mIqhEN9QPJwHeRF0avh3lhfxLSGY5UWcmRd3APIWXlnfeQVxgEvRI1ieA+YV
EEXMK/iOeQUT9N99ruP88WHlcdPAj2sojNwCftwxuRrIMyEvGg5bQD7JuF3z
QiCf5BqfN0K780bWYN5Io8Izb8iHWa96geWBKKXcLwe//m95Pj9OD9ogaUHp
mzbXS1c2NNCLhkfyRcI4fyNx9ZnH5pQWPt9t47uhgcweGLcH8JYcI80V0z+Q
Tveckqs96qjrBLJswgxOLkjFaHE4vR6YWgx4zqhhSwH366uk8MSckrInU6xh
nPaEPZYwzq2SVXJjLCiZ+GjBFZg3J+pYIeC6WzJ/CrfHUF2vtIkTjBuoSoBm
WuzzAuJr/sM6sC2GrqqwC5U2biBvpvgIAX5mTodL0/x35GruhvPR1nV0XqKW
VHZkIXG/EurB4fTNrC1ugNvGzB4P+Peup6JBbTGkMFY5BMaZd/BoRww3jn75
xW9C7TFEOXORLMxrZdeUDuOr1k99FXI6kiqtvuprt6+BXnsvE7kolfOj/uLn
amr3TdvOfa+SkZR1Yl8DmdRc6U247z/9xW91WWRrfHB8NsnbFhh6ubyOSi2L
OH1LsYg0oh/qjn4oQT80/nj0Pu57qjFJMQS+zwkUOwXfl+P/U4J64Y35jRX/
nI4ksnJnM4GeR9vuegE9z//in+6uzq0L5r5XSnbzg/UOresVDetd8Re/Umz/
7JF3RoZQ7bVd7684NJDVcTWGFwsLiHPaC523Yolk7q/Z7VVn6mnKWafm+ooi
cmyM7SYOp1M01zF89F6RX4Dn9dkaxI1D9F96sHHOp1uxcbqCx4R3cPhujZ2j
OZyKj3ZrvcTh0ptMojs5fNzGG6MAj33wsgVw7b/o8V48naSbzlVI55W/6GsV
0+B1QOdN26eMznqRzz+Bzm8YnxfcF6NqRVgXsb65n33fePU6+77kL/o6l18v
FVzvkb/o5d4Ldydy55AUBH70gX2pvC/C9iVt5nk4b8TouDc7b6EW1y/D/t5a
p2QK5+TFOVd2Tq56PHSGc5LvtusAnLep6wYHA671o5cT4K/5c0IFz0nIrgEN
3HmgN5KnsvOg9ulwDMzroPsQ7inJL+Dv6bPdy9g9HbTjrBV3T4l4fQm7p2O7
5LvgfkUP6e8M97E26aQ73MdPqgfH/tc9JYL39Ct/T6ngPY39vqSRu6e0VMx2
Csy73js7C+Zt8/yxjpNj5BfR9QR5sizwWh7IE0NejhFBOdbMyzEqKMc2LX60
GuRbZbsZw7crP1YH/Covx6igHDt70UqWk2O0csduJsfsyhIKAI+cLpsQeSOV
zkhIUT/ysJ4Od57T5thSQJIPK8mPvnyN7nzab+cjjwby2Hxx6OHkAlIx0HFs
k00dcX2/vpfplywq3vP2EN0HxeTEhN0jTWgBnfLq5KjsgzW02fuL3Aj/QjI5
NajE8UYqOWDmcdP6YT13P7QWw/g9XhzSj7xyjWiKBDRGeDRQ6fjT6TC+wsHo
Xpy9RLMv/GT2UsL9Aa9Bv5so1MD/I6TA5x77f8SNzGT/j7ypaDYtiSgn8+55
SaYfLaWZn+pV1k4vI1+fbQnbKlZD9eULhcx+pROPo9HKIS/KiQRvhxBxATtk
Qrxl+PjUHJLeVFEbza0veseNNU+vFRH1D3cWy43KoaH2e07C/5hZiQvY/5jL
EA9E/C3iPmJ22+WuRRGnCecjId7yNZhqQLxlUzyLRxHBeNTU1xu3eN4Mo6Nz
pp9+v7OBJGXG3a+eyvlrt2Tgf2raqyKW/U+d3CjN/qcW/zogwOZ+Id2Ro5lp
UF1KyKj62Kj2SpLy9Mkk+D+6UK6d+VMpfrnMn/rwIibnpsVdOr63hFeLYwMN
s05snVVfQGq05FogrqXwXobFtV6vDWL/U5/l4070BsadZmLcyWDb+Zv1ZUn0
3ouJqX0W1ZPye+FaqmeLicK4NPOtl6rpvIacJshDO68eOxvy0C7fWj6OOyf0
04/lPeGczNObPBjOSYP+9dfDxSrppgtl7gdjikjQ1sSYeZfLiDrW47zDehxz
rMfZgHU3YZhXfAjzihdgHQ3BOpozWEcjLCTU8v/Vd0RgvcxFgXzgUMTvIx6N
eDzWy4zDfGBzzAc+inUx17AuJgbrYmbtHFl1rC6bHulS6BO2opYELott9dhf
Su6q6WlH78onD54MqrfqKqdyk1x2jyqrIPdXpI325/ZlYw8pti+uBvktsC9Z
y8Jb+w8vo1fG2ooOTM4hvmVnr3uE1pAfz7ffgn0/rhDJ9n12+sRnsO/Ww77t
cqnLJvaeqTrBK2rpK9fhTl7cvN39h99i/6X92H9J13Mr/C9P7d/Hsv/lvd+p
sHO7HHEXxD0Q71Ll//evFOhPsvp6f0eYd3SvfWthXimdC6dgXvPkrDagP9Ku
sRfQn/9PzjWgf1HmGV3gg2llfS3wIdHysyXwYftI8Wbg28OeU3oD3wZ/1WoB
vjlj/rkJ5p+nYv65NuaZhwvkmZ/AfPJ/BPLJsQ6L6iK+CvFOzBv/iXnjSpg3
Hot54FIC+x6H+d5KmO8tifnepiFVyXCeX2RtcYPzPDh+fjSc58E7NoaD/Nmd
F9W5k5M/T13jZoD8Cfd2twB59Vz8lgTIK+mr1TNBXnXk9Due+qCa9lqavSRN
9hONevN5dtmIUtLzLY9/1uDxaMS11Ivm6s0sop/8w8zeXaymTfGuB3WEiokq
4sWIf0N8+4QNdtw4xMBnkBqMoz3vlwqMY4r4EsTXIG4dmgL5pTTRRvIX3Ouc
CxcXwL2u4uU/d354+T8A5f+YC5cGg/wfp/VyNMj/YYetFUD+T+HlA1EXkA8D
4xVAPhCPPDURGGdyPxEmH0q/ZJueMHtFBg/eqwN5oT+qb6lBXui4vPYxsVeu
UfMGrR+gL8bdbmH6Ys78Rc+D2vKovduL+ZCPGmfWvA7yUeeut/Hk9A49c6v0
NugdldLXmqB3jnUNGMTRSeSNr0oAnePeTpIHOt1t9H9GmL2izTnyPyH/Vkbo
ZwrMu0ln/cMxl6+RtOIzpqAHK89Gh8C8OtN/LuD0JlE7kb0S9Kb6+rddMH7A
xU9enB6hy8XOfQY9Mqlfgy7oEU2UY4/x3B7Ac9s1l68fVBOoH+TkmOf/J8dG
CtT3OWB9XwTKK2k8tzvx3N6eL34c5HbBkEtpILe//dy6BuT2C+yXu0GgX+6O
MXezOX1B9jSvZHIpIag3ry/0pceCnrrUJXYG9JT3vrhQ0FOl2EdXQqCP7sRv
pRKcfCN9hnz1hHGsFHzYOMsF6kS6+fAY7520QP3FiSYd4CdxV3/A+HnUKJHx
0z9/QRjweWKYRx3g8/XFtAF3k7CTmliURSwGXEzIm1RPQ6T6BFvvKCTHEd+N
eBDizrdc08U5PLyvYkLBpHpiMS/r0VEOP4r4Y8TNEH8RVCtG2oLpRyrxbR93
Htw62vPFAwrIXAHcFXHDsxULuftIjiTp74T7GKL6ej/cx9WI2yIejLidnYXo
wrZgEuI8iY1jd+Z6MYzzy5bHQwXw84dlvnB00n2RuynQue3cvQig0xbxg4hv
QbyyZ2OtDIeH3xifCnx4WycVDnx4h/hjxLMR/55aYwx52pmXFunCfXxRmTAf
7oXDzj6juftIXAf0YfbblKphqXAvRk20eAX3oixilgbci6TqzBa4F2/HtsVC
3nhVxUhVuKcFG9XXwD0dpeZ6EexD/63b78A9XXBg01L4fny9h9ojbt4No8JZ
PnytjxXLh5ccaqLI2aVEuGQns0uvrMsKhnkvVdQNg3udcq8Pu9eh/dZOgXs9
WLqxibvXpOKAK7vX28+7JMM4rl9dIrh7TU3Fytm9TjmwnI2ze+sAyG+nBpa7
WH778djjLL99bNmVMpAnm0MHMzt256PYJUCnKi8H6EIBOdC7dEUHyDEJx8Ha
wLfd17epwLxrVgRv5uxemje1ZxPwbUjgsDSYt/fWdnvI+xVx92d5v59jjVje
r9v7E0lqYW/oL6EjUrfSaqnSVouzvpWlRM9rzI93i+Pox/y41q1x9VRygr7B
FylOrrpuj1pkG0bVU82sF9o00DNpmUvHlBWQ9Mc/KzicyPhEWgG+aG+zJuCG
Q9Y7G3l/oOb/pDrKBNWS9Vs+/nNsVBHZg7gJ4hsRL7pUs0RSLYEaOh+ZdWt0
AzW6seBh36oCIuTJ4waIGyO+P3j4Ng4nfnGHZwJ+22nmA8AvIe4rgJ9TiN/P
zUvuxwY4wbxuzttNYV4/xIMQv4D4tv61D6G+oHLTwflQX/D0QEwI1Bc87dW6
tVqrisSu8dOa0lpCkyJ2rckp5b6/0pI1j/vevMPKC+ovBp/YIQ31F7c2DdCG
eoeAW8sCoN7h8iTLvlDvoP47LspmaBS92Wc2q6dYvmRSItRTWI4S/3zzYDad
bmk7YaRUPe2Mm393slQhyTD59QXqL84n92TfZziPYPUX5r2O/uS+J3qZi9j3
sl8H+8P3IV4Syty85EBRr1CY91TfNHGYt+vw0CKoEwnyv+kGdGY8mi8BdMYM
afDj1kttmlyXwnp/dOpEwXojFCau59ZLY6SX6cF6D28NNID1Yl0P7a7r8ce6
Hv13OaPaQrjz5N0/eEtwLl2aIPkq0KqYXL9YUQv1NcNPK6lCfU2HqAur3xmU
6n3fuLaC/Ozwa3+ZXEbSOuWNZ1wqIsIXfKEeh1bqfV8A308Vb2X1OFhfQ97l
bxKFeRdhfc1hv1XLmkJqSe+uQV3HgnPJ0NIPbgHcvDV8PRdNxXqug1jPVcHX
Z5F8rM9ajPVZL/i6KnoG66q2YV3Vfr5OipQI1Ek1zY+Beihq1biD1UM9C37I
6qGe8/V3VF6g/m6m/wXI96MD0us6IN8v2Fma5fvtqXRereddQ3s+yu+cFP6S
7npKlmZ+K++uvyPd9Xf1WH83b/tzyAMkfS+9mgP5deJDJ7L8uu1HZqdwdiNZ
25FwDuzGuxYuzG70jdZqg3q9ayvum0McdaBHZCDEUdPC3LMgD7AlZs8oiMN/
OTYqBuLwz/g6O6KFdXZLsc7uBp+/R05h/l4C5u+tUDhnretdQ/RmqI44HP6S
/Nh0aFwGR//XNUm/QZ7kbvjA5EnJ+y2bQZ50/6+9sWHRH/Ug3XUxg/F/avc/
/k+/ozoX61A2/lGH4qd6A/8Hn4b/g/Pj3Ilbh9+v+OP7QNWNDVL/37yqA/F/
87f4v3kaX2dNlg2YzeqF7bDO+uftppDq36/JIxndiV/NSqmMQWfUW4U6kme9
HOqm6ZGsDhWoXz7hNI/VL8dsJyKnmp5TOxfd0AyHGjJ4vuEUq1kVRCopF+qd
SXXWJFbv/H2TMfv+LF+nTIVw3h9Yp5wbbVmW9/s1TQlv/SJkXkoWD2+IfcPN
683X45M5ckKsPj0M6/EXxG7doJL+kVjnD9kAedFSGY/EIC+aIL4TcRnEDfm6
e+qGdff6WHcvcvzWxkN931OPxY4sH1vTL5PlY3fZ8PhlxJcg/pOvuyfOAnX3
I7B/7wv0Hw+g/+jA19fTfVN4+puxvr68TUNfPv0j7Wi2mAB549cmpfWEvPFq
xOsRv4l4Fd//gVzA/g9Lsf+D72h5yOcn7kf7snz+p7vGD4E86nfFq3YPf1xG
qmuc/b2vJ1Hd01uCbPRriRHfL4II9ovYc+IJ+OOktu2RGPiVT0IXtYFfOTWy
DvpC0IMzvVifhzdaenfh/+VfD0dAnj/tnXaE5fn3XKHK8vwvHvMB/50WPo6t
A791onUC898L+b4QxAP7QshiX4jHFaHgv5P5nqHMf28ZdJr574F8/wcaKHnx
j/4PYebukM9PHWcXBLF8/sAqls9vdKNYdMjjMvrZdf/DlutJJCLG+JEVt94q
n6GT26G/zPwo4dVqz8hm58pPUGcXeyhAnZOrdOjBPBEbTq76Fj/3ArkaJPrP
LYth9aQpJiMV6vt2H5j4Aur71kzJDG6L5PwfmUBWV6g/R84R6gpz0guCODlP
1XtHdoCcf1Q+yxzk/PftyYod9vVkmfbaZKhnXKDutxjqGR3XOAzj9Ai5X9wR
BnrkvKx5GuiR3JI5VpycoTP8akeBnDlz7st4kDMhodvALya/q8Ywv9j4/Evm
F9tVLQC/mHq8XD8G/OL2a97MLz59vmslJ29JbONUkcmcvJX79U4T5C3WoVNh
obo/6tD/g/ev+G/cDvux7MQ4wHKMA5xCfJVAfED4G993JRb7rlhh3xWsByfd
43fXg/8Hr/ujTvzR4CVwbunSxppbcG43jlvHzm1pyYxesL9DmuzCYX/zvE89
hv19YbwZ4nukh3ZZBsR5LtjKxEGcZw8fVyE+GFcpxLjKJuxDewL70E7FPrTr
L6pDvIXOrlrEzm3KqAgWb8FzRWTd+HP1EM/VlqVndsH9UrB9dBvo3LLFLRjo
/F1wAuQPVTHZuh7kT35JLpM/TYhvRPw94rP5+hGqjPUjOlg/Mg1xPcS1EB+f
PB7iqCSsdRyLO6VF3aAQdxqKeBTiiYh398v9hfEoSYxHfeblDClFOeOPcqYS
cZEWHvdDXHyQEtShkIzIc0yu9rs4qi/QL4L4d8R7IV7I1zPSI5p8PeMFrGf8
2CURyukXut16FNMvS5RkokG/lOU+ngJ1gkFrHKWhTvDzkxFeUCf4rcYmD/RC
b1/9r6AXkoxJHOiF/9SZrvx/6i7vxUmgvnuD+m7qL1WoiyQnToSyuki/kAGs
LvIpr7+IA+qv/qi/ft3b8xDqHyNeHmb1j20HLVn9I9aNqs5A/bsF9e957SCo
l6S7eqxg37dsucG+j+l3qQLqMenuIDbv1wV6bN4g56EtjpzefHDXis2bm2rN
5uXX5Re3AcfXxPG78TtoD0xBe8DtVA3UV5KY1tmMb8MG17D6yiMt20GfksP7
BjK+HVhZxPSp3PiXj6HO1KlSuRP2pddtfbYvL2t7+oPer/xozvYlIMyd7ct/
6ltH/cHnHohLoj1zCu2Zp2eiYB+5+ccyepQUJNk+rgl2gn0khvmLGT3eSlps
HzWm2QCf6YMkVcY3XdUjjG/WMjeBb8TF/ALjm8svM8Y3jY0qwDdS0WzM+Dag
wIPxTYJfF83CdfXAdZW6Fd6E8zbv1B22rrMFFmxdM7BuS03g3tlgHZY11mFd
xzqstViHJYR1WLpYh1XGyyXyoZGXS/kol1r5+DM5hPHn+Rh/RrlBvx/n5cZ2
lBvdfUKEhX4weSj1p3zmcJGK/8ZnY9+PY9j3Qw37foRhH4+rGJ+Pw/j8fcSD
BPpfdffr6B7/wZ/ymXbT041b8vY8kRGw59/x+ousQ/3lhPqrZXo+/N9EB4p8
YP83Vcilsf+bXMVM4P8mEjh3Efu/iVhT9n9TDf9/BzEV+L9jOW+H0yMCdvhO
+UGrwL/45+U7YdB3anfLmb6rf52YfP9ULZETqm9R0cui7/Qffy20KyXViGsg
/hbxlMNzxIM4/N7XkrEb9bLI2ru0uIDDkxB/gfgaxF/MlXZwVa6kKWXbFn5Y
V0oOXX0p/vViCYlB/B3iBxAXwj7SE9T4PtKJ2Ed6BvaLtsZ+0RLYLzqgbrQd
Nw5prf62GMb59mb6QBjnBuI9a3j8C+IuIakDOTrp7NBOCaDTpW9QAdB5GvF1
iDsjrnm0z2uOD/TgqLZ24MP0320/gA/qiLsL4NifgWSd/rM/Q9DxS+AXk+zc
RyFgz9wZ8uYl2DPVvN1FzNDuMkC7K0PSDOwu8iX8hCjYXR6KFszuym4rhb4N
9LvByRlgX5mGm9iBfZV5oCkU7Kvd5+J/g33VeFLCCOyrRIVLYKfRoCjp12Cn
OdnuYHZasOIB6M9AbKYFZgC+73rCK8Cfr54F9huJVKuaDeP/Y2XkAOMP7vs2
EPz0e/mnumD8IH3fnTC+B9+fgW4S6M/gotEf/HFaoRYlBPT3U3Jk/vgP3t6j
w9DeU0V7L7d5Cdh7dM34uxHAn89HhjF7r3rfSIjDULOBLgsgLhEidTIY4hJy
82MgDkPXZUtpQ1xCPb1DG+ISOgb+EG8hlZunsHiL6KdDLN5ScMemAeIk2V6N
LE6i+ejjbYiTNPNxFeomEFdZ3PPCL4jDOKqFS8H3iRknbsH3qcYhED8hS6Ti
XCF+YiGzewzETwLXep2EPLcNHYcuQJ7b/qLIh5Dn1niOxc1Id9zsNMbN5NS0
yiGetrB4NMPn9zjB8MYcoalud5LogHapm9CvJmXD10joV1MoWmwJ/X8WpF03
gP4/DVuDjaH/zyPsm6cr0BcoROK+oefNMPLZypj9/2uZ2Mri6mv4/1tJIP7f
Woz/tw7vI1djejOMfm0Otfqws4EWKXVeruS+j7OX2Qa4SORRa8Dvdib7AB7G
x//JJ4z/N2L8P9QtEfrXkbD2L6yf3uTo5Swf2GbIGojzk7q7Hxk9AxYdZP9H
5/ProoLrUhgQEevK8eGqbvpt4MOg9feeAx/e3siGfoz05voY1o8xL9CQ9WNs
Ukmbf741mMxd7Rq236OBLhm9+wjEsc0QnyeAL4lLhf4ztLyU7z8jOnk26z/T
Y8Stw9B/Zu5eOdbv5eRpjRHQ7+XNIPkNEPfLNly6Hs7b16Vjt8B5i+X7uhDB
vi6Di7MOyNsk0dJprYv269TRDuPTI7O1S0lXEY9XIN6K+N/61TSOnqs0I9iW
fpq8kPVVsOtlzPoqRPH5APQM5gN8x3yASXxeEBXMC+qN9JTjvO04r/Xe39Ht
1r6k6WkE6xexM1SS9YuYy/eLIM+wX4Qz9osw4vs/UMH+DyMD70CfDZL0tJT1
2XjrvZL12cB+IHFvsB/I+z/6mXjEvRbA1aga9NkgHcXZrM+G9JJKbeiz0R3n
McT+JHrYn0QY+5w0Y31EJtZHBH2Vh/4Y1LSXMuuPsbDkIeuPgfOqnsJ+I3f/
6MfirSqDdpot2mnqqiqKCW7h5JGY8BXo15Eh7sP6deTwffZId5+9/dhnbwr2
/c7Hvt8rsO/3cOz7LSPQ93sR30+Ppgv004ucteT8cJFU6lV7eWj/6gL6c17X
Zr9n9ST0L/3A7Q2uQ/86GvTxMetfZzPfjvWvC7GqT7y+9CUdrRmkI766mpZf
rrH5BH2he+nFaM6LIWN/DZ8J/T20bea8gv4eY/n+jUSwf+PYYzbUvT6NbFp1
edfyRzXkysvAx4oi5WQY4oaIeyG+a++8aefUYmi72dIDvgn11E3DszabG/98
+1Hol0inTuL7JW5o2sP6JU7zWbv0Xn0aNb2W8hb6BpwdUS4FfQMmI26OuBPi
M5qvNLbPj6FirSOH6o5qoJfHB+m4fC4kJnzfSyrY9/Ie36+A3sV+BT7Yr2AP
n+dAT2GeQzzmOYx4Ggx5CLS3UMsawLc/HXEa8AdKIZBXQCS7HohC/Edm/VuW
V9Du/0L7BHePdt3IZPdipPRwDbgXadu+Hwc+pGq67Ac+rE4RrwE+qD0ZB30S
qINjNuuToDJwHuuToIO4LeILEEc+0y3IZ0/ksyzi+oj7IH7LWh/icsS3pacG
xOXid9mxuNx9xN0Rf414/Jt0Q4jj+fufYnE8tX55EwBPRdwLcQ3Er3qvGw59
ZiI7rzG5MeWWsDLIDXu+bwzp7hujgX1j7sQvyYNzMvTTQQugc+mON4+AzmjE
xRFfibjcxuMa0Eei4crSd8CH6NP6bN8XIl6N+HPE31vOWQL9cCL26LP7rmb4
4b/uu+X/9Gnslj8nBfoyVb1b2w79dsI3PV8G/Xau7fn0EvrtrP1W/A7ukX7L
SHaPTlyJYfcI+xfF2eM4IX/0L/KOG4XyxAnlSZtts50cN/6rvLWsT9He0GTW
p8hklRT0HSK6Z/ezvkOKUe9Y3yGzY4YgB8i+t2OZHNi+e6wByIHJoo2t0I9o
C8lkcrLQquy/5KRz3P/f38kvThfl53aUnxM643pDv6OhvlfZvDLnbdi8PmlK
HiB/lrjbsXl1kquZ/OHHuRW3Fscx+lMOx0WgHM5HOawwRnsR9F+qkqtnemHl
8ANML1yTnwR9kIjVmSzWBylf2IbJVdwvVcF+nsIot7v7SuWjvrjhFHYF+j6Z
dQ1i/Fwhcp3xs1ueJ+D3hfg93W0E/ZRI1sORrJ9S/LSRrJ/S8r5jk7j9JV36
1mx/FbtGH4f9fcyfK9p9rlTxXD05ugP6uJL3laeZvPUNHsXkbR1/fshDPD/+
eH4itj6A80P2Vy1j46vMcGHnxzhGvg30Xf38N2wfH4Z3sH1s3WkP/VHJeS0d
phfShU4wvRD6ohH2iwwM1mP71Tw2hu2XZ64q7BcJL5vN9utYUCvbr+UeesB/
smb6d8b/gXWbGf+PnXKE/qh0W18dpr/SS7yZ/rrF85OaID9XIz/3Yh/+G9iH
fxL24X/Iyz3aLfdGoNw7xPcTJjkC/YQXYH8YIWe+P0xP7A+z8uAG+J+aDPJ9
zuwNE42WmWBvpBtehL6+pK8H39d3k3kR+z9iLPaHuYb9YeKxP8wkIj8U7JmR
E7KZXKrarMbsme2+0dDXl14xjGV9fUcXnWV9fe/y8ocOQfmjifJHZ0PRdOjX
F+kz9Bf0M3z3slcL9DM8s1UmDPoByv2zKhbsQ3MTg8FgH/6tXn5Wkin0CSRr
cvg+gVf9UlmfwGy051UF7N7jjku+v1scR2J7tbP/y9ZXnGb/lx0x1+oAfGKf
KIZLxSQyvJ3PD6eC+eHL/lJntP/Qu/GurcG0uFU6AuzhNLFeVmAP1x38E09F
fC/21XfBvvrvsK8+2rfkL/YtEbRv83I0vmwYeouSfdMTljk3EOPZkZa65Zxd
ujZeO2fOU2otvc2uXLSB1HWmPBbTKyK1a3jcBvFqxB9fU8u5MPQWcTo+dCo3
Ds1MT1TawI3j2+fC8x9znpIDi+IzS0UbaODPb1vFue+PI34Q8TuI3+mlEX12
+EX6yXLGhohzDcQ1Y1fFm6oCcnWw9sDsJWG0bY6WhcHteuK4XGirqFAJ0eu7
/J6e9nWqnm8wab5eA1G4Id6wI5Q75+q9Wp4ZhZKWTam3xQrrabjbkCLvpcXk
VK/TQXUl4UTsk+HT2KXcfu2tn9Xpzcmf64qPkoZfJOINQW/Dz3F2yxb/5ync
vPP1M0S9tK+TJ5OfKM3Ta6Ap4WF6pqH/0V8tA45Kv3dtIOvKRDd8qy7AuKKz
6sTMKnXRmnqaW9EjtGFdMeKWqvcGuATmujbQvQ+ezf7BfT9pURislyySEGPr
XZE2oBLWm7xyEtBDvXIeMnoGDz3L6Anj+UwF+dz15GhXsWMZzd4ing390ISy
bm6GfmjPem9qVJ32kQ7dsT4W+rNVmPiPhP5sA/l3Ukj3Oymp+E6Kxbqz8O4J
EbaYyezh+ZZZzB5+wttLJB3tpZVoL33fci5dLewNMTYZzfJVWreuZ/kqFaON
b3jXZpCL8p8mQr+myOJU1q+p8L5s+1WrMuKkGdUb+j2WVF+4CP0eZ3UYb4I+
S7mSDc7QZ8m1WI6971n2+MsjGCdEv4b1fTo3pcYGxnl5ew6MTz8ltrHx1fRu
sPHjbedDvybiWC/L+jW9UPRi/Zp+ScxbBv30wq+sY/30tDa/HAj99JzSj0Cf
PXr2tSvD7QrMWZ89tYmk35PFAUTizGrWJ3DOLDnWJ5Dfd0/VTagHn6Ee/Mn3
FaQXsa+gFvYVVOfHoaNxnAU4zrLD1kAPHSMzgs17/MR4Nu99lHsDUe6tQLkn
VDX+O/BN7qCCOPDN8JrkZeBbL5OwNuifmXnllhjgE5b/vAB4I/9ePD2G78Vv
xPfiLb6qsH5EWQka06Ev0O9NU1hfIBtenhAnlCcfUJ7cjaVGkDcoe9zsNPzf
dNtsHssbHIP5xicE3ns9NP1SDfQdHTZhJXsPXbd/USP0HY2PGlcN76RLa55R
BPzNzgvfAb/Pv4dOxgi8h751xzQteL9+2v1R7F08mRFd7F08nfLwDuXUHLLo
uZMZrEvF87k4rGsm5pPnYT65KeaTK2De+DLMG3fAvHEzzOv2F3jvwAHzkHcK
9MH+hfnDbZg/rIj5w0n4Xvw5gX6w7/Bd+PP4LrwNvgsfie+/j8b1CuN6c/Hd
8Hv4bvhqfDfcFd8Nt8d3wx3w3fB2fB/cGt8Ht8X3wYfje9998L1vWXzve7JO
a/6rx/V0QsaL3lnxd2j4vC9RnXXFxA/foT6C71DfxXeou/uLXkS7sQTtRvEi
8k/nzQyyNUXxeP/v4XTgEWMD9Y4vZCTmD3gKnAcNfLf3Eb7b22MN/26v4v1J
rP/enC2nP0Pftsd7c1jftndK7UAnEVnZVxzodBf+xOj8ge9ivML/Zw/j/7O9
8P9Bf/x/cBz+P+i5qm470CkqXWEDdBaZWzA6u///+oDryu2OS5xbCOuiOR8D
2LpW7jNi3+sG1MA41N1pFcO3e5oz/By+OxmI704a4ruTSvi/hh3+r7EA/9fo
gfHzy6p/xs+731tsnvln/HyAKL9fmgFfBgEfmo0/MD5MkG5m/Gm2TO0H+Od1
9Qzfi+8qpuK7iir4ruJvfCdxNb6TeBjfSZyG7wAK4zuAEfgOYDG+9/cK3/ub
ie/9dftN0vi/5Is/+macVt2Cfsf6P/rZ7vo3nnMH/S9JfJ8rA/VOOuqdHfgO
lym+wxWH73A14DtcGfgO1y98h8sW39XyRbtXHu1epFN1BNKZinQ+Ecjnl8B8
/s/47s8efPcnFN/9kcR3fLbgOz4t+I5PyhPl0DDOfjw9fU+h9rAaolG/qHz2
9yKybUrXwBqfCuLoqXNg6edSYmJpVyH+oNtv2hXXSs59ebilnvp0JX0Z5l3y
rx7RvTBq1faoOqL2Wuyn+9XSf/kp+B4Q7zedjrOV7Lza43cNtahuKPfqLP+3
r6+uy5Wpgzn9snXOt82JscX/8l/wPaCTm3f9GLzgCd3we/XbZf51pFR6XK7O
uVJS0KYSbnDXkx54eLZOtr2evLgVdNBatJgc+Ms7X1V7Zil637pN3tnHn/oo
20DOTRyX2LK6iEhEq18Y+juBVk/w/e20pY4slFIvaDcoJTZrD7tw31PhfiHs
e9VUuwT4/lOHpGzR2myq8mGm2YrQKtK2UCN7cn4FmYP2wFu0B9zQHniDev8j
6v2FqPf3OzhKwjgXNALMYZzI7FE5MI7djo8ngZ4D86Q7gJ5qr+uMHpee9c5A
v32DB6Mnc0Upo2eEwPtx3eezQuAcNuE5NBxpXw78VG3czfiZvXYW42e/TjXg
J7m0+RTj5/ND8YyfGi0TxeCcVB14fwTOSVW1Xi2ckzPNcr5wrlqGOJXCuVJ7
Oa0azlWkk+TmBdeqadOIGSKdL7Lp8ShZuysPy0kb2nu5aO91ZfL2nhfK82MC
8vxk4YO8HY9raHzGex3DjVHkze4eu2dLVpAnaB8OF7APV84NnZnp8Y7MPr/q
QNz6WlKk4jz6jn8JGan5m71XrpQ9Sg7eK98QYdQI75VnzlYR/XipmIRG1yy1
U6sgq8yjN84cU07C+HfJiTC+S34R3yVvfzN49Pz8MrK2Z8qcvdXPiK7O0rzx
XrXkrGnbdnqzlMRcWrY7xCKXrlqjcmjNUY4fmBe3D/PipDEvrlvvXBfQO1cl
rxrDODPlX1nAONNnTDoA4xCBd+SFUB890nQfBfRIP9owH+jRvObD6MlHO9ZT
wI79LhI7i+MPLXp7aj/wJ3qqkQTwZwTPHzod+aOH/Ol+/70L33+Px/ffPfu5
9+L4Ro+scNAEvuUbGzC+db/nLizwnrtcqvRH2Mf738asgX2MGHrGEvZRKOST
HpyTC9vX9oZzIhtjeBLOyf21E7TSXtVRtV9XNskppNMQmlF9sLr4f96B7Zb/
CyMvT73gydn36vH21o8fkdCL93/071vyP+/AdusFs9XPenPnmSpVRh6F86wX
XVkD57ke7U8btD/10f7si/2in2K/6H+wX7QI9nMWxX7O5djPuQbt/2C0/13R
/heJUnfj+EnepZ7UA36OmbA1G/h56MGc4rGJGUSj5v535aQ6muzSMveAXTHp
s2YSyCWy0S2aySXJx8OZHBBB+yFeoN6tD+YFFWNekBjmBZ3j5ScRlJ/2Kk37
k2dmEDuxdq8eri9IeoxIybDkL8Qa9ZQfyk9ZlJ8mt/SelfqnkrLdsm1Pb+TR
ypETjO4/bfg3/8fe8HiH5sAPtMQ0pDDx4+d/9W965hzdu2OqieG3zRX10lX/
5usqz/30ROwXJWNuzL5XTbvziDzj9FG/zEX9Mnp+aALMay7W0grz7nGL2QHz
RrwJ2gf05978xOhvmSjB6Nfl5RsRlG8mLTEgV0n5ncVMribI7Wf8PIB+RPd7
f+/Rj2iR5/v3mmD/3p7Yv/cG+hfy6F/4o3/Rx/FJCbePtNZGme2jS/vC+bCP
3e9Z56IdlYR21KN5PQbBOWw5as70b1TvHUz/amA+wEmBfACrPT5+cS25ZIaa
94IeonV055Tzo64MKSKOaG87Cdjb2vniinAvNOklG7gX/h/av8O96LF/7IUZ
Z0rJt/7jKn4fq6RaR62+VjUXkwFohw8VsMNrvp1YCfcxc5awMdxHNfPFX+A+
nuk90Q3GGTPXsArGOSQj+wPG8S2eaQl03nKepw50Bo85NgHozPQ/OwnkzzHx
5YdA/rgNKmHy58gen8kgt6V1Tx4EfGfv2DGAP8F3KzwE/BQXfCfCX+CdCEv0
4yQF/Ljb6L+ME/BfrHl+UkF+9lHWBv7QOOX4cljX08w+32BdJ4c++pXHyb3a
6oErQO6JRKUYgNx73kmY/PxWcFsR5Gfdq15NID8dBl8A+UwDrDzmgXxeWnmV
yeduP/SGgPwXwv7VLwX8gkEzBoHeoZUSbnNhnLQvS9g4ytjnuRb7PO/CPs8a
Nf2BThJxNIjReemRJaPz5LpNsF80UWkA2y/jXqfZfsWhnztZwM+9g36uIN/0
0c9VFvBzV6Kfu0TAz9VaZzllHHcvuhzyP8O92Ba+fhbciwSs71uP9X12WN9X
hfV6o7FeTwvr9con1cly45DbI7azcSbIXFWBcayVwi+DXB2f0n89yNWnLq+y
QK768OeQdp/DEDyHj9H/FTxXaej/egv4vw8mm4dwdg69N7mS2c+qQ1zKwM7J
QP83TMD//YF+rj36uXbo5xpiHqwd5sEqYh5svyUqM1f4ptHwLdWzV8bU0HkH
Dsx50aOcPPkgDPeXaIatOgn3d6ZpE7u/en294D6SE3NW7YD7+OLpVnYfE38x
PUtOnujL9KynMq9nVy7wBz1Lpq/b0Qf07JOx8kzPfug9OwP0ddKmrMWgr1UL
rZVBX2tMdfIGvd804Avj5xCJvoyfD2ucwT6h06N27QL75MkucWaftGKe7TLM
s/2IebZLot99v3MqlX5scTSXF6mlyv3WGk2PLSOvAqJAnlOdo0+ZPNe5+3rH
f/RIoKrKHF4vSKFeSHYIATlPRcWuMzlvoyzJ5Hx3nmQo6p081Dvv7JpBr9Gi
rXfZ95aevdn3b2atBP1FX3SaMf0lLjSM6S8tzDMUwzzDdZhneAb95RD0lw3Q
X3bm7T0ahfaeFtp7yE/yGvm5EPn5jJcP5DvKh3qUD36FKmAnk/fOS3rCvthL
LWJ2cmZOONi9RMzMax3sY1qxCLN7azGPbo5Afl13PpuyQD4bmdMf7Cji1qht
AOdEdn84s6OaPriDvUR2v7A9BedKPDqQ2Uu70B/PEPDHW9EfXyfgjy9077gK
9yKd6pTAvTjwU60W7oU85i18xLyFVZi3MBLzFqQxb0ET8xbu/yUP4WWvF+Af
EQnJrcw/UvQyYP7RaMtDOR/14qnY+NTOo5s4/7TVYay1RAlZM9VO2Cf8Nc1Y
4LVipEQ9XTHGo1i/qpgc+st7vgkYd3XAuOsrjLt6WBxugfHlHcs7YHyZLbcl
YXznY8VTgJ7QruPM73O0EWZ+31aMA5hhHCAG4wDdfv0rtH9M0f4ZIhDH7n7v
e7dAHFsV49huPD1EkB7XU08XcHKDnFhrwOTGxjcGTG54vSlu4O4d8Vuax+7d
hRZddu8M/W7PMJpKye57FbZKtvXUPMZpnG9OMan8yzvCI/7yLvD/AbWXZ70=

    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-6.59734, 6.59734}, {-1., 1.}, {-1.9999997142857142`, 
   1.9999997142857142`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571099825773563`*^9},
 CellLabel->"Out[19]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy0fQeYlFWWdm1VV0ea1IFu6NyNBCc5mBBRFB1nFHPOOWCWoIKpzVnHiCUo
goCYUNtRRxQzZgVzQEUQMMzM7myY3dmd2bn/Penec+/3VQOz8/M81XRXV1d9
373nvOec94S7+9FTTjr+tKOnTDz26LZdJh195kkTj53c9oszJtmncv+UyfzT
S/ZxQlumxH5vMpnEl5czmY36/pf4bc6ccMIJGfmXxa8lwXPyxOnr+dt80fcL
nztFvc9Y+FLaYn+d9td/zztuS7+HtzT8oMv/R33AP+rW/wm+4JX9BF/effzx
x9f8g957A14+gt4cPtWotYKfMwP/QZeR9jeb4NcS/bnwPb5VFn7qH/4R/l/2
D/rwLnpOf7h+HTyPC9DfXc3f88kb8PL29FWgT3PqJ9fTP+UdSt0rtV7m4YkO
d/V0q+5vyv3b60++tvi1F7nOKv8JJfIJcrHXqHf7p5S3bCl2dZXuFzkvEfDd
1et5xyHpFznAvQHvgLwAf7oqflNcuvrwlf4qB7o3y7nv9FsMTvnDEvdKfyn+
uSvVXw9Kv4NS/6buZlFEygy9np+TpS9Juc8r1MfUpVwkXRr+usJ079/HmNmD
jLm5zvzusoHmw7P7myUnVZt9f5yXz6KLz7vv9PsP7G0j8BVVxrzRasySJmMe
G2zM/AZjCvXmP6+tMSsvGGBeP6OveezoPmbvH9HHZdUiOHCCf5epD/W6Gq0U
fmymL7zImLVdxnzeYcyyNmNebjHmqSHGPNjY2836D8fvLlcfWZ1+n7X0sfSB
39oP/M4+vu405sN2Y15v8be9ILztN+xt99jb3udHeTNq1Ci8iTL3wfpeld6F
90ofPZA+el2X/3i573fhvpuL3vdzE919w7uXuiWPPudidTHl6atAslxDl7LG
3v3aTn853+oViQThjnrzX3ZFvr7QrsiZ/czjx/QxfDmkSf6j5JJwfS5Vl0RY
no8vycst6XctXdxqeyHf8AUGa2Z//syu2Tv2Al+ya/akXbMH7Jrd7dfso3No
zfb7McJGhfuAS9TV5Ehye7M2tFb4tZ4u6mv7was66MJw9brC1Vtpn/uA5elZ
u3qP2tW7167ejHrzp2tInt7k1YPPsO9ZkfKR3eoyk1vohY8ubRBd2gr7sSv5
8oqt3Rq1di/atXvCrt39du1m1Zv/vbHWfHeplze+vIxfPJau/01Ztyr3IlLr
ym6+fCve9rK+aqeVk8ta4y4tC9eWqbYvgYWzWvCqXbjFduEW2YWbY3f0tjrz
r1fVmC/OI/yBD5QF8lfG6/U/6evVhk83msZGe6cf2c/4zD6+UKsVXlK4Wp/a
171tV+sFu1qPDyFwuLPe/Pf1tWbtxQPN8in98KMO/FkpXkRlym5eSFf3Z7zc
FK2l6xuCy2UBxhQuHWHMJ228dB3Flo6uE/6H17xnX7/Urt1v7do9RAjyV6sN
/3xljVlh1w6ukVU2WruL6CL+lL52nfh0k9vOwsXDTeESe30fwzra6/uy3StF
sWuE5z62r3vTruNzdh17/Dr+5YZa8+0lA/Ejbz5xtKxjpbs8Xrx/L7Z45DOy
GXnTvvk7LX4RP23zapF6kSB/61D+vrS/ej+Sv7n2Gm+vM/9hFfe+KduaGSdv
g/ZP1lDttbuc8+m/PyZXEx7D8OkWutil9lNetxf8dgut6qW8qp/zqha7aL2q
IJ2iyxEOLpy6rZl1+hjzzImIg92ZdOHkC/5D+vZ7L28ovqDVCYJ5xV7+a820
5u/yml82wisXCGXaLcjlA3LKor/GaKmcjofP3dbMOWuMefU0sr7w6eVOCFAG
+NJ/R3cV4FGaa0aizPb/BbtYL9tPfNU+3iCpwU24jFUPpAbuAq5QVHCVu4OM
gy24q08YImQT2ID3XDgWxQYgAjfhJ+Q20bWVBteWIS8Rrp3v6rv0DcFgNNOf
buJ5+2EvNdFWgCS9ZZdxWQvqZ+FyeyOfF7mRNZ0k9n3DnXiPxf8Z+3aPkx/U
c+F2ZqG9hxXT+5uldicYQjzcn0dXuy5lD36m13uJvdTn7ONFXnclOXi5l7G2
gvDLJfvLtTIL11tB16vXHByAxQR5EyZMMI9NH2tfa2XRfrVw3y2L6/FkOj3x
Tfry/hyfZkft2cF0zSIrS1lWrMKa5a0k8ZezxH/G1w2Ku6pDIJAuu4TQ8AsS
9sJFI7J4hWWm57Lt8ap/f/lA89m0/ijrvMK0xFGwMI2ufZVTg0jC6erZfVo8
mB6w8lpQXmNBeVcJyifqDr7q0HcA0pEjQw3XXGVhaiStujWGcP0gIf91Xa1Z
0z3AvGclHVyHg9kYejHhK/8qfdW31Kv+9GB6wOo/ryQGNJXx3bxHq4/X/aky
lKs7WbjXdlodQcG2cIMbdf2m5GOAa/tKC3o+PVdtj1cBaPnPV5CdBB/jyeNw
C/q4qz+Xrv4L3BH4k63x503ogp+y6v5bvuhnUkQGMb4ZRQYwPoCYle6iA0cc
b+77Li/uH4UuJV61Bcn/YesJ/u5Lp/Q1B/wUISZNds6he/gsRVHxp+CWnmz0
t5UqQ/bxFmmveZ9vC+TI3VKHv53v+XZ+6PK3BLerwz3rtOAtscP379bgrrJx
xjuT+pnfHl8dbgbfyMfpouQDeBKq4XhD3YfYwPmJRn9jiyMBe0WZAlZvd1Of
K7Vmn9rtz3fsgbGkYfD0EXs6zzfTTS20n3eXvbGbas0frKJ/ahX95VP7mgN/
ikrSJ+OkyunyVLrFD1P2ant1V6bHvvPj9vEbvrPeJBC2a5naritGeB/Ybhfe
kfiTa1ki1/DPcNcr7OuWk4HAu4LAZh6Z6j9b9f/mogHm3cn9zGGjSuHaKKhJ
RHp4C2fT3b2XvoHj8OkG2raD7LY91uBv9EmWyWdYJvVNikVhfHA3yZiGNygh
EWLEao0Rwe691Ur3qIy5uYUwAmD6Fb97KsjOqH8ogLyLy1J2cTw+V0e7+Ii9
wUcb+EYbSE5FRuUmQfEQBJuVjNrHB62IJ4UrRtINruzI0J3lSF7JZWHzWU0L
8DntJN7hMxyistMFUQ0A+TK7k4fTTjKbEgroZLq1t9O3cCd8mqLS7gPsFi5q
CO/yN9EdohY2JeVV4MXeIWL4lSPFKYC7tPeaEwdBnDJyatZyIG6xHu/yeY50
xTvGvRxoPmen5qCfeU3EnZtCt3cb3h28xWb4qxSLuzN+ZW7gIfvWDw/yt6tv
VVs02dBYau2GgtS6W/2yPQv3C3e5kvdyrewl3+VqiufxLl9RkQtTDkDYfGP3
c7nfz2p3l7yJt/r99fKb8tym6ZtN+Zb6btzs/auswgzyK6FX4Um1Cs8NiaBX
ifUyH0vYVcgCSoEH9WWHt5bryH/NwRowd9Bz13jTM2NHii8hTr+PWI2//boW
GSFAXdhri0/dxaT6rI1bkBFOKFAmfoVPNpEo3G9v/oFBtBgiErAQj0dILW5x
ClqjPlsgA8YCF8TqOHnyHHF/k7ISdnV6Zu9keu4c73lUYAPuIcP6b1fXmK8v
IMMa6DcKxKSNu/8iqSJPwO+CL2gm0djXisbCeloZvSqPpqzKsxHysaLgKnQP
R+tsPmxF64yrEjve6zozaln6oiHrmcvL8ppi5hTsgRv1sXWjXvFC4ldmIyWj
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
MlkGpcsp8QhpJ6kSUt+QZIDlRCvHAbCbpaohjA91YbHfzuNvZ58rh2eY6CCs
LS18KpF1GN2ak4GzICwMcIaGFD8INHOyebCyNL41QaEmIWLrLExry94XmFZf
p1MmA+8rzCr+OJ3FhaCSXVSAv8XRojKuowaH7RloXOWQ1fOq8RZ+CLUDVVHv
ywaKQTEWf89trTzYblaw3aBFodcL2Ljzol9H4VdzjkOW9JR6IOIaK6/PZsJL
Fk8Z3vKHk8vM+/Q6e29imXmHXnOwo98aJ+7N61eWmNcojnz1ihLincQ/L42i
aO3FyxGtwSN6Xg76S9BbvgkuUnGaraRclkUzuggtbK7wlVEEtlfxhnhFXzNL
P28PJtpo+jRhLY2vSQNqhFjc2eKMoOkiPQSeFIDa8U2QVkhdPkD0QU0Fkgao
sUAN2D715eDT7abj8pM0DXpSVdLs6F2YNDt7FyY6mV19iszuiySPsZcOGH77
iWx3MtmamHuJZg8MogiaoujxJMhAMlS5PTWihGhWal4YLQYj2gJAMrRJZpAM
Dv58zb8sJvU1gdRXXedMitmSq6yRYRuJDO8IokIkrB+B+ipjgnX0jHLeVra+
4H+ZZZGv/I3eBuZAQNFBJwWRCBV6v5JQbxjTCaTKZWYhDBzu+QXeJaHArDG/
sTlXV7ksIpjlq7EwfRgf5tjhoO4Q+8CCzcmxREpQxeMnscAlHQxO4XulnSDj
tGOL2HTtQJrZGlJhWU42luFOu9jP323X50aqI5K8V6r6R+y7bMvxIism4llk
0Epcoz0X02iHiBs7cQ8IoNaO/w9w8eC+DGdLldhTQZyYrTgiBi6cn+ht5Lk+
iBowhwPN70O4olBVRi23ivH4lbiJrzHjsl4dSJm154zXN3MrzNdzJAsGmiGR
D5J9NBWecpn5G9Hsr5PKkEMz7xPR3ptQat4ZLwm2uaTckJz7CyfeJAmHhNzr
Y+Bb00f0E70xpliSdHobMPfmGAkI32SLCm9z+TZY62CVtdjpvR1VwmUKmit8
e0wxG1tpsepx/zwOMtmGV8U206u0hF3dCOsd+QAoNCQ4kehEwhNcQxIUOQXw
DOUbGLu5o1chj/tFIhVJ1W10oObsshPhMdD/6KffdoGUs9FBtzXQ259ybhbt
kbuUdyiBQykcWpfGniY/Fyp3USqHwhQkSp4hxYZ2J8e4iSHj6AqjkSYrNeJb
/UUd2fWK8G1NzL8H37bF+GZr2e/Swi11vHD+ObaxOiv4/0S0NKuzY0htDPxF
Do6UGURoE98KUMOfBwa8cAtwE+F2pkINEaVYg+q6e4rh4CJTtNiFg46VZ1JW
0dFruJSLLNWX38JdgfY2ghhWQUjy/zD9rlaTIQfZwicirb671dlgyR/Hs0K/
viSj2qu1LN90+uyeNhShZOMZ353iTfCsftKRP6DPMvKTCQk8U8w0cEtK/Ihi
8Oo06ch/hhlHZfe7nlKn/oksLLNuvW0N3K3n4u26U4d4yfOEhh3uFw3EPbBr
s0SZuM5f3VRyW707MN++Z8Yhm09cm13B/tiXs5DpLzefkUr7lPj2z2ll5uOp
KGb6x5SyJGqZ6FddQOHo/G615kOtdvpgYinqn8z740vwPoUP6Kd9D/+Vg55w
uQ2rX3HbB3yb/OUWnFfDw1rsgYrRv/LX8BCpFAq16K5cknWlNAhyTVeiiv15
W0eBA65YXKVBoYUYgzxDDQekGWQZSvTRMM34UnShUg3NjJvp2KgNAUPpuLkb
NwikcGPiZ9yztAVfSmRDOQmqTLYTDXdCwUG99WvCw7rGUPx6z0Ap9kXVCgYm
P8kkK42RTGbw/G2qKDUsq/lG401kJDl4shSzWchDxZm79Cy6U2NM9cYg/esG
BAqNKZYb5ZDM2f8XKZYbfmUYb/5XALSjSX70PybHDDiGJNclv0BZ6qBfeusL
Bz4myCXNGVjJxs8nNzCHdV0SRTLCcvE2HSgyZ4jd7CQbh6EBwuTjTc015EyF
GHMJIN5uI/skEjGS4R5YX3+Zg10EY+k4xpJuuIsqst2RWVRJYAw7C3yQ2agy
47urMoOTn0GyH6/MrGX/GhPNbk15ness6G2l88igzhzR2CerifpkKKewLv4j
jRPNL+Yp8wqtQed6bLVhZstGw0zuGZEKsiTwRkEXXhr8J1lkYadlSfO1onIe
Cr8ruAD82zkKu1nlSfPlzPJEEdeKfzFD6sYXn19rFvWoNZ9Ok9py1Jij1vzj
yaXm4yml9PTRR0nz8aRSAtdHk/zeAhyoVkerMh5gIeZrfoKvRUNOLlp1eAoe
mncwf/xvExl2aZTLJ2rM/HOjtfDQdUhIQqe9pslGgA1QY4fvTMl7wjlDPxFq
9++9OKrLdqgew1iazQSxTQQvdGlvQJ/AufnmRjrQv3TpHyn+XHdOPoWeN9BN
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
48CGs7xSNFo+j6x3aYIwDSAY8xRL5Epdf0MLH3oKxFLRQovGKJbD0SZ/r31O
jSUEZeVZ05WZ7pkPOTtpTX9QbYHHOkhXVev5RzTZszX2wM3s+XPHuHr5T2s0
UyVzMJ6s1m/wk+xCLBvIfoQgc4s0IcjCqouNrXDxaIXhbnizBRyzlbJCvJbC
tKGHubiRp8bxzex7tkzrLCZ8gnkmY3aTtsbQbobDwTstK/WMuIF9inWVXouv
0Uvi9bLuD3+sVXq1FJQlYcFhAezF7YVgy+Wiyr9k3/ay77RxneYw9r0INPmd
WvDusI+UYgg8UeSPoBO9Smi1RL0FVnFYhMEw23ie5CVXnaX4Ih5hSyOWw2IV
te69p5Pj/N+0pQvU1D/kmunEMvBs1gl5xLI8J9hgqEGoIRVAAs2sOlu8/3Xn
FXLIuYnCzeF/lv214Nho4tiVp9XoSu2mZtPoY2Vc2EWcT6a/miqxDRpSbrNe
flCcH7LrSS6sYHuqaXbEZBsYJl+ayFYCm+OQdUz2x2sid/XIelwLie5pJ/vR
NZuF32CNZsv7deS2EjwLI070O3XH0jODKZgPDypCgy7Pb0O59CeT5Yl2+YH5
miOYpyfGEs1sihpzYsoCbB3rrXXwgW8AvBRjFOpJzJJpsDUOMdZigQdD//PO
WSIVxpOJpHP/E5oQ2NPKH4dIAHh+ZYaT/DjKsKDyNQmIJZliadFjdhzPU9WM
qjQ+QtXpZDXtobNs9vFxMfO5xykbqu5TG/budsBtW+iKQ0mveHHFNueQeUCh
PQJ/nFtaoc74cLfoCk3kvKacDxTn8ZuWdoo31+5hPNLWls7m3NwChjtPwGzu
S2o2NPcXp1CCWw22lgXXGmyuUVjR0ZSFF9EK+ntAB+ts8elVr8Lfqq3GY8mk
BoIBoniXIVTWh3RGiylWzDUUMMTQDo4WcBSyjtVhZbiuw4QZrC4Y2LTwZAoO
STvNIh01jTg05fe5pvuv28q3+6np8Zu2Zsof5FPTWW7lmdkWT1jpeGo+b1ZD
/HjtWQWcmoTFv57QtPH8QrOVnbAmzgm779Jic2CYBI/PjZY05Kxza1le/W1a
BeOKA8elOph1tVbk24kVqJXYERSruir8KuHEU15mlRwycixpnFpcJcb38ayy
23pirCpVueZCxYM27mgqVUI4gRtaieJfp4WLqLa+WuZzzqffG78/Pz0nVmE8
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
xx16qdK7Sj0ZA1++E/cvz3vEDfbNoxOoVoDDgDzFANUe9HNNCoDuHYwA94pz
tMadiVd09uBmLvyhX7yjjXm81ln7NCezhbqLYforDhYdrUE0WoenTDmZ5WUJ
/Vhdu7DOt+Cs6MK70nqL4f9VUKvbirGaFPk78tyc0HNpT63Kgn4SFukcM08x
r+o4tu9mBPqKMB/02wc7zNPzpenmJt/nDCLQpwaWQV+woA/p9t1QcBn6MvCU
RvinChPv4N1Y+OJyKcJThL+P9/hrzquhnUcIumgeAjUUZO/w+DrR/pJk8Cn8
3Tgcw74b1I90cT+jfiCj/nBB/cMR8tXVPxa5+JUG8Ws4ru/6xY5gBDr5NTTR
dMWNBfsH4tY/ImzncZvLYeOBo08E6+mDtJFYEYVfsp5XgDrVxqYwsffbiIsC
fWXyxYF+cQ/eU/nVUwtbT9i8PMiDG+/23hCkFzuYc0YP4C6o5YZcwa5NZ2pv
nkpGPf3onpWAtC5ex/bm6GhfIb1VPdwR45157Q7dJJog6IZvR2kemTy67aDh
zT++B8X26LSD5IksHl32/7y5n4/rZ5pSHXXXJYNfF9HtVAVH4U1zct90ELSB
aluGF+I9XdGbh3tGTRay15dA9vPiyfVGKbJjrStFti49izUt5gziNhvWQfNI
HL0tDuPzqmblgW3D+B9EUfxJaRQP2gx0dzHurqPu2M+KV52WuvKFJ6bJ1Jk1
yeupK8eIO8ZmqM05s7ZoEzTq7cSuxUX+lLOgzovZlfd1yJWW+W7uC/vQv/v5
iH2uFPsspBXOcOKPm5baCmHGESOuMafLSuLqWyaGBb+5cu6qfKYP6rTgyH6G
J6TYbiCFI8U13RdVO4Lz/6AoiQ/D9oyQnV4jzt75nEj2Xh4uzOPtVfjecpro
FT+eIltQXVm0zYq+jwn8RbXMwy3EsKZ3oYz9vBdorCYcu/xdMT1bMD1XeTcQ
ZQhdRsFgWtttl6fxeozprsN5rG6hUOgg6o1xOuTqGLAh6hxmYpU2Z6ty6q51
oEYpc5qv/9pF6wbTBYtnOSftfONjdpzhzwdYXt1QrFilWHbDM3WmjcZYdrQY
i+W5DsscmvN6d3ppJsTlSoFZ4vJ/YucczsekzhnbfMbK3Pov9mYwjx/liTAv
i3N2czEYVJw9mFNyIAxgfr4xWXZ/6pyn7ePkZsQ5F+GYg4QwB9+bvtabnfNh
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
UiVLDTDu1WEZd5mrxrkLS95lrv+c/cPK5PMr+xDj7+8a2D8ibdZnJX7T+Uit
/Wxs90rUW7T+AzQ3FmX1rsEfD27HPttm9a9EZIrnG8wOr+AO53GLoWfwON9g
R6uB7Y4aDfENzulinu3cvcWyQTDzELgvSP30qrMRuPdJTXZ/UvB0+dsabSNI
Bo8E+I3QhLtPriFalMErnZTOshLypKCV3leZL8/2yt/lm3uRu+98S/ekW3rm
DzhXo5B8stRrFpqJFc0yMuh3aqpdSB51ykkgoZRai03Q1CWbOJRez+7+tu54
+ZBwQvPxOh0Gcat0+J66+0kihCRMKPc0l3FD1Swj9obOMbgXWDeD2BvTPF3n
mkxM15lRCBFQLuWzjzCl/jZTnzNJKX72JeN/08/YOa6X0SfLvqFcYcxd7G6o
ztqqJX7vkvRN/7IvF+GmSvN5iQmz3pQ3+6HcEGuNv+4QCgQw2uC6ha5/asfJ
P23thvbQ7GIsJt40hn0eU5IVf4ubtFQBOlKptgsHhzc1I6pOrS8+O+846RUY
X8hSgcIATjTGVjCpQwBFjZ4o3zvkcdCxEUYLVG+3+Nk8kXJztRWbUL9vOsav
FqdPeDM/7eY2sjxv7hJnc4fSv3mk64wfVLiR6L/f6YcuyNQiVdY3+n7kUL2Q
pcbKkuiVyo2KurotQczU9Qvp2b3UWCwN8EwcHw8JR+wW6+RKlbmHQ4vuX062
wnDq15KMH9VMO0afO7Mm+SCNKiDv+o97fc/N7RbU2EirPluifMClPcbwvBMR
8YxFzeXsehrvHjlYz2zA8j3r69zjZ6kD+PeJ/aTuJeHuk2JL1QmYgVK6JSTH
py3W7f2QUpzWBOXO1mLI2Sb8yz7wCaZ946BHGUZ2pd5CX+Ey1W01oTnzH0Ou
txMDQ1UbLwexq/P2axafKJqsSGPO2c4zhl6XoZb+PrfXTx0c0tbiUEeDecle
cpyp/CTj3rGRz13mbl2HQRkeUJ6BB/yDesA5ZuQHlv3tZt/49AizQg9AWXM3
akxZKDOVeehd2d7E6qhxFQ8k2LGRJRiJXDQY1dOwJ5Gn8ZFC0nk4l+/c2c61
0t06c7cy4mxjjBUyJHjFziNak0nHtJE0Gbja9O6ukG6j7n7ErYrrbdbJWQKE
RuQm98hJ7stTJhn8l334f1e4J/EN480ap3+/Ivng0t48i2bN4lIzOf6eUqmc
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\
\>"],ExpressionUUID->"4271c068-c7c6-4a4c-bd27-e3357390bcc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot x^2+y^2<=6 and y>0", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "InequalityPlot", "Inequality plot", 1, 1, "Input", 
        "RegionPlot[x^2 + y^2 <= 6 && y > 0, {x, -3.1, 3.1}, {y, -3.1, \
3.1}]"}, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], "\[LessEqual]", "6"}], 
                    "\[And]", 
                    RowBox[{"y", ">", "0"}]}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "e_1\[And]e_2\[And]... is the logical AND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/And.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{
                  SubscriptBox["e", "1"], "\[And]", 
                  SubscriptBox["e", "2"], "\[And]", "\[Ellipsis]"}], "\" \"", 
                "\"is the logical AND function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "InequalityPlot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Inequality plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "RegionPlot[x^2 + y^2 <= 6 && y > 0, {x, -3.1, 3.1}, {y, -3.1, \
3.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             GraphicsComplexBox[CompressedData["
1:eJyFnHucTuXax5+ZQTUbqSY2pRxLRdIWJVlLSe3RQWoXqXYkyTFC3kzDUE5p
s5VDthmdnMqu6DQha3VwCKFNSaIMMc6DmcGY53lerWt9r7W73k+ft3+ez3eu
51mH+/rd1+G+b9XtPqDT46mxWOybSrFY8HnfyDUl2Wn+4K0HG3RIvOckDnUe
mDYiVbnp2GZ/Pm9EivKjddK9S0bElOs+vWJt50TCg0fNGVpzcKJcedeWy5+Y
lChTbpe+9cO3EyeV57SekLoyUapcacCNHXcmipWfeP1gbnnimPLqTbkHaiSL
lO+tnDeoZ+KQcvWBsaq5iX3KW7/rvmBT4lflWa1WtEtP7lT+rM3dfk5im/LN
Z2ecOJzYpPyPNxd1zU+sUu7+Y/CpbD87yfeVG8j1lGfL/ZRfkudRXiPPq3yW
vI9yO3lf5c9lPJQflfFSTvYPxlM5T8Zb+Sbxh/JP4i/l4eJP5Vrib+WHRA8u
fJXoRblM9KT8tehNGf0xbugPRn8w+oPRH4z+YPQHoz8Y/cHoD0Z/MPqD0R+M
/mD0B6M/GP3B6A9GfzD6szqD7Sf6g9EfjP5g9AejPx2/UH8w+lP/hPqD0R+M
/mD0B6M/GP3B6A9GfzD6g9EfjP6s3hgn9AajNxi9wegNRm8weoPRG4zeYPQG
ozcYvcHoDUZvMHqD0RuM3mD0BqM3G8esrmD7id5g9AajNxi96fiFeoPRm/on
1BuM3mD0BqM3GL3B6A1GbzB6g9EbjN5g9MU4oC8YfcHoC0ZfMPqC0ReMvmD0
BaMvGH3B6AtGXzD6gtEXjL5g9AWjLxh92bxo45TVEWw/0ReMvmD0peMX6gtG
X+qfUF8w+oLRF4y+YPQFoy8YfcHoC0ZfMPqC0Rfvjb5g9AWjLxh9wegLRl8w
+oLRF4y+YPQFoy8YfcHoC0ZfMPqC0ReMvmD0Zessm/dsXLI6gu0n+oLRl45f
qC8Yfal/Qn3B6AtGXzD6gtEXjL5g9AWjLxh9wegLRl+8J/qC0ReMvmD0BaMv
GH3B6AtGXzD6gtEXjL5g9AWjLxh9wegLRl8w+oLRl63bbR1l85yNS1ZHsP1E
Xzp+ob5g9KX+CfUFoy8YfcHoC0ZfMPqC0ReMvmD0BaMvqyfeCz3B6AlGTzB6
gtETjJ5g9ASjJxg9wegJRk8weoLRE4yeYPQEoycYPdm+z9bhtk6yec3GIasb
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
WO/YeKTxI4wz2KlnVL9hHMVOntf17jAuYqeewU5ex856nt3fxu/UJ/SV5Eu7
f40fyZ/0yeRHu5+N38iX9PXkN/p+GD+S74i/7E/Y/WjdTwzjFetC5C++D/N9
8hnfP+fnUZOLp0b/P5gXBjW6ccj46P/PQb9btfs1jTq+tkHrGLjaoFp5QwdE
dVEss7E/7Laojkn7x4SZp89L033A/Oo/tUp+E/370pXP3DkzLSuqy3p3b7z5
7FrRvuSc74cVVp0f/Xsd8k3vR/udd+6cqA6EDx6999TU+im6b7pnYo+MvBej
8/jko8JfvCsvvbzE6b+oaMFdy5Jab6BH7OSn1+5LDs0vP6F6hk9Oe/e7x5om
dB61mXRDzaxe5Tpv1hUuS5/xUJnOk7nyO60vyD+95DmcIrmvrh/xXNjJRwXy
Xu4geW9dD+I9sZN/XpdxdL+u607MK9in84ZxxU4++VD85GaKn3X9BL9hJ/7n
iG70PEtF0ZWuu8Poiu83mHl21uDpaf7y0du+yNuxwDn4ak6TIRPS/L735F71
RftVToVnWoxpMTDNLa25YnPx5E3Olpv6Zf65Y5pbcezH3tSxPzqV9rUef8tz
qW7Lhyf3yz2xz1m5Y1i7V25Jcad2HF6aOu6Ys/RIlcJZr8f8zI1/Sez+tNhp
3Gz+T3kTE07H1UtXFE086UxaO6f5sEXlzpH4/aNeXlSmn/yd7/E7rst9LvZv
aDuryn7v+pkT3rplePQcPFfmrrE99k7c7PXa+u2yFv2i9+C9eA/eq9Z1Nadn
JVP9A91/G7emTub6ozdNOBOv4Kwn1uyefiYewQ+ktK/RIZn04E//cqJHz2Rc
uWbP+YtzkqeVh8/oEstNnlLetib9rvzkCeWb4kv/tSlZopzbtN++w8njyslu
l7RMjx1TfvSVDc83jBUpj3opZU5O7KBy+2OPufmxQuWzH1i57XBst/KapY2e
aZjyi/JFbas3zE/9Qfm19G1dG6ZtVM6c7zRseJavfKDjod8+lW9+7MFkh8Oe
A0/Lqz+lQ+kG5VUV75ySX7ZFuW3rcV07lP2s/Min3c4/Ur5LeWYwX/cq/3Bk
1rac8gPK1V9s5XYoP6J8xQV9O6Unjip//cuSCkfix5WfePecTzbFS5TPyur8
ZH78hPKcv867KDd+SvnWGqXf5MRPK+/a3W5kz3hcedTil6/tEE8qV3MHHpue
iLnwjrkzOkxIpCi/W8V/K+tMHwF3b3L5DyXPRX1p39TaT9a8Mc1f9O2Ta3vU
3uF8cd27o569LM3vvjyrYe3cX5xeYnex3916WYPaJan+xqc7nT9wyy6ng7AL
V5h22QtVDqe6b1zX+MF3bt7trO47qO3Ylql+77MqfDDkl4Mah4hLyxc8fXvO
vOg82TU1ltx2wcEUv8Md/jUDFh9xGgu78Jriq0snrktxc06+0bROjyLnh4/6
N351b8zvuO6jYUc3HHeOlF/d6fxe0TrBZrG72A9m1P36zTox/+OG+dU3ti11
Lptdf9IbLaM+bmX6oTv6vBn3Rg64u/D1N085dzS4YG/n8oTumy4Xu4O9W+qu
t1746LTXVT417pMHKhQ8OXrAfXHdV+V7fI6T63hclzxCXklfOXT8+L6ndd+V
+/J98hB5adyJP+XOu/6U9nvL5T29Qnlvd8b1awv3vxH15ffLuHh2nOBxMs4e
495F/ODhl2HiV+8r8bNr/Yaf+P37ogsPnewQ3Xjo6CnRnbdcdKi6Q4dWd+iM
61G/9Mn77f0c7Wdh6gmY+gAm/8P0ozD9J0y/CZPfYfI3TP8Ik69h+kOYfhAm
X8P0ezD9HUw/B5O/YfI3TP6Gyd8wdR9M3QdT98HUDzB1n45fWPfB1Cfqn7Cu
g6l3YOolmPkAM59g5idMXQZTh8HUWTDxC6ZOgntKfNXzumdJPaz9B+t7Q7Z/
2/tUq126ngdTZzFuX0h81POR/aVe1v5Ez2dVu3Jq59Qj0XmJkI9LPNTzuEVS
L+v5SPqdaW9e+17JyOO6PghfKfHRJz7S7xBHqFPxg557De33SfzU87yx6UGc
0vOX9EM2bsHMP+JpZYmnej6zncRJPZ/J+TAbN2HmL/G1mvxd+6fNch/tnzhP
ZuM4zPwn/k6W59b1Rvo38ojtKxgXtcu46Xoj/Rx5ivhB3zNL/KTriZw/Iw/i
Z75v/Wz7KnTC74lH9Gmfia50P3iL5HHdD+Z8ms3rMLrlela3xDP6yNEyL/7v
eeawjrF9qp5vDu3MO65n513rZz7bfN2Z33Xs8pLbsOJGZ3m/am/de/eZ/rLf
WU1eeOSYQ96kXujw979d1eXEmf7vk7rln1Q8qZ/8ne/xO67DdbkP960j/ZBL
P3T7wLptK57px0/3/nLFe7NXO+2EXfhs6SN8+gpXruNz3Wa/fnnFyGWp/iuL
q764sniPM+GO4be7S1L9Vlc0Sn513l6nidhd7GPE7mJPlz7Gp69ZcvOK1ybN
TPG3ZK4oz2hx1PlY2IXXSF/k0yd9Ie/p894Fq+Z2zhsT8ysuHzz6lyolzg5h
F957w9LTnfokvcfTRl7r9znh7BR24ObSh3n0ZffIOHuM+1Tp2zz6uBPy6dHP
3S+/8+jnbpHfefirj9zHs/eFK8tzeva54Vx5b4/+cJC8t4e/f5Zx8uy4wbfJ
OHv0j2+JXzz89Ffxi4ef8Bt2/IY9o1agC49+s7/owkNvLfsEOvKsrmDyE/mM
/PL7eiWql8gHWi+E8RwmHsPEU603wvgIE+9gztfAxDeY8zEw52dh4hHM+RXN
57JOqMz5V5h4A3O+BOY8Cazr7iETj7TeCs+nan0SrlPCnH+BiZ8w65Raj4bn
eWDiN8y6I0weh8k/MPkNJi/C5DWYPAWTV2Diur5/GHf1/m0vWVX8z+h8ZvbC
/ZsqnOG9ey+6onqdz53y7s70lg+n6b9TmXfP9v01Hkhzn1v2ded5N211bt6e
eXFZkzT9dyv0DfSvdaqubzv8z2nujLHOR+e+utNp8vrjd8ePRuc7z5a+waeP
2NJ1e2721lR/otdwwbZevzqvbrjowjF3puq/u6HPoZ/1Ckq/Htsk1Z3cZ8vD
T7U75KSPaLbsxV3RedD10vf49EEP5j/yZO2vzvS3GzY2bzO+yDlYd+numj9G
50FHvjf0w/r5Mb//ZYd2nnyqWPVsnwNGv4wD+rXjBjNOfL/W5/d+O+RM/mB9
oKBRzZeaT0vznz8y+df4nsVOtWvTPy2fkua3bbbo3n7PfeZkPth42OjsaL0q
63iFS/+ZHa1XLZy4fUVedrRetaRD362d44lovSe79uWD4+XKWe+vHzwpXqa8
vWDEF2/HTyq3ubBZtZXxUuXZtxU8vDNerBx79uV3yuPR+lS3he1O1UhE61Nj
PjvwUs/yQ8q317vritzyfcqVx77/1abyX5XXHzj/0fT4TuV6r+8vzSnbpjyv
93tNjpRtUu7cq3B1fukq5XGHVm29Y8d7ypfvOju/wbnv63rNuB3PHv6k0mpl
b84w/3DqZuVWP30wPif1J+UHxz9zRXpKgfKMBhf+Y1Nsj/Jmb/GxWbH9yud3
7fhAz9hh5UanS7fXiEXrU6tW3zq5PHlMuee0V27emSxWrthjV/GKZKnyW82u
nfd28qTyLcmRXSYly5QL1m340+BkuXLOzEuWd04movWpD1vk5434r/WpWo+c
988R/7U+lfNC79EjovWp3hIPdH9nh+jRRY+VRY8ueiyU9WOX9eNnJX64xI/Y
Y4Hu9d9L9pV1Wb+xrNM6QzJbPfxMtzR/Zseco1+dv8XZJuuyPuu070i88Yk3
rOvy+4Hye5fft5d5pftP/l2fd7mhdZrfa0Fx3hOF250GEo984tEysbvYr5D4
pOcgN0k8colHuTLvdb+qtaxD+1VkXdoZOq5W14ZdU/3n5//tiXMGHHC+lPjk
E5+WXHpyY07umbq899U/LhpW6LCOze8Hye9dfl9J4pmeG71f4pdL/CqU+KXn
XD+R9XeX9fcsiWcu8Yx8zu86yvc8fjdYvufxO67L97ku3+e6fJ96gOe+R57T
47lfk3HwiNu8N+PAezMOvDfX4725HvUEfpslfvLw21zxs0ceqi+68lj//5fo
yiOvoSt0hq7QGTpBN+iE+6MT7k+9wryaL/PEY97ULwzmice8KZd55jHvPpV5
5jHvqHc2NbluSPGZvmXh80Hf4tHHPO/9dt5ivDfm8279B8+I+hrs65YGdgc7
85znY55zf+Y592ee8/zMc55/izxXdF5X1r81Hy2WeBPlO1kvj1jik3KGrK9H
LPFMebysx0fxX+JftF8h6/fK+yReKneQ9f5ov0Piq/K/ZX9A+R2Jx8pVZD8h
ymcSv5UHyP6Dcj+J98obZL8iyn+SH5Sbyf6GclPJJ8oNZD9EuY7kH+U9sn+i
vFvylfLbst+iPFfym3Jf2Z9R7i35UPnvsp8T5WPJn8q/yv5PVF9IvlX+j+wX
KX8l+TnaX5P9JeU8yeeRf83nzINB/leuKvtXyhdLvRDt58h+l/J4qS+U426w
P6ZcQeoR5WWyn6bsS/2iXHZ/sP+mXD4mqHeUW8h+XVR/SH2kPFj295SHSj2l
3Fn2A6N6Reov5ROyf6h86n+Cek15uuw3RvWN1HfK18n+pHJLqQeVv5P9TOXv
pX5Uflr2P5WHSL2pfIHslypnSH2qvEj2V5U/kHpWuaPsxyrPl/pX65lhsn8b
sdTLyu1lvzdiqa+Vq8v+cMRSrysTh4l3dh+efXfW8TPk/Iae760g5zf0fC/n
TV+r3faDfkO363nfw0Nbdl39nz3OcqkffOoH9lfYz5v9Y2m/1CnReeA1ct5D
zwNz7oB1fv6dSc+gXyvScwys859sPOv6zgtKnKK1cyt1uy86p8E6PedmPl5Q
lFmne7SPx3rpyUGffre5MDpvXHb1sO0X7TzqPJry4u6aT0XnXr/ed29utXEp
7hTJ/x75n/0Xzq0Mk/f2qKN4L+z0hfSJ1F3UGxtkP8tjP2uM5HOPfM7+Dedq
losf9PxnvtQDHvUA+zv2XA58Ouat7nBsg643ck54bc02Y0pGR3009Qc64P7o
gPvTV9NnU8dS37Aeae8LX/x8pzXDq6a5g1Y8VFrppgJnz5JJrcafn+rOqLL6
r93vOOz0EL/41k/wh0fXvT2teorrBnX2cadYdOGjk9u2PnDDnVuSXsmNJdVX
bylV3WCnH2UfnvkM12teMfXxmgkn41q33YKap5xq9TJ/SDQvd9yl9UZUvu60
c+kjC+fNvKrMeWlKvQ8GXhXX/Mt14nJfr608hxNrEtzX4zl4LuypTYP38nhP
5hX6apkSjJuu33FfnoPn4jnryPj6jO9+GV+f8c2X8fMZP56D57pS3t/j/avL
dT3uc7nc1+M57DhOlb97PF97+Z3H810s1/UYZ+mXjnv4da48p4cuRsl7eOjm
fwHcenR5
              "], {{{
                 EdgeForm[], 
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1], 
                  Opacity[0.3]], 
                 GraphicsGroupBox[{
                   PolygonBox[CompressedData["
1:eJxNnAnYVsMbxt/3zDnHkn0pkq2iSKGSbKlUQnspSgjZk30X2bJk3/cQsq/J
kpA1OwnZQsgu+67/83Pf5/r+1/XNNTPPzDwz89zzzpnz3HO+tfcYO+igrFar
HbR4rZYiLvJaLY/wVAgbRbxkhFmRXiziMsIzkV4i4sUjPBfppSNeKsKLkV4x
4hUivB7pvhH3idAolK4c8UoRZod81YhXifB2pNeJuGWE+ZFeM+I1InwQ6dUi
bhphbqSXjXiZCC9HevWIm0V4L9JNIm4cYU6kW0TcPMLHkV474rUizIv08hEv
F+HVSLeKeN0In0V6vYhbR1gQ6S0i3jzCH5HeLOLOEX6L9FYRbxnhr0hvGHG7
CN9GukPE7SP8EOlNIu4Y4adIbxzxRhG+j3T/iPtFWDrmvnXEXSL8E/LtIu4d
YbGQt4l4/QhfhrxnxD0ipJDvEPH2EZaIdLeIu0ZYFHW2jbhXhCLkbSPeIMLX
Id8m4u4R6iHfNOJOEX4J+b+R7x5h2QgHBK7bROgRYVCE9SO0iTDY8QYRdozQ
NkK7CDtF2CjCxhGGWrZhhCGuS709I2wRYcsIO7tu+wgjInSI0DHCLo43iTDS
cacIw6yPPnaLsGmEzhF2d7xZhFGON48w3LrRu4dl9L2X+98qwjMRro1wXYR9
I3SN0C3C3hG6RNg6wmjXJb+PZdQ70LbpGWH/CN1tr/2sg/zITHYbGGGM6/aK
cESEvhH6RTg0wvYRdohwcITeEbaLMDbCts4fYhn1DrIOyg6P0Me6DrMO8rva
ZtjoSPfTP8LRHgt4Hm/8wOpY4wpWxzmm7ASXY/uTjBl2HRXzOiriayKMtwwM
TzF+4Ham7Q7mpxszsDrV5YxxnHWzdk6zjHonWx+6zjCu6JpgHeRPdDvGdJb7
AduzHYPbxbY7NrvImJG/xDJsfK5xBf/zjR94XuCY38F5LqfsGNsPe11qHeB2
lfEA24nun3V0hTEGn6tdDiaXuR3YXuly2p/jdozpcpfTftdM2GH3AbmwZO0+
HOFCz+9G4wpu1xtX8LzBMWWTXY7tbzGuYMhv4GjPb4pl4HCbcQW3e4wr9r7T
uILJ7S4Hw5usG3zusIx6t1ofuu42rui6yzrI3+x2jOle9wOe9znGro8aVzB8
xPMmP90yMJlqXMFtmnEFz4ccY68HXU7ZJM8bez1mHeAz07iC2/3uH3yeMK7g
tmISDk9HmOF24Paky2n/gNsxpsddTnt+o6x5fg/PGgPG8rzxA7cXjRl2nWUZ
OL/gmLKXXI79XjV+2Psb630uwmuWgecbxgx83rGtsfEc4wE+s10Ozi9bN+vl
Tcuo97r1oevtmtYHut6yDvKvuB1jmut+sOW7jrHNfOOH7T8xxuQ/tQy7fmDM
wHOesWTtf+SYtfChyyn71vPGlp9ZB7b/ylix97/n/lkvvQPHbZMw/9rl2O5z
twPzPTO1/TLC+27HmBa4HMw/9liYw3fuH9yWqGuezGmh8QPbHxyD4U+2NTb7
1Zhh458tA9sfXZd69brmwFh+c12w/cP4gdWfjsH2L8fg84v10cc/xo+18K9j
sFrkGKx+t2701uqS0XdWV/8f2N6Talq7ZV3YYI+8LmzALdVVl3xRl4x6S9Zl
G7BavK51gL0Wq0sH+e9tS2zXqK664LNCXXhj72XrwhgM98qE1dIh2zvSoyN8
EfnBueosE/Kl6tIBhsvX9ZtB13J16SC/Yl266X+lumIwXLmuGAyb1IUNGK5S
VwxuTeuyNXiuXpcdwWe1umTgtmpddam3RaQb16VvjbrqguFadeH3d4S164rB
rXldMbg1q0sffbSsCz+wWqeumPWyrmNwW7Mu3ehtZRn4tHYMbus5BquN6rI7
NmtTF8bg0zjJlu0jbGAZGLara92D7YaOad/W5ZS1qGvsjLVDXXrAcPO67Ist
Nq0LY3DYpC5swKqj65LvZBn11vd4Gd9mdWGGrs7WsZL1/uDf05a2N7h1qQsP
cOtWl03BbWvLwG0r16VeV8uo17MunMBnG+OHjbtbB/kellGvl+uCYT/bmrHv
YJzAZLu6sATD3rYX+e0to9621kFZX+OHrj7WQZ5nHmcZzkD93Q8YDjRmYLKT
bYqNBxs/cNvZMmzcP7Dul7QWhubCbGiEYXWlab9vprWwY4QB7oc+hlsHeI6y
HbH3rsabtb+LcQK3Ea5LfqRl1Bvk8TK+3evCD127WQf5Pawb3PZ0DFZ7OQbb
fY0HuO1tnMBtH8eU7edysDrQGIDJWa6HjjGWgclY44ftj7B9Ge+hxhjbH+xy
sNrfusHwEMuod5D1oetw2xFdh1kH+QPcjjEd6X7AbdUkTI6OMN72xTYn2Y7k
T7YM+x1n7MH5BOOE7cc5BpPjXU7ZfRHOj3BBhFOsAzzPiDDattw515o4JsLp
xgDbn+lybHeq24HVBJfT/ti62jKm01xO+xM9FuZwtm0PPjdb12ke1xjb71zb
CNzOczzG4z7IWF1su4PPROsDk0ssw96XGQPwvMb2wh6fJ83vyghDIj04CYcL
rRucEz6DkO8fv4lLrQ9dV3ue6LrKdiJ/kdsxpmvdD5hc5xhMptim2OwWz5v8
rZaBww3GG/wnG2+wuskx9rrR5ZSd43ljr9usA6zudhm2nOT+weFOY4DN7nE5
Nr7d7fh93OVy2l/vdozpDpfT/l63A7f7jQ32+zfCJxHmR5hqu4DVg47BZ1HY
9dskfB61HbHrgZkweTjCNNfF9u9EeMR1p7sueM6wrbHx446Z6xOOr3e7K93H
TNsX+z3lGBs/7RgbP2bd6H3GMtbps47B7TnH4PmK7YW9ZxlLcHjVMmz8gmXY
+CXbERxedkz7F11O2ZMeO2N9zTqwN8475vN2hDcjPGAbv1HXbxscXndd8rMt
o97zHi/je8t4YOM51vGg611ozOb+n73fs12w94e2L2N83zJs/67rUu8Dy57w
WnjatvzIGGD7edZB/mPLqDffdbH317YRNv7CdsROn3s+2Psz40F+gWXU+9Q6
KPvKdkfXl9ZBfpH7o+437gfcvrPdseUuuWzxc4SFtjV23S3XnH+J8INlYHJw
YDQ2k40PybR2f4rwo8ux97fuhz5+te2w8T+2BTb707bGTr/b1tj1N9cl/4dl
1Pve42V8f9vW6PrLOsj/7XcI3hlqmeaN/XL7evF51fGJxm+zUeTzTHbHZlkm
u2PjlCmmrMhUjo2XyDQ37Ef7722z5TLNk7Evm8lm5I+M9BERloqwK37W6Pfw
SC+eCQ90UbbQNl6Y1HaZkC2ZqR/6OCzSh2aycZlpLKydxTLF6Fo+U//Yslmm
+TCP1SLUnV/dMubdNJONKGucyabg0yRTzD63cib7UvZLjO2oTGNrkckWjHGl
TFhSb4VM/YPbipliypp7zrRZK9McGPuamexLfm3LqLeGx0jZKpnGwloemmTf
dSNsDZ4R2uADzzR/+m+VqQ6YtHa8vOtSzrjaZpob8+7sMdF/O8uwwUbue9UI
nTwmxtvBNsXGG7u8qcexou3R3jLqbWh96NrEGKCro3WQ38DtGNOm7ocxbeZx
Yb9ZMfedk2y/lefGvLt7Poz9T577tkEXlzPvbu6Dersktd0yQlePm7IeHivz
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
LjiJJzNxNnBccF872D67J/FS4zzeQdZFf/A/cD0dbZveHjscEbwMXNUwy5nD
YLfv5XbU28Rj2c5zHeJ68Gt9bZP9kvgteLLbI1yQ6ZwLnwWPtXMmLmm49b+d
xA/BV52W6TsT/N/7J/FYcFRwRyPc1w6RnpjpPuw2SW34nuDDJP84vvFbIz49
U56Y8xq+2Q+izvtJfZyZ6dsP/LOc6fADXm1/Eb4cfGsTrBv/LX0ix9dxrvvH
97GGccI2H4fuj5LuDN4W4Zys4Z4uMf4NZLxL8x79WdT91PepPkmyE+8C52fS
wfvbzEy8I1zglz5zcWa9M+JLMz2LeI7z3OY39V3Ss5/nPufYAy2/I+KLMpV9
E3W+TirjjIAOnmWXZNLDeeChTPc23vKz7RDLL8+U5pl3V8RXZHomPJrpzsGP
3tfZn9jTf/dvlH1hRqb7DZSPzPUsRc+gpDkzX/YnfnPsUfxu4SW39No63rLr
nGbN/Rxtf/I9g3sjXJ9pD+A3Mc7rld8WfCu/L/YPfkPsIQO8TikfaBsjY62f
7PXNGpngNcDvAy51qNfUGdWaif7v9/qt1hzr7ZmQ90gN6+g0r+3tPUZ+R72S
1iLrkHVxXiY/C+trotcb6+5sr0nW6VmZfNbPJ/kfJ3pMp3jsfZPWKOtztNfh
Uj7jgBXPbtYav03eP8d4bVRr4VLjyFq42OuHPftCpx/JtFZYD2B4pXF8LNP6
+Mnr5TLXOdTrZClje5Xx3TOJ/war15PwY/96LdKvpgZe+hqvATC/1mtgRBJH
u5ltCe47GfNJxp3nK7/Ljsb/Rq+BN6Pt7KTfFXfp+a1ipzkhuy/TvsPa5zc2
1na92bYF/1ts7zFJ/Drr4r1Iv5tUxpqa7HXFb4LfCTZgjU/N9NtG331eZ8zj
Hq9Lfh93Z/r9MI97PT/WJuMdYLzBfU+vKdYee1qTpPvrG9eF50PGlHPUrj6b
gg/nywqfR4wRmD9q3MHzMeP4dKY7Axwf4X/h7uF43/ddAjhnvpmlXvz9x91z
JwHuulnUedZy4mecZi3M8HqgPXLarZakh76ez6Qn1fTt7bNO89t/0mth9aR6
yPkml3SOXz3THYaypu9zX3IaDh05HPga0egF16ecuxNFTfw7aery/e8LljeP
+m9EenF8wEl9oJNvbF+znLqzrJM+uAuBzWj3uuvwPS9tF8NPnNSWNPaiLf0j
e9XyNZPGxxj4vhhdS0R6PZ41kV62Jjy4jwFv3yLkb7rOW5nuYCxZ0/fC5BvV
VA85HD7fJr/pOq14PkZ66Ui/k+nuB/XXScqT5vtl0kvBI2S6+0G6ZZJ+9Kyb
VIacb5nftU50v+c0faO/+j4WOfdA+MaZesvU9A31UqFr3Zq+j/7Q86Ue90a4
X4DsA9dvnZQnzXfQ2Ge5mupxh4Q7CMjmWQ/znm1bfZLp/gn1P890V2SFmu4q
cLeEuwl8Z0295SO9flKa+p9mqoOcPtBDO77v/tR62iSlqcOcsRvzRi99cd+B
b7Tpe8WavtH+ItIr1VTGvRfuSrRNklPnq0x3XajD99TkV470n5nunDSL9DeZ
7rog3zApT3phprsxTWq6/8BdFO4y8G01dRrX1B/6uX/xXaY6yMmjk3Z8G/6d
9WyUlKZOu6TxMDb00ldX1mpS39Tn+/GfI92U9ZCUXjXSv2a6k4OcNtzz6VbT
t+c/ug51f3K6fZJ8lZpss8D26V6THu6DbBJ1fo/0ajV9q77Q9ZH9Zjnfv/9u
u3VMGgdjoD11uDNCPz+4Ld+b/+q2GyRhB9bUw/7cJVk86V5NC+pH/Df7Vk3x
X05TjzT3U/junrI1WEtR/1+nOyXhytj4ph75mjXdReHOEvdT+BY+i3pr1xRz
T2kt5sUGmVSfdv9YJ9/X11yHeJF1bp7UHjl60cM9GsZHW/rMk+4U0RdlpLn/
slXSnJkvd2CYO/dQ+PYfectIl0n3nZqzxpLypPnGv3RbdFEHHfyPgj9tqyWT
7hqhhzsq3IPi7swWSWNiPPwPAeqtg62S9hDSjIO2tEPWyHL+/0DuMXRJaot+
fDsj7d9ZJuk+FXtR16Q8ad47uH81oKb/e4C8VaSXs5x0t6Q86UFRZ2Au/v6K
pN8za5WzHbKnXQeOnzMh7wfwCHAAqyQ943m+7xh1huR63v9r/a1rev9ABu+z
cpIedO8UdYfl0kVb9HA+5BnOvcC668BbcA4/Iul5jHxC0v7O3n5a0jOGPfPM
pGcDz4Xjkp6pLKkTk56RPB/HJz3neJadkPQ841l2VdIewf5wdtIzg+fFJUl7
JfvkUUlniBhi7YKkZx779mVJvzd+a+ckPbd4plyUtC+zJx+TdD5g6Z+X9Gzg
uXBK0rOcZ/E1SXsi+yFn6u2SztXXJ+1T7FE3Ju0v/N5vSdoX2BPuTPo9syZv
Tdpf2AduStrL2JfAv7vXxt1Jv2d+d/cn/cb4fU1NWrus22lJvwfW4e1Jv3l+
748mrUvW5GNJa5p1+3jSWmQd3pv0O+f3+2TSmmO98e7BOwjvH/xOWMO8I/Mu
yj0J3k1ZI7283nh36Zn0fjPTdZ6s6Zvi7V0fO/VODeW9Lb8u6RnA/s87R5+k
dxrW1CCvqwFJ393xjsM7L7zmkLrypDd03N9y1mlfr1VkAy3nPWmA9fzHoSXx
Qbwjk77csiFO866zY1Jd/GD4ypZxPCzJb8Y7Kr4n/E47Wc57CvFQp/FB4L/4
7z5uUv3NneadhPcR/FH4f3iXHZmU5v3lKutFz25JZVu6zq5J/qJrXLalxzI8
Nfi88PXg59kjKd3HMvK8Q+2NvZPei5HtaTnvPfsmvfvga8Jf08Xx3q6/r9P9
rGe007t4nIyN91X8RPiI8OUcnOTPOTDpXWiYyw90mpg872UHWU56L4+Z8aMD
XZU/iPRAYzXEeB2aZHN8QLyT4w8CB94VjkzaHw5Pku9ifA61TmSHuy3vB8cm
7VG8TxydtD+g4yjrQXaM5dQ9zvVPTto72Dc4v5+UtKdxNh+XtNcdn7THsb8h
O9Fy3guOt5yz/cnWg47x1sP5hvMMZxbO+Kcm7bGcUU9P2nsnJu137HWctc9I
2ns5L5+btL8hO9Pys5L21uqsPjE1nO3Pspx+TnNf6DjPejirXpq0x16YtLey
r56ftBezD3PWPt9pztUXug7jneAxX5y0p7Ofc16+2Gl0X2b9nJsuT3oOEl/h
9NVJezT785VJzwyeF5wrr7acs+q1SXvOpKS9u4mf7zOS9kbOejck7eGc3yYn
7c+c9W5L2mNvTtrf2dspv8l10H2d9XPmvNl10HejdU5Jegaw/3MenOI0Z+FJ
Hg/93O6+OMvckfTseCDpGVCd2R5wmvPIg0nPgruSnh88O+5J2uvZ51mk9yU9
RzjX3WM5/gXOAZwB0DHNejjXTE96dtD/nR4D57JHkp4vlD/mOpzFHko6j1H+
qOtwPr3L46H8YddhLPd7PNj+cdsf/+7b/m3is8Vfht+CM8vMpHML8VNO85x5
NumZwh6In589lrPVE0nPNXyKyFt4D8Q3zn6CfwjfEX6jV5L85vhVCNRhH8V3
8lyST+1F1+ljfS+4r3vcnnaUv+w6+J/xu+GDwQ+Br4o+8b3jw8Jnw1zf8Xzn
eu74ee5znjR+XfxQN3mPesv1KSPNPocPHJ8UviLm/aTnjo8JXxN+qXlJZ1DO
GPje30jyPeGfwd/Ntx6UUw/f5FMuW8/nE8o4DzAOfGL4rka6Dr4ZzpKsJc6c
xB87jX+C7z3Yu+YnPcuH+JlOHv8i3wtzfuXsir+Z+4pw/sjwfXM3hvPop07/
keQvbhltv0i648j9RmLy+Ml5pvOMxwf+ldM830dEX8Nz9UH42m3xcX/tfom/
sZz6Czw2dHHX4VL7z0k/ZBn5afah/Zjk70T2fZLfFH4S/zMc5ajQuXsuGXV/
+D85afxv1KWcswdjZw749PFf/2T5b7YDaxte79ekcmLy67juz9Y/1HLafu8x
M350/GZ7NrJeuLl+xmuw62D3o/2sh7tq5ecwnA3PYmR/Jflu/3IdzgP/uA5n
AGy1yP1y5uWdhN8y5dQb79878mU950XGEf8f31vy/AWT5DtP+EDhOquxk25p
WeY0OnhAP+R3GfSwbj+1nv29Tpf1WqW8cF/0yzdU+B45G+BDfM4yfI6oxifH
t1VtfWZATjvkfIvF2YB4Caefsxx/HucT+mJcL1oPZ4CXPaYNneabq+qcgM+x
6rOR67/oOu1qDeNLPnvg36zKl7Ye9mPew1v4rMLc6Yd3dL414t0aHxXfTW3m
Mwl+TH7T+Cn5RovzCfHyTiPnu6/K18j3XfgRifEh8qzHn8f3YB19PsHniJ9x
vvta3nX4rqyRzzn4NNHNOQc9s13exHXmuK8lnaasg8fAeDi3EK/o9FyPgbMN
fkG+H9vUZyR8i/gZ51nOuYVv0JBz5uEbQPyVS/u8RBp9tGlqOfNo4blw5sHP
iL65roNPj/5X9Rg4a5Fm3nzjRn3OSPOc7+xzFP5Nxvux5dRhjGt6nIyBsXby
OYoxUBe/Gt/Cda3pGzd8jpypsDn5yr/Y0nLOddShnO/p8Dly1sK3xzdpjX0e
Q047/H98U1edu/Azfmk539HhC6R8Pdf5zHrxWeKLQ44/boH14FOkHXo4v31t
PaQXuO2KljMefIzEbT02znukKef7PvyPTXzGw6+HPb512dY+g1HnW9uJOpzZ
vncd2v7gMuScwfl+j7Mf3wbio2zquXAGXcl1KOvuMyF1qnYd3PYX12lq/ZR1
8/mTOsg+MKbLuD7fE25Tk6+RNGdIvh/EL9nMcvI9avIvdraccyx1KOdbRfxl
1bkOvxs+OM6cyGmHD4/vFdfwuRF/4j+W8w0k/j3Kt3KdP6y3p89+yPFX/mU9
+AVphx7On4ush/Rfbru65Xw/WfkUSXNWZE/CB9e8Jp9fD6c5AyNn36I+3zHi
ayTG11mdmUlTnlwHOedw/LPYFZ1834gvEf8f3yu2rKn/bh4DZ138j4XLt3Od
xdy2hdOU4UdkA6Ytc6J8W9dBP99n4mMkxhfJWZpzDv437vE2ch3k+GP4VpNz
Mt9y4kPkjMdZnbZLuLyv6/Ds7Oc6jVyGX4f3Heog49s0vj2Ds8a3gz8R3yJr
alOvK/L4IfnOiW8r+JYDrhnZAMtJ0xa/EGdvxsZ4KR9o+at+Xmzkufw3B+vD
P4nfBv8PvsXKBqTxBXHPeWfbBD8PfsnGlZ0sJx7m+h2c570G3fTB9wec+9DD
fWnu3uG35c4Cuob8Xx3OfJwr8OlS52f3P9xyzh7U+dztdvT4yQ+3fnjUkW7b
Jx7OL5fyryCjjPPhOiFbu5RvY8OI25TyQWwW8ealfAObRty5lF9g/YjXLeWz
GBXxHqXeM+8I/bcX8s9uErJOpXwSG0fcvpTfYtmIly7lJ5oe8XaFuPARkd6l
1PvnsIh3KvXOvGPEQ0vtZTvTrtQ77tYRdy3lDzghdPQuxLVuEbItS/kqtoq4
Syn/RbeIu5d61+8QccdSvpN9It631PvlWGxQ6p32gIgPLPWOul/E+5d6hxwT
8UGl3h1HR7x3qXflI5hfqffO47BTqXego+in1HvqnhHvVep9+xDsV+p99/cY
+1O57m5kIXshF8+/Z8hfdPr0kK9e6B1wasQPFvJVzgb3QufTw8Ct1Dvu3SG7
p9D9i+kRP1poXR8DJqXed0dGvGsp38DgiIeU8me0iLozS/H/bSL9dKm7FBtF
+plSdym6MLZSPsJNI/1CKR5+boxnRqn7CO1DPqsUbz8+F95gvUnIny3F7X8Q
8sdL3TtYM+RPlroLwlxHeb4TQnZGqXfgmyKeXOr+wkRwKfQ+dU6kzyv1Ptw0
ZE+UuqcyMNK3lLr3cC4YFXpf3i3Su5fynbQN2fOl7o7sG+O5rbR/PeLtS/mZ
to24dymfVM+Ie5XySW0TcY9Sfqy+Efcr5VfaIeI+pfxNAyMeVMqH1D/iAaX8
SmOjr7tK+Xp7xhheKuVPPSnibwu9jxwQdW4v5T++OeKZhe50HB3yB0vdTTgy
0g+UukNxVKSnlrofAU7ck+ZezPiQjSz03n1qpE8pdd/nLNZwoXfh7yL+ptD7
ELo7FdI/qJAdseEEnjOlfJWsu9Zee0MiPi/XHbrTIz650HvWqqX2HfacwRFP
zHXf7YyI1yvl52wW8tNK+VB2iPT2he7ZXMFeV8gPsUvEe+byAzCP0bnmwtgP
yjX+0ZE+MNf7/u6R3i8Xl3RKxMcX8hv3R3cpf8fQSF+Q667ZiEJ2x+b3FloH
rAH2y74eP+t960JrnrGc7fGw1lYttN6aRHxiKd/QrpHerdB9l094jhR6b2Wt
tSu03vbKNTf0fBXpVUr5xD+K9Lxc92tYF70KrY0zQ9aulO9lD8aYi/P6LOLl
S/nl+S12LvR75Lf1fq7f14k8W0qtf36XHQr9Nvm9vpPrN3tCpMeV8m8x3vNL
jfnwKD+gkC+C9bhWoTXJ+m1ZaA0/FvGCXL6s5yP+p5Bv7JVIl6W4EH5bqxWy
7VYRf5zLV3BBqd8wv991Q/5Grndh1vUGhdY2a//bXOufNb5xoXWOrwKfBX4K
/Bmj/Lyr8tyzJt7N6cdZ57nuWCHb3fW5A0+eZ/KloX9bP1Mu5ple6J7T5hEf
Xuhdflqh3yd2WKHUbxiMDgnZfoV8ROyd6xfaPw8O+fm55OxzaxTa61qxbgv5
BMawngt9z8Me2bHQPsl+3LzQnrwP67PQ3axjwbaQX+WESB9RyN9yEs//Qn6P
bbBfKZ/gJZw9CvkLx+T6zfB7YV/fsNCe0T3iboXueYHb2caOOR3s8bcqtRew
D9wV8nNyfW90NPMudB95QcSP5ebYS+3X7NWNSo2Vcf4adX4rxOGtFfLvc3Ev
zOM412HPZu2ybh/g91SIKz6l0O/hPz8k+2KuPec5cMjFpzYvtR8hnwWeuTjd
z3gm5uIyX+cZkYuXfSTSDxfirpeMtkuV4tPGsz8U8oOOY7/KxQ2xfrcstIY5
E7UudS46NGSHFPoOA3yOyYXRF5GekYsfvTLiG0v5Ri+N9MWlfMFfYb9cXOli
IVuiFLf0faF9nH3v6VznBs4M/FbWKfR7+SniHwv5rb+k/1z8K+vriFxr7Gue
s7k41xT68lLc5zO5zg2cGTYK2cJcvPo+Ef9V6P4oa//4XOufPe9P73urR/1m
pXzA7BOH5torOEu2LXWe3KDUvs+ez3NmoZ81c/lt5eK2X430TbnvcEX6rly8
+4eRfiAXn82Z8cRCZ4lPI34kFz/9Eb+bXDz0StHXiqX83PzO6j5X4HBaVMgv
Pivq/lvo7uqxEZ+cy2c+j99WLo7840hPy8Wdv8+zKBe/3jj0fJmLG3wz5Lfl
4vLnRPr2XHcCOJOyj7CHfB7p6bn4cp5vV5R6xr0V6Tty3Q94L9L35uLyP2E/
yMXBz2dN5uLLP2D95+LsZ0f61lz3DC4PfTMK3Sfldz8u12//as4UpfzsT/Hs
ynVP4kXsl+uuw7vsB7m48MsjvraUb/1lnnu57k+sFrKmpXz2vCu0KPW+8ErU
mZzrvsXzkb42172KZ9k/ct2HeDvSd+a6O8L7wTOF3hF+jviXQnw/57jDcu0P
nHk5B3PufSHkk3Ldz3gt0jfnuntxZal9nD386ULPQp6Db0R6Sq77Ey9F+oZc
9yf+BwKC7No=
                    "]], 
                   PolygonBox[CompressedData["
1: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
                    "]]}]}, {}, {}, {}, {}}, {{
                 Directive[
                  RGBColor[0.39598880819409377`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[CompressedData["
1:eJwl1nfYzXUch/GDHkolFDIjKRINSbKKQiIllC1CymPPQlHIXiF7ZM/KKHtV
9gpJKIlCGSFl9/pc/XFf9/vz/h3nOOc7yNOoVbWWKRKJRHLKRGLsTYnEh0mJ
xKOpE4nH8Jf5W/M47sVFdI/jnHmDeTz35qK6J3DevNE8gftwMd2TuGDeZJ7I
H3Fx3VP427zZPIn7cgldSVw0bzFP5n5cSlca/5i3mqdwfy6jexr/mreZP+UB
/IyuLC6Zt5un8kAup3sWl807zNN4ED+nK48r5p3m6TyYK+gq4qp5l3kGD+Hn
dZVwzfydeSYP5Rd0lXHdvNs8i4dxFd2LuGHeY57Nw7mq7iUk5L2Yo/+YX9ZV
Qwr5e8zVj+BXdNWRUt6HefqRXENXE6nkHzBfP4pf1b2Gm+T9WKD/hGvpaiNJ
/hGf6UdzHV1dpJYP4HP9GK6nq4808kF8oR/LDXQNcbN8CAv14/h1XSPcIv+E
Rfrx3Fj3BtLKP2OxfgI30TXFrfJhLNFP5Ga6N3Gb/Au+1E/i5rq3cLt8BF/p
J/PbuhZIJ/+KpfopnKxriTvko1im/5Rb6VojvXwMy/VTuY2uLTLIv2GFfhq3
07VHRvl3rNRP5w66jrhTPo5V+hncSdcZd8knsFo/k7vo3kEm+STW6Gfxu7qu
yCz/gbX62dxN1x1Z5Pe4Dr/Pp/g0/sRZnEEPfb34TeM95XX8inkAN8VF+Z/Y
O7FPMFDXDFfkb3hB7IdYe7wZn+89sssb5Ku8ka9xDvSKdY51xRZ9SvPmOFN4
C6li72FxrGmsX6yRfo4ut7xNTpK3c2ruj36xFzxrqZsn7+Tq5sHcCvN195l3
yWlij8X+w4DYE7FG+s/l3VzDnB/rzQ9wi1gr/ULzXq5pHsodsUj3UJw3eT9W
mX+I84tOWGx+NM6LfAirzQfjHKMzlsQdGPtdPoyf4yzjVV2J+P3izuP26Kpf
Zj7Cr5mHyEMxEIMxKPZTrLXn6WLfxl7HUXNZ/TMYIdfiZzHMs3I8PPYV9/Qs
s3yCM/FxfkFfCaPNn2CVfFfsWYwKvKYHVsjPx2eje6yxLrfuDN/Dp7la3FGY
YZ4ee0w+pc8lT8NUjIkzxms9y8k5MAmj9bV1L2GyuSpP4Q+4r2eF5YdREIVi
TfCRvgA/iPuRP9YTffT3cT7kQV7ci976nt7vQ14Zd2+cizgzmBjfP+4dXmPO
ztkwDuMxNv7uWB3nyuuyypVjr3KVOJe6LPJJvjv+3tw1zigqYqSuQpzlWCN5
ZOwDXhl3hpxRfk7eyuXjftGll49xBn6fu8Rvz8vNT8ud4y5B6ThnujJxv3me
Nu7GuDfRzdwhPpeXmkvFnSmXjPsx9oXcLu4e/tJcXG4bdx2KYbPuST7geVH+
1vw4t8Zj2GQuwvs8fyTuilinuENRKO4Fc2He43lB/jrWi5PjLKMAvoj70/O3
47P5s1hP+Ts5Hy8wt5Gbx+fGv7WxH+Xl2CHn5XWxxtws7ifkwVxdsudN4ozH
2eKl8b3jd459G3ep1+TiFLxJd11OyDdi3/Eb3Cf2Wuwf5DS/joZoHvcDL4zv
EL+NORuv8bqsfDm+r+7fuGv4Uuy92Bu4IP+Nv3Ae5+J86utzA9yNmfH5/lxd
uTH3x1x5TvzO8d5opOsXv73XnuX1Sf//f+0/fWJOBw==
                  "]]}}}], {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, DisplayFunction -> 
              Identity, AspectRatio -> 1, Axes -> {False, False}, 
              AxesLabel -> {None, None}, AxesOrigin -> {Automatic, Automatic},
               AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
                 FormBox[
                  TagBox["y", HoldForm], TraditionalForm], None}, {
                 FormBox[
                  TagBox["x", HoldForm], TraditionalForm], None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Automatic, ImageSize -> {300.}, 
              Method -> {
               "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
                "AxesInFront" -> True}, 
              PlotRange -> {{-3.0618621784789726`, 
               3.0618621784789726`}, {-3.0618621784789726`, 
               3.0618621784789726`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, RotateLabel -> False, 
              Ticks -> {Automatic, Automatic}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.052", 
    "parsetiming" -> "0.776", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa32316h34g0id4g167g700003hhaa2g29cca3i03", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "53", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa32416h34g0id4g167g700000fbage20dg17gc8f1494264905346578628", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 40, 16.7689662`8.97708123487126}, "Line" -> 20,
     "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "InequalityPlot", "Inequality plot", 1, 1, "Input", 
    "RegionPlot[x^2 + y^2 <= 6 && y > 0, {x, -3.1, 3.1}, {y, -3.1, 3.1}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot x^2+y^2<=6 and y>0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{587., {140., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[20]:=",ExpressionUUID->"7e85ed0f-271a-4d7f-951e-c26f51b69d35"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJx1WGtwVdUVvg/SKB2miHQm0tFitKNlipWHPEpgn0IE2kKbEaRQ2sgE0kJh
BIGJwlggJGpRwaJIiQXK00cbFDuhbRztPjFXQjUCozeFYaxJSXhdotH0Jheu
wTTcs77vzFk098+e7679WN/a31577XNr0dL7iiOhUOhSOBS62k6aO2pGIhVy
I+XfWD33dMw81nCmbvzfuixwebLwwotrUsRlN57s239yO3Gf4j2z2wcliLMm
f3v0hhmNvt1riXXbx+tv1HxGrWeUP0b5Syx8HIVdrAN+wOAHDH7A4AcMfrQL
v2t4wK5b4afWM8ofo/wlBj+FXcxLfoLJTzD5wQ/wE0x+sIOf2hfNQ81n1HpG
+WOUv8TkF8Qu5gE/YPADBj+1LjH40S78tM70vmgeaj2j/DHKX2Lw03wwDnzU
PFbFjRh8aBc++pxoXel90H4rf9iCj/ZX8bRqX4nhL+3irz7HWvdaJzqu2i/t
j9IVMfyhXfzpJY/oc6d16vz/fY5Ifo2LPxFHYTeawS20A38ls1639fxKAhtg
b/20nM+00W0wbmmMs3oeYMQPWPyw8MvrHycOZX7r3uyFl6N5BeMRU/EgdoPn
LuIo7AbPYYT7gHhpHkoXOl5Wx0npyY9XIJ9EnGA+iTjBfHINL83D0Tzmj87+
7pWdYTecGVdl8m/O75+z6Au2YndgP7zxibXzs760scrQ7vr6S8AGWMZZjJf/
re4HjPhhH4M4xnjBHsQx6ov2AEZ90EZ7EMeoN9iDGPPH1fxx2qFH2IMYdUe8
l5brG7W+Uf4b5b9R/I3ir+7NtFHxox06U/GnfW/by2dzP+k5V5lxp7g/8AP3
JTD05P3/GeNR+96qt+/ZEnVuW1v88ImCEPUm87vRzPhjPpb1oCfqM++tYaV3
dxLLOsTe+TlH7PE9RZzltcRYF3h95lycJi7PnMtW4liGx399LHpW58Mofo7m
h3VgB0b8sC72Q8XbUfF20B8Y8Yfe1Ty8bxA/NQ8x4gc/Eb9eeDmaF/zsjUdv
fgexrxfkH2DkV7UfSg8pq/aPGPe12m+ln4Tqf9rXk+RjYI/nMX+85Gdg3eKc
UY+ie46X/K30bZR/Rp0Ho/gRy/lR86V8u+RtFV9iOb9OcD0fQ9+6jsX+4/xg
HuBgPZSkHfEO6qmRGPEGRryB9TnsLa9xvPgNrOdB/gMv5DPwAE9lJ0/oTcXD
oh/ip/WN/Az949wF38tx6h/24Ps5zvVgD76n49Q/7MH3dZz653iJd/D+OEa7
vgd13g2+Y+PUv/KPduhf8aMd+lfxoR36hz34DohT/7AH6/I49xN26OGa+ln8
hj6Q55aHv9M07+kodXjk1wcOFQyPUncfDRy075WH/Tpt33NL9k6dEeZ7FPlw
/32z5zxY4Z8b4FF5Mz+dXujXn3bnoImJl/z6UvpZ9X6wso7T3lmdWFhXbXBf
Y13Yh+xtznptY9R5MP33g22rYmZJ99TV6e9HncnNezperfnIRGo+/kN91Rds
1x+8c1us4j92wZGZtffkRJ1xe2667qGfvWObLlQsqnranwfzYh7Mm3fombsL
p/TUA2VX45VvSjZsW/+tWT3xFrzy5Rv2bbo57eO6J99JtSSJz9ZnH62Z3Ubc
0jfdf8u5FuLDm0++VN8aJ44+lmmJnZLCaYkTPboUnHslrzn33y3Et9sf7ir4
cRvxFqfyLtuY9PGtI/rNykkTb428cbG1oJv43YcGn6nJ78lDgpd/uPEfK2zE
rSlrn5qoO2t+d6G7qq1fxB2780hj9opPgR3gW6aM+cn1VWGnflx8wAfvf2Ze
OHD+9/NHh9zhFbXLK650mAnXXSyNDfvS5t2xYO/Qy5dM3bRFZ5q2+HlW7AZ2
aS3+h26go7Xh3WWxsVdYR2Ic+su6VvxwoEPo8q/3PlVU9ZT/ThK/LXgILwue
EgcrcXF0HMAb4/n9JhPPmThv+v1HO7/vCOb3HcH8viOY7zHBfI/BjveYYK4L
O+7F4HxGrWeUP0b5S8xzHBgfIZZ8ot+v7l0TDh+fl9/K/sCiDxf6kH3T71ur
9xEY8VR64ftX/tfvX6t1BYz9UPrR3xMsdK3zInhQ97J/yLPC2+r3sbIzTnJe
mY+6uj55ZMzlEDF0j/OXmH451PGbbrOrddM3x81M4XywH/5HP5mP+eB7424Y
un1k2F2Z0X87sAMs4yzmkbxrkX/lf4v5ZZzV8wCzvgnoM630nVT6byPm95tA
/zgxv98EzkfcqPFGzW/U+ur8pIlZfwleOWr8MLs4yvu784nIT6cX99w7exoa
ds75lyl4d87ErGb/uxHyDPLvpvfeSmY/H3FOln/19QGN503L+cLzuR1hvncl
77jIQ10P7LhYtj/sllQW1af6fM54YB3EA351evetxX2L+Iz82oV+H2z1/UZ/
+In5nqxeM3R7p68/6cfvf3LPumO9e9c80moOFSyLun/eMK3/iNoPcc+6uHcl
Pi7iM/DZkkd3V3XxPhz4etuOvo+miAccX2hXTGonvu3j2prqryeIJ45Zcn3O
DxqJ1y3cfcuq92PEj//x+YbxqRjvw8Mzzi5I/6KR+MzFdW1DBieIk7OmzKqc
2u7j0UdHTipNEXfm3H/jqeouYtQZir8D/hJHfg+VOsUt9eoWU7J6adHm7Kh7
dEL75X++dhp6cKEH1DWqv4P+ohe+g0UfDvSB84N+8r9FP1nHQoeyTxb10TJv
nyx0vcyrpyzqKfBGHMAbcYDf4AG/wQN+K//IQ+oZq+JPLPWPVfvl2716yar9
JZb6yio9EEs9RnzE04+vP69+I/6tpze/3lPtGk+fxDGvPjRKz8RSTxqlf2Kp
P406L8RSrxLL+fLtXn3r273zSCz1MLHkA94f8r7gexx1POoMfGd5s6Hi/h/d
/rn5ee6ru175VdIs+9PaX25+w3+34l5qGbNteGlVB99Bxz292KBeGi3eNQc8
vVnoDfWRfgcBI+9Az/Ab8yEvI0/jHOJ8yHuB/PsOeXv7uWejxEXF+wsSiyNO
aeWJpXP/kgBPV/MGju1oblo4p9tMnHbTc4+Xp8yQphfvGDwvbSoLElsXd3Uh
Xhbj8D/6yTl08c4Rf1zljwt/ZD2r1rOYt/zeq/F4wLQe3DVi8LYo1rNYT8ZZ
+C3zWvD+H56uhq0=
   "], {{
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      0.3], EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmHv81/MVx9+nn+7XKXS1UEq6l0spFdVYFjO5l+4RqpUusrGRKKk0otxC
bnPZTFrNUBhmrSEMS2sX0oYw3Wzk9dp5/h764/U778/ne97nfd7n/vkdNHLi
qROqlFK+iFIqRM8QtCz1hd3CLmG2sF34XLhSOEjYV2go7BR2CLO8L3LzfJEv
hf8Jc4X/Wr5wrbBH+EqYJ1SIt4qwUOtvCw2Ebwl19a6OsFTrmqI1hMVaVxet
JtyodW3RWsItWlcV3UdYpHW9SDkHCmdxjxboXZ+7teQc3+EI4VChDfQAobHQ
SthP2F84RGjEc2vema+d0ExoLrQVmghNkdWY54Oxk/ffjl7the7I8pld4PM5
ndDPNu6IXfzcmXfm64Ac/9YNXS2rKzL8fBi6WL8j0ck6fl/4jnCCcAyyfM45
6NVD+K5wrNBH6Mn7Djx34Zze6Gq9eiGjE/s6w9cX3m6c14t9Q5E7QDgeH1jH
47CLn/vz7iihHzK6o/sxyBqIHD8/IazAJydyzrHsb4s9zhOGIft7yPWZJ6Gr
nwfzznqdit6Wt4qzTxE+FYZz/iDs4v0/gNf2myGMFU4TpgqjsP1mYQ3nD2G/
zx8pjOD805Dh36YLY5A9TRiNXo8J40vG+KXCOOTdJlwonFky/5xnjj3nsfPP
Me84dow4VpyXzlHH6D7klmO3kJeOdefrfPZVIc8c/9XIyybsd2w6Rp1/jk3H
qPPYujhHapHTjknnqfPSOVmDPG6KfpbRsmSOtkSWa8xs3jVC94PxrX18JPsP
453vsHdOm7ZG17b8Zv0c147vs0vGTnP0a4es/dnXCj06sqcNZx7Bb47Prujk
2K/MV9NO6NuV31ryriN6WUZlPeiOLNfaWdhyBXe0Po6L04gHy3aM90aWc8K5
0LdkTA3inN78ZtmO7X7oYr7KnO6DrG783he9jmfPsZx9Imc4Fxz/VwiTSub0
uSVzy7r25PcB2Kk/snojo7IenICsDsjtiS6DOK8973rA5xxyDjqPB++ln9fO
Keemc/VkZAzBXidis8qcPhVZ/dhne62B3+sLSsZtPeGZkvnsHHuqZB46J39b
Mredk0+XzFXn/N9K5rnz2Tnqnuo4v1s4n+c7SvaDw4WLSuax8+EFYbngnrwN
m9qeHwsflazTZyDHvWwC72yfy4TJ2OaH+GQA9hsKT39+t90uL1kT+2OjsXvZ
aDT2+WnJ2jQYjMBe/m0UvrCfh3PWB8Ky8k3NGoO8fwv/wo5DsGXlmdPhfRxb
tMAe47HbX4V7eLZPXN+ac6dJ3OvH2MJr5/LFJXP4R/jSfvwJdrGeW9F1Oned
utedLuFevtMU+N8T/gnfMOw8mPtN445bhPd5tt8mYttx3Nv3vV+4TqgqbEK/
evhzJj6djN0H45/LOHMKdxiA7MuRP4n79+B+V2Cbq0rOPZZ5Tcn66RnvLn7z
+9H6szNSdn34XXOuLll/HIfLefZ6J+sK+MzjmvxsyT40hGef5Vq+m7P3KTkH
zuHu/s39qCHvroXnPp69/hJbVYPPfaoR7+Yi517kW5/rS/Y7899Qsn/VKNm3
3L9cy/fAV114gLX5F8BTnTPmsc8z7QLkPAifeRyDjrPmyPVZ7jOeaX12zZJz
6c9Ea/Gb+6b70i+EW4W6wkMleczv+fYm0drwuRe7X93E2nIe5tnrm0v239rI
W4pM90H3U/cxz8/mqyM8wh7zL4GnDmcsZp/n6iXIeRS+Oui4CD2bcZbvvpH7
mL9BZF1z/rpWub615339yOc7S/K47r2E/+w757Zz3LXt+ZIx6vj0t4Dv5hx5
mfhwbLyDftbtdexo3V7BT/bRenxs/74m/Bw/riuZh46ft7CLbfIm9q0F7w3w
u378smTtcWz+gb3uy547jy5Za/zsHr22ZD44F7bx3jzuX+5NrpeuTyvZtxI5
7aC/hn81/K5Fa5BrmctK9qEx8PymZL97kmfzX8LzKchYDc9aZJ1eso57fRI+
eRzfPQefeRznvyoZ6y/iM/vrdyV7lWvCVTx7fTV8FdhpHbb6Pf6z767h2euZ
+Nu+dl7/EX853t7AF6/iP/viT/jY/r2eZ68XwFcDGeuRs6FkfNTEnxtYv4G/
Ld/59OeSMWD6FmvnhGfc2ujsWua65lq1C/1vhKcJtDr81r8qs7J5PFtXnlWd
Odvx5Pm4HrpVMHMvgr8xtCp7na+elR3znj3ck6YC9yb3rrdL5oZ5nLt/KZmb
zqF3S57ldxt5777kvuw+7N6+mbj4R8k5xu/cz9zXRvPu78TGZp69dh91P3VM
Oja3sM861Ga+9/zvdV1s67u45tj5rrM18GPwPwTjK/w7j7Vr8kL21CAG9uz1
+x74V+r3JyLt5LhyL3HP8P8xHK9VkG85rt83Y7s62N/fOY4Tfx+5b1XF735u
WL65TzNiYTfx4DvVxEdL4amL/Jp8L63BdqdzTgVn+Q7+ZquGrl9w7kL43EPm
oM+18Ji/EfRL9trPm/C1vxM9P7m+ekbdiq/6SV7fyNmuh+jEyJllh+jwyJni
ONHHI+vLLtHxkXVlu/taZB16QfTFyJx7WvSZyFqwTbRX5PzyrOhzkTn/vH+P
rA0v+V1kDnsGGcMccrHohMja8P8+yXfjR6KjIuejD0WHRc5BR4o+Flk3x4r2
iZzdFor2j8yLNaJrI2vTVtGzI2uw+1IDvkXr0ae8dj1sQM9qUPlbyWfzHAit
x3q16KpIG88VvS6yZq73/SLrjWuj56dZ4HPi0N8sn5XUeQc8rp9XwuPzZ/Nb
BfG7nd/9beLZega6ue8eDr/jcl9kbOesWcjxjOa+5P7k74tz2Nse+jFyXpPu
GyJz4xXRVyNr5JumkbG2RfQD4UOt1zkWIuvsy/ZzZF1+3TaIrD32peue54dP
0OFo3tWlHq7CLgOxjdcnw+s9jtUnHZuRNrggMkYdn++Knh9Zw86LjGnH86ei
rYT/aN0sMo4dwyNFP4+cnT+J5DNP78g4dgz7fi2446WiTSL1aRwZl47JAyLj
0jF5v2iXyNnIskcgv2Fk/Dn2zhL9LPKbZ6rrUKQd5jimIv+X857oTZHfEE0j
z/a5F4q+Hzlzr4i8v+9+n2jnyNnoTNFHkP925BmWv1T01sh5y3nzDrkz0z6J
rEszIr8NnI/jRDdG1v0HRB+MnIcuitTDOgy1zSK/wZaLdoycpY4SPScyvh4W
fSiyJt0u2iZy/tvPukfGm+vKIvwyKdKmtudtoodGfovcKXpY5Ax3kOjmyP50
t2j7yNnNdj2Tu99l2ZFzYUvRTZH9cplou8gZcV6kb+yXQxw7kX3RejVCtztE
20bOoN18TuR36hLRWyK/7x+1zyNnpntEO0TOpueKTsM+ttO5rKeIdo38DnQ9
nhxZkxeLto6cg+8V7RQ5py4QnR85Rz8lOjByXvsagNR0cA==
         "]], PolygonBox[CompressedData["
1:eJwtlfmziGUYhp/H9A/UqCml0qYSWmhXk6LFrrIWzpGlOkvRlKytsmTfKrIe
S1myhLJGIupwzglZDkIojDH1D7juuf1wzVzzzfd973Y/z1unsLR9SY2IGA5X
wJUZsQiW46/DN/gI6BR+dho/BX3w9+EA/hXMw4/Bt/gSWIF3Dn87EmaE/zEW
HwMz8VkwDf8S5uIdoRv+KAzFS2ED3gy24lugH/42FOCF0AjvDEX4KngYfxVK
8CHwNL4SfsTXw734cI2JL4MG+CcwBV8Co/HPoRjvAk/iA6A/3gNuw5+Hvvj/
0At/DD4IvzNZY8EmvDdMwdfD5vCe9cUPw3H8JNyCXw+z8X/gXfwh6Bpew1L8
gfReao334x3TZzM4PHah9iQ8hwn4GtiAvwb34Z/BdPy78F4Wpc9Oe9oQ/xSm
aSyoiw/RN/h8uAY/Bxe1t9AVPwsXwnNsrKzAanwNPIE/lT6bD2F6+ox1tsrI
F/hzl/dPZ34DvhF+xjvAs/hUmINvg9vxQfBx+Jmy0QS6hzPSMz2mxuoH9fUu
TMIXwz34RzBB2YQ78MFaM14G9fQtjFPW4S58GIzGF0LzdAaVPc3xbp21Mowv
gjuVVWUcXwAF+Hv6R/hM2qk20nPZqzPAR6WztRJ+w9tCFV4J5elv9O4fGhNv
CbvwnXqGvwSH8IPhtf2efldrrMRfhAP4n+GzrUq/qzPeg7eH/fi+8Fq3Q3l4
zb/grfRPzU3/wDvAUfxIeC4z02vVnLT2bel3tQc78TZQobHCe7srvTbt8Q68
NewOj6m9/DX9rvb0At47XWv/hc9yd3quOlPV7l7VULiG9+EvQ3X4mXqLeoJ6
gXrMFryFxtDYsBl/QWvWWmEivlYZDNdgSTqDyt7AcPY2pd9VBtUrKtJ7q55x
SHubro214Vp4MO2qCdXS1vTZqaaUvZ/Sc1EGu6RrSLWjnvNGumepV70Dz+Df
p71nuJc1hXXhnrYKr6U9Dz9TrT4Cr4RrVr3iDJwP9wzV7tVQL1zDysr8dO0r
M8pGWboXKiPK5tx07SijynZ3eCuc8VJ5uldrzMfxm1Sz4RpVrz6S7nUF4d5Z
nN5b9QBlYXa6lpQJZWdOuhaVodrpO0lz1xpuxK+CN8N3irI6K12ryqyysDDd
65QJZbd/ulcqw6qdBenerxqqiY9L30Xak+vSGVT2tKday7Xp3qI1aexl6drV
HNTL+8CJcE8/ht8Mf+OnYHH6jtTdqDuxWmtP9zp9o968P11b6tHqjRfTd4v2
Z53+BefCd8hRfHw6CxrjOF4HTuNn4GT6DtLdczac/a/TvVw1cCJ95+iu+Rf+
St8Zuiv0D9WC/ql/qSZ+SH+jd3Wn9UjfsbpblQHN7db0WJrj6vQeaO26g1Rr
M9K9VjV3CaqDMr8=
         "]]}]}, {}, {}, {}, {}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJwl01N3FwAAxuH/PkL22rK1bJuLa3GZy7btGlq2bdu2jWXXZU+ni+ec33nv
39Co6PCeQYFAIJEsogY9+DdWYwFZGcphjlCTBLIxjKMcoxaLyM5wjnOC2iwm
ByM4ySnqsIScjOQ0Z6jLUnIxirOcox7LyM1oznOB+iwnD2O4yCUasIK8jOUy
VwhnJfkYx1Wu0ZBV5Gc817lBI1ZTgAnc5BaNWUNBJnKbOzShL4VoyhvekoEk
rGUdk5hMMEnZzBamMJVpJCOR5hRhK0XZxn3u0Z+UvKcE0fQiFR9oRUnK8JnS
ZCQ1H2lHWSpQnj705hGdeUAnHjKE9ByiKgepQne68ZpXzOcA+3lJZl4wj33s
5TmZSMdP5jKHPTwjlKfMZje7eEIIj5lFZXbShT90pRLbqcgO0jKYNHyiI+UY
RHt+04FSRPGDtgykNb9oQ3Fa8p0WDKAYkbwjBf1IzkxmMJ3CRPCNZmwijPVs
ZAN3iWchMcQRS3W+8DXo/z//Ajfse74=
      "]]}}],
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->{{-3.1, 3.1}, {-3.1, 3.1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571100171081915`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"416a87e5-f1c2-4467-b4d2-c93c013783ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "number of turkeys in turkey", 
   Typeset`newq$$ = "number of turkeys in turkey", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Turkey\"][EntityProperty[\"Country\", \
\"LivestockPopulation\", {\"FAOLivestockType\" -> \"Turkeys\"}]]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "number of turkeys in turkey", 
                  Defer[
                   Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  InterpretationBox[
                   
                   DynamicModuleBox[{EntityFramework`Formatting`Private`open =
                     False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                   EntityProperty[
                   "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                   SelectWithContents->True], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "number of turkeys in turkey", 
                    Defer[
                    Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[21]:=",ExpressionUUID->"123956bb-3790-477b-bb07-cf03ca2cace3"],

Cell[BoxData[
 RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
  RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
   RowBox[{"3.183`3.*^6", ",", "\<\"PureUnities\"\>"}], "]"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.757110054876118*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"e189ccfd-371e-485c-bec2-2b048152ed21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "population of the United States", 
   Typeset`newq$$ = "population of the United States", Typeset`chosen$$ = 
   "Entity[\"Country\", \"UnitedStates\"][EntityProperty[\"Country\", \
\"Population\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "population of the United States", 
                  Defer[
                   Entity["Country", "UnitedStates"][
                    EntityProperty["Country", "Population"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"population\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}],
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"",
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"population\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}],
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"United States\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"Population\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "population of the United States", 
                    Defer[
                    Entity["Country", "UnitedStates"][
                    EntityProperty["Country", "Population"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    
                    TemplateBox[{
                    "\"population\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}],
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    
                    TemplateBox[{
                    "\"population\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}],
                    "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"United States\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"Population\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[22]:=",ExpressionUUID->"b93cd35f-1393-49e0-8ead-19312c2e4781"],

Cell[BoxData[
 RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
  RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
   RowBox[{"324459463", ",", "\<\"People\"\>"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.757110114417927*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"bb0084ae-3d5d-4c45-b6a9-a3d6cc6de08f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "caffeine molecule", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Entity[\"Chemical\", \"Caffeine\"]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"Chemical\", \"Caffeine\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"caffeine\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {ChemicalData, "Caffeine"}]], Identity], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Chemical names and formulas", "scanner" -> "Data", 
     "id" -> "ChemicalNamesFormulas:ChemicalData", "position" -> "200", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"formula\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    SubscriptBox["\"C\"", "8"], 
                    SubscriptBox["\"H\"", "10"], 
                    SubscriptBox["\"N\"", "4"], 
                    SubscriptBox["\"O\"", "2"]}, "RowDefault"], 
                  ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                  False]}, {
                 TagBox[
                  PaneBox[
                  "\"name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"caffeine\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"IUPAC name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"1,3,7-trimethylpurine-2,6-dione\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalNamesFormulas:ChemicalData__More"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Structure diagram", "scanner" -> "Data", "id" -> 
     "StructureDiagramPod:ChemicalData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Chemical\", \"Caffeine\"][EntityProperty[\"Chemical\", \
\"ColorStructureDiagram\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[{
               CapForm["Round"], Null, {{
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {373.21, 
                  200.}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  200., -100.}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  373.21, -100.}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {554.43, 
                  80.47}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {286.6, 50.}]}, {
                 RGBColor[0.291989, 0.437977, 0.888609], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"N\"", FontSize -> Scaled[0.0822749198162344], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  554.43, -80.47}]}}, {{{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{378.21, 173.355}, {378.21, 150.}}, {{368.21, 
                   173.355}, {368.21, 150.}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{378.21, 150.}, {378.21, 100.}}, {{368.21, 
                   150.}, {368.21, 100.}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{220.57507765729275`, -82.34720689532752}, {
                   240.8, -70.67}}, {{
                   225.57507765729275`, -91.00720689532751}, {
                   245.8, -79.33}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{240.8, -70.67}, {284.1, -45.67}}, {{
                   245.8, -79.33}, {289.1, -54.33}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{396.11620394203015`, -86.7747090403983}, {
                   416.51, -75.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{416.51, -75.}, {459.80999999999995`, -50.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{350.3031348502217, -86.77585431833604}, {
                   329.905, -75.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{329.905, -75.}, {286.6, -50.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  LineBox[{{373.21, -126.45}, {373.21, -150.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{373.21, -150.}, {373.21, -200.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{529.2532224519496, 72.36244967354583}, {
                   507.11999999999995`, 65.235}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{507.11999999999995`, 65.235}, {
                   459.80999999999995`, 50.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{569.9586494608319, 59.05823814062461}, {583.61, 
                   40.235}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{583.61, 40.235}, {612.7900000000001, 0.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{562.6472966342419, 105.61117212909686`}, {
                   569.9649999999999, 128.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{569.9649999999999, 128.}, {585.5, 175.53}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{309.5068651497783, 63.22414568166398}, {329.905, 
                   75.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{329.905, 75.}, {373.21, 100.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  LineBox[{{286.6, 23.549999999999997`}, {286.6, 0.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{286.6, 0.}, {286.6, -50.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{263.69379605796985`, 63.2252909596017}, {243.3, 
                   75.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{243.3, 75.}, {200., 100.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{529.2532224519496, -72.36244967354583}, {
                   507.11999999999995`, -65.235}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{507.11999999999995`, -65.235}, {
                   459.80999999999995`, -50.}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.291989, 0.437977, 0.888609], 
                  
                  LineBox[{{{565.9351494608319, -56.140238140624604`}, {
                   579.5865, -37.31699999999999}}, {{
                   573.9821494608319, -61.976238140624616`}, {
                   587.6335, -43.153000000000006`}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{579.5865, -37.31699999999999}, {
                   608.7665000000001, 2.9180000000000064`}}, {{
                   587.6335, -43.153000000000006`}, {
                   616.8135000000001, -2.9180000000000064`}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{464.80999999999995`, 50.}, {464.80999999999995`, 
                   0.}}, {{454.80999999999995`, 50.}, {454.80999999999995`, 
                   0.}}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  
                  LineBox[{{{464.80999999999995`, 0.}, {
                   464.80999999999995`, -50.}}, {{454.80999999999995`, 0.}, {
                   454.80999999999995`, -50.}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{459.80999999999995`, 50.}, {416.51, 75.}}], 
                  RGBColor[0.4, 0.4, 0.4], 
                  LineBox[{{416.51, 75.}, {373.21, 100.}}]}}}, Null}, {
              ImageSize -> 144, PlotRangeClipping -> False, ImagePadding -> 2,
                ImageSize -> 131.26722, 
               PlotRange -> {{175.025, 625.1737}, {-212., 222.5}}}], 
             ImageSizeAction -> "ShrinkToFit", ImageSize -> {440.}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "4"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Skeletal structure", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Skeletal structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Skeletal structure"}, {}], 
         XMLElement[
         "state", {
          "name" -> "All atoms", "input" -> 
           "StructureDiagramPod:ChemicalData__All atoms"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Lewis structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Lewis structure"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Show bond information", "input" -> 
         "StructureDiagramPod:ChemicalData__Show bond information"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show graph properties", "input" -> 
         "StructureDiagramPod:ChemicalData__Show graph properties"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step\[Hyphen]by\[Hyphen]step", "input" -> 
         "StructureDiagramPod:ChemicalData__Step\[Hyphen]by\[Hyphen]step", 
         "stepbystep" -> "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "3D structure", "scanner" -> "Data", "id" -> 
     "3DStructure:ChemicalData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[
              RasterBox[CompressedData["
1:eJzsvWdYFMnfv/ucc96cl+fZ8NtkjkjOOeecc8455xwl54wgSBZFURAVFUUQ
E5izmDFgzglF6nyraxhn3cA+z393e13rvnrnGsaZoat7uevTVdVVC91DzL3/
7//6r/+K+H/hwdwtRi083C3O4v+DH6yCI/x8gr089YIjvXy8wmXd/x94cf3/
9V//9Qb+w88RhUL5PKmrr1fW0NDQ09M1MjIwMzO2tDS1sTG3tbWwsyutrGR7
7ygUCoXyv+H2nTvyyspK6upq2traBgb6pqagdzMbG0t7e2snJztXVwd3d0cP
D9iCIiLY3lkKhUKh/A/wDwoCwyuqqmLDGxoSw0N6t3J0BL07eXq6+vh4BAR4
Bwf7hIT4hoZ6BwWtqq9ne68pFAqFMjugd3kVFUU1NVUtLS19fQMzM1Nra9C7
vZsbuN0zIACsHhgZGRwTExYfD1t4QgJs8CQxI4PtfadQKJRf59bt26sbGkIj
I53c3V28vGISEnb297O9UyyADa+srKCqCobXMTQ0srCwsLeH9O7i7e0VFBQQ
EREaGxuZlBSXnp6QmZmcnZ2SmwsbPEnMzIQXwfZsl4BCoVB+xsqsLNyxqKur
a2RkaGZmYm1tbmtr6eBg7eRk4+wMm39oKNv7+DfxieGNLS3hODi4u7v7+/uF
hYXExkanpIDbU3NzVxYVZZeW5lVU5FdVFVRV5VdW5paXZxYXp+bl5ZSUsF0O
CoVCwZCWZxVNTS19fT0TE2MLC9yx6OBg6+ICZsMtz76+7n5+sLn5+obFxLC9
v38tnHZ4ppVGmzE8VHNwEDwDAwMjIyMSE+MzMsDhmSUleZWVRatWldbXVzQ2
VjU1VTc3w1bZ1FRWX19YUwOq7+jqYrs0FArlS4d0LILhNfX0wPC4XcLOztbZ
2dHDA9wOZvMJCfEPDwe/BUVHB8fEBEZF+YaG3pmYYHvH/xLIWBowvJq2Nmml
sXJwgEPhFRgYFBUVlZycmJWVUVgIcR30Xt7QUNPSUtfe3rB+/ZoNG5o2boSt
ccOG+vXrV7W1gfyzy8rYLhCFQvlyIUJTUFFR1tDQZDoWIcCT1OrBtEuA1cMT
EsBssWlpcRkZZIPn0Skp8Pr9Bw/YLsGfzyeGt7S3B8N7MoaHUidlZ0M+z6+q
Kl29GkJ73dq1oPSWzZvbt2zp2Lp1/fbtsK3bvh2et3Z3g/kr1qwpq6tju0wU
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
d7JdCAqFQqH8CiTAzxje6qPhJXw/Gl4hZoVSIsgcu109W0gzT1irUES7WFSn
FDYRnRL4Ucuugu2iUCgUCuVnEL3/uNyUMbzlXEG7+SLOnAwvHQx651OIW6Gc
xK+aJqieBW7HYtctFdOrEDeoFjeokTCslTBaLWFUB5u4fjX8E9sFolAoFAqH
GcOb/AiGX0EM77JQ3HsxBHjZsOXy0ZDeBVTThTSyhbULRXXLQOOgdEnjNVKm
zdJmrdJmbTLm7TLma6XN2+C5tFmLlEmjuOEqtotFoVAolI+tNLihZoXlPEH7
BSKuiyR8lkgHLZOL5FNM4FeB9M7oHXK7Ya2kcYO0aYuMRYesZaecdZe8Tbe8
bY+C7RYFu14F2x74EV6UteoE58M72S4chUKhfNF0bOyfyfCmP62wmCtgyxje
d4l0yDL5KCbAZwhp5onqloob1GC9m7XJWq4HjYPVFe23KznuVHbareK8R8V5
QMVlLzwqO+1RctwF/wRvkLPaYOSxju0iUigUypfLx57WFZZg+PkiLnitEJlQ
3MGqnCyolimsVSimVylhtFrKtFnWYp289SZI7EoOO5Sd96i6DKq6Dau7H1L3
OKzuOaLheUTDc1TdY0TN/aCq6z4QvqJDH7z/1sQTtktJoVAoXyI84+HxWJqZ
Vppg3AgPhlfPEtEuEtOvwgHevB1iOYRzjt5d94HbQema3se0fE5p+57R9jur
7X9O2w+2s1q+pzW9T8C/qroOKzv1y9t0s11QCoVC+RLhHS2JDS/ujdvh5aNW
KCcxhi8WN6iWNFkjY74WArmi/TYwtqrrEAR1Da8jWj4ntf3O6Phf0A28pBd0
RS/4mn7wddj0YAu6Ci/CP2n6nFD3OASfGj1FpyD+yzk+NNSSnd2Wk93f1tbf
3sb27lAoFJbBMZ73jicwvFTgMrnIFUpJgmqZkOHF9aulTBplLDrkbTYrOvTh
AO82zKT3ExDXdQLGQOb6ITcMwm4Zht8xDL9rFHGPbPDcIOy2fsi4buBleCdU
CspOu9ku7r+Tpuws3a/+2+Drr0y++dri229s/vOt/Xf/cfruPy7ff+f2w3ce
P3zv+cP3XXm5bO8mhUJhgR+Xm85ZYcm942mxVMBS2XA+xTgB1XRhrQKmlWYN
1/AqLnvV3A9oeB3V8j0NER2iOzjcMOyOUeR9k+hHZrFPzeKem8U+M4Ut5rlJ
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
MQ5vxgZIWwOsO62q9GAVZ7K+dbk5eMJJpkGeTDhZuHhR5VJ8l+s6pkF+t6jQ
AXHR41ISV8DSulqTrk54FE1hHrY6XBSEBqGwYPzlRfnY/FCJODsgc2Oko8mR
vCanueapojy7R4zCLgvFvTmt8UqJYFoI2DP312xTYRYPgj9DyF3M8nCPzOJe
Wia9sUmbsls57ZA97ZSL22RANVEtKHsrKt7DTHgyhLK24ftofKuxYThLSzBX
+hDm1T1H1Nz2cya0sd0ii23fKmlcL6ZfLaJTgtcZUVvJrwy2j4ddUjZJHb95
j+0j9CfD1fvy5cv5+fmFhYUlJCRkZWWVlZU1NDT09PSMjY3V7dYwrSK/1rsK
FSvTuwrXSrh3dQfKZ/Se3Ydi1uHeVXxHKs/EMlAd+OS//a2dqV17ijnR3Onl
meW8w+7Ab8QNLJEPjCLuFbY++ORTN+88hjoaj+EkozF9TulCNYRjwIRJ1COL
+Bck0tulTTOtN0yk/9gh+5zTIUvGWAZzJr2xt7e3sbExNzc3MjLS1dWFQwEH
ZNWqVX/x2fifQc4d1Mtw1qSlpaEystDSWsvP1ycseBAPfZe4KS/zTEVxWldr
2t8HJcTiJhSI1jpY7x9UlZ7Uflocrx++J/dAJS3ADfJFSxZxe117hQT2iArD
156QkrikIHtfU+21lTmCr01ORKlJ2PY+nsjdBT9GhiFI+F7unLYa+HU8SR6u
Gh4H+LFyuCj/EBaB5GXDOdPUaOaK6VUwbTWbIHIzfXPHmRh/nelle2aR+NY2
fcoxe9o1H3fzuRcjj1KmuaAdZW9DVQfwzLQQKWPXoaB65F3FmXKcs7RENjIM
v43/on1Pw9eCVcicNmB7edseqFbw1IVGYPsqEZ1iIQ2wfcYK5WSw/TL5qKi0
FraP05/DEgau3sXFxWVkZJSUlNTV1cFs4DewHLjO0dHxl72rePDMz3tXyfBI
kDzuXa372LtKlm2CitUm48OtiWd/cN+OnL7XO3CjfsOl1RsuHT37aNb3VzUf
mgkDe5nu4LN6Hztkn1omvsaRPg0iPRlOjyP9zztkH3M7ZD08PFxdXZ2cnOzs
7KysrExNTQ0MDLS1tdXU1BQUFP7PDvmfA+h98eLFcOKEhISkpKSgAoLqGE6W
g4PDBmXFM9ISN+SknygrftBSnwbZxkXj3lU7axyqIb2rKT8GP/8adcFBgYzk
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
NJ5sPGpSuAuUR4LGKeM2oURGpSw7Oxv3F8U0CN/c3Iybm5OTI07vzyplKB3g
5PFO3b59W9EXQNL7KBAeTz78DGwMSAUjimcStU4gqKamBs8zHtQrV66Mtjk/
8et8lzkrYpSt6le6XzD2/cImkvPI5bJPcIk9HMV5hs8n8i6KRrkC8lpaWgwL
LCAvjtXgAgIIsOjA+wlBx48fB+epvfXYsWO4nrdu3YKZR10J9o9Bno1vBeQD
AgJgIBV90pNN1IDOovEsudyIzSuUDRI3Am8B6rNgOKw7fsL54EN5eXlbW1tf
Xx9qZLitFRUVlEeOKmWsvGaQV/SpS3pPhcrmzJkzYWkMDQ3xbINRPj4+4Awe
WkAeXhSfMzMzR9uc7zM523aGWuBS01Jt15OG2+9bhj53SuDHxlawsbGpo46N
fbcEOJCTZ+Mi5eaqAORptDtealw3QB5gP3PmzODg4NmzZ4GClpYWXNiuri58
efLkyY6ODhSjuLyJiYlykJfI8BcJ9Ga5yFisZsTmFbLxeB1Q4MK3w7RXV1ej
1N63bx8+4yc+o1J29erVgYGBo0ePEuSpeWX4rXzzKaIkSfpzNXXqVBhUPOQ2
NjZgFKwjnklUPC9fvpyWloYHFTZmjM2FPpPbFq7O1nDsXuX1iVngjzQ2tvoG
t7Xk9WNj3y3du3ePIM8SCxPkxVggyPv5+aH6gwtYVVXV2dl55MgR6g+PCws4
4AMq+BTAgY3HajQJCJGBOlKiau/r6wuXqOiTnmy6e/cuJZcjyItHubIUNxSr
cXd39/LyCgoKwk0Bosn2oGhubW0F3lE64yYC8nhTwHnUzgB51H9HLK+lnHKS
FKUpU6bMnz8fvtTc3ByM2rp1a2BgILBz/PhxPNV4UMPCwsbe/L8LHOeujFe1
bdbzuGKy62vbaM67mCs4y0W18H0mnRK5Mxcn1dxklHlyRCcvnn2bxrwD3fn5
+bB/oHpdXV1JSUleXh4uL64trCB+ouJP81IxyKOOHxkZSakpvb29FX26k1ML
Fy5k/Woo8sY6T4rb0Cl7GEw4blBZWRmK6dOnT1+6dAk8b29vB/NRETtx4gQ4
j58APtahbKWAvHjeLpTXO3bsUPRJS3ofBccya9YsfspgIyMwCjVT+A08nHiA
4VWAHdBmjCmHaGyssrKytkmAjttZo52PrcI41xR+bGzeGTY2doKmL/jdgpnH
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
rPRgO/BCYNfU1ASdtLW1V4iEX/ElVsBjzMn6TK5cudLa2pomfg0JCSkvL8fz
/CZjY98HEeTZ4N/ExEQG+T179oy4CSCPEpbNtAjIo1qEypEUk58gkoO8mZkZ
QZ4yDwPyeXl55OThcCTIv7syt7JSF2Zw11uzZrWpqZG5uYmVlamNjbmtrZmN
zQZPzwsTo3Y2RSZxlIY8PBl4cu9k3cF2BvaVgnR1dfX09PRlwmd8g++xGvaJ
/aAswEMOHHl5eQUEBMC64PEG52niV0WfveKFi4zrKYb85cuXCfIFBQUjbjIc
8r29vagWSZCfIHpzyMPqMMg/fvxY0Qcu6U2loqFB6Ud1DQ2Bd2MLC1DdYu1a
awcHGycnOxeXtevWYcEH/KpY1Is9PLW0wsMzA88mOMOzClbjnHR0dMBwPLcG
BgarVq1aLcjwVeEb/Am0B+dRNKxZs8bBwcHT09PX1xfsam1t7e7uprGxpaWl
Cjz3CSI5yCclJcHJU0z+DSGPypEE+Qml4ZDHiyaGfH5+/lFB6enpoaGhBPnR
+i1ImlA61NLCE15La4Uw46OhmRncu4WdnbWjo52zs72rq9PGjbjT6zdvxuK2
ebOrp6fzxo2bt29XyNGePHmS2XiKw1MzK5ukmGaiB6vh24ntoDcwDm4bGRkZ
GxubmJiYvip8g+/xV6yDleX6TFZXV8OmUp9JaVgfCYWpGPJgNS4RQR4oGHET
Ocjjwh4+fBilA1iBwnScj1/ScMEpjQ15FN8S5N9FeXp5qWhqkocnwptaW8PA
w64D787u7gC7+7Ztnjt2bPHx2ernh5uNZYuv7yZv752K6CUu5+FBeNCDDLyy
sjIwAvdOYRnCO7gNgIMteGjNzc0tLCyAJiuRLAXhT1gBq2FlbELdv4OCgvBg
nzp1Cj/h5/Fgj//5Tkz9Qch7eXkR5FE5CggIkJz8RNDYkKc6GkE+LS2NIA8X
JEF+gosnvBCl0YLjhcsFAe3sbJ2dnTZsANuBccDcOyBgZ3Cwb2ioX3i4f0QE
LbvCw/EN/uQ/voP6xyY8GXgdHR09PT0x3gFwAruNjQ0sup2gtTLRr/iTtbU1
0R6bgF2wLkBQd3f3wYMH4+Pj3/M+k3JikHdzcwPkUc25evXqnj17qFI/4iYA
CG4Qg3x4ePiRI0cSEhIkyE8QiSFvYGAghjzN611YWEiQT01NlSD/Tmjg3DkQ
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
A/5iyOMvfOL9lyRWVlZWR8jjjp48efKsWbMI8uJZbwLkvUNCYjdvTsvPz9m5
c3t5ecnBg7D0uw4f3nvs2PkrVxR9WJI+jHr27Nm/f/9hw4ZNmDBh9uzZGNbh
FqbS4paWlqtcyqjsZEDZm2Un3bmjZ6VYzRcsdOudQn79+vXx8fGdfkUO8lZW
Vjt37kxMTJQgr3BhPA7I414WIE+zYilXFs5NbmozDc1o/HXz1q0rdXWnz52r
OnbsemOjog9F0gcWzFifPn1wSeDmxfUwZ84cLS0tXAkY0JmZmeFfce+HhYWl
paXF5J814ctOUimD+U6tit53Sf9IcpB3cnKSIP/lCrcqQb537940MAfkaXYz
nJsY8vBvAuTh5xW945I+urp3796vXz+M3HE9zJgxA7f8okWLli9fjtanJzK4
6zF4z8zMTE5O9vPz8/T0dHIPNXQ/uj5CKmXwZasj5Hft2vWekF+yZIkE+c9K
uG1xLxPkaQGpkSNH4qaeOnUqII9WFk95kyD/VQmDuwEDBgwfPnzChAnKyspy
sRrcvBs2bADe8/LyoqKiaJFfFxcXGxub5uZmRe+7pH8kgjw8nhjy3t7egDx6
806/0hHyJSUlSUlJEuQVLiUlJTHkYdsAebQvII/7Wg7yaDsJ8l+JcGFQrGb0
6NEUq9HW1sYtj47e3Nzc2toaPKcipVu2bAHtYfNo3R+YfEXvu6R/qk4h7+Pj
8/6QX7duHZw8Qd7U1PQT778ksWi6K0G+f//+BHkqXCNAXly7jCCPF4recUkf
Vz169BBiNTNnzpw3b97ixYvFsRrc8hi5Z2VlYUju7+9PdS1wR+O+VvS+S/qn
koO8o6OjBPkvVwLkBw4ePHn69HkLFy4Gz01NLdavt/f0dPb2tnN1NTEzo5oG
EuS/EgHdFKsZMWLExIkTcedqamrq6uriGqAy1Pb29sHBwSkpKXl5efDzuP2F
5cAUve+SPoA+FOSTk5MlyCtcgPzIMWMmTps2ddas2XPnagDy4LmZ2Ro7OwdP
T6/g4KCYmKjU1MSsrISMDDdvb4I8xuyK3nFJH1FCevyYMWOmTp06d+7chQsX
YjQnxGrc3NwiIyMzMjI2b94cGBhIsRqgwMLCQtH7LukD6B2Qx6it069IkP9s
NUZJafzkye2QV1PTWLRoyfLlRubma+3tHb28vENCgmNjozZtSsrOTi8oyCou
3lpWJjn5Lq8ePXpQPVLc6RSrwZ1rYGCALn7t2rW40319fRMSEnJycuLj42Ht
hFjN22bKSPqyJAd5BweHsrIyNPpfgnxJSQnGehj0SZBXrMZMmNAO+dmzldXV
5y9eDMivtLCwdHBw8vb2Dg0NjouLTktrh3xJCSC/ddcuNJyid1zSx1JWVpZQ
ymDSpEm4bRcsWKCnp2dkZESxGtzyISEhmzZtysvLCwsLE2I1uK8Vve+SPoz+
OeQpu0aC/OcgQF5p8uRJ06dPmz1bZd48zcWLdQwMAHkrR0cn3L2hoSE85JNz
cjZv355NkC8rO3D0qKJ3XNLHkjhWM23aNNzpFKuhxX9tbGyA9Ojo6C1btqSl
peGWF9ZolupQdRmh9ceNG/c3IK+srCxB/nPTWEB+yhSCvCogv2SJ7ooVq9as
AeSd0agbN4bGx8ekpyfn5rZDftcuQP6otMxT15VQykBJSWnWrFkaGhpysRrc
5omJibm5ubGxsRSrcXFxwft79uxR9L5L+jASII8RHCAPUAPyaGu0ckBAQKdf
6Qj54uLi1NRUfNfMzOwT778kQQ2Nja8hr6ysqqGxQEdH19DQeO3adU5OLn5+
vmFhoQkJsenpKbm5GYWF2Tt3EuTPXbqk6H2X9FG0bt06itXghp08ebKqqqqW
lhbFaqiUARz7xo0b4eEB+dDQUG9vbxh7Jycn3NSK3ndJH0x/D/IjR46UIP+5
aXthoQD56crKc+bP19LRwf1sYmlp7ewMyPuFh28E5DdvTtm6FZDP4SGfW1ZW
19Cg6H2X9FFEsZohQ4ZQ2UkqZaCvr29sbEyxGk9Pz5iYmMzMTNy/QqwGw3lp
VmNXkgT5LqPY+PixEydOmDJl8owZgPxcTU0tXd2lK1eutrKycXFxxT0cERGW
mBi3eXPq1q1bioraIV9aeufuXUXvu6SPInEpg45lJ3GPBwYGJiUl5efnR0dH
+/r6UqzG1tb29OnTit53SR9MHSFfWlr6NyC/adMmCfKKlbuXF4P81KkM8ioq
gLy2nt6yVatM162zdXV1Cwhoh3xGRmpeHoN8aSkgj5+K3nFJH0Uw7Z2WnVy5
cqW47GR6enpWVlZQUJAQq1m7dq2i913Sh9SSH75f1ru328gRQTOmJ6urbdfV
aQjfeMpA/7TK7FpDg06/ov39t0Y//+Q+cED4BKWsmTPK1Ofe8fNpXmfZNG3K
xZHDP/H+SxI0T1NTgPwMFRW1BQsAef1Vq8ysrW3d3NwDAwMiI8OTkuK3bNnE
Qx4ePg+Q37lT0Tsu6aOoY9lJuVIGoHpcXFx2dnZycjKVMnBzc4NVw6+K3ndJ
H1L63/7P9qcfE3v12D1oQM2IYXcnKXFO9pzq7Ifjx7wN8jrf/J/ZD99F9OhW
PKDfieFDmseO4uxtOUODp0pjJcgrUGOUlMbxkJ8yc+ZMVVV1La2FS5filja3
sVkPi4aReVRUeHIyg/y2bZk7dhDksyXId1EJsZqJEydi3C0uZSAuO5mfny+V
nezaEiD/x/tD/n/tkN8hhrwRg/ylURLkFSYG+UmTJhLk58xR19ZetGyZgYmJ
ua2tnbu7B27pqKiI5OSEzMx2yJeVMciXlCh6xyV9eInLTlIpA7myk66urhER
EZs3bxaXnXR0dJTKTnY9yUN+4ngG+TnKEuS/OLVDftq0KfxSf/N4yK9YvZpV
J/Pw8AwK2hAdHZmSAsin5ednFhdLkO/CorKT4lIGFKsRFm2nspM5OTlyZSfx
q6L3XdIHVueQn6sCyJ9RVe70K51DfuUKCfKKFStcw0NeXJ1shakpVSfz5KuT
RfLVyQD5LB7yW3ftAu0VveOSPrCEUgYjRoygUgZvKzu5bds2cdlJOHxF77uk
Dy9A3kYO8o7vBflwAfLjx3B2NhLkFa5Oq5MZmpmttbd3wGg8JISVoNy0CZBP
5yFPhWu2FBUpesclfUjV1dXJlTIQyk5SKQOp7OTXpmVvQv7OBEDejiB/9u2Q
N/1egvxnJ/nqZLISlJb29o7e3lSCMvrNEpSAfJbk5L98AexKSkq0mkCPHj16
9epFsZq3lTLw8/NLSEjIzc3FT6HsJN7ft2+fog9F0odXB8iP4yGv+tcgv96G
W2UIyF+WIK84va06GStBKapOlpSTs7mgQKhOtl0qUfIlKzg4uJtMhPc+ffqA
8P379x8wYMC4ceNUVVWFspNmZmZS2cmvUMu+YZBPkIO8muqjvwZ5axnkR3zi
/ZckSFydTIWvTqYjqk7ms3FjSHx8jFSCsquIwjJi9w689+3bl/A+aNCgwYMH
DxkyBH5+8uTJ+vr6QtlJ+Pbo6OjMzExx2UmQX5rJ2FXFQ/6HTiFfM+edkO/+
JuSNjQD5KxLkFaTDR47IVyfjS1C2Vyfz9WXVyaQSlF1FFJyRIzwMPPA+cOBA
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
lQAZaX9S8tFbkvwWyUu+YkhPMxlLiqzP6ifXtTVQYgfhq55AlRkQu5rKxvEJ
xa0xfp3NnAX/YzAYWpmcmvpamAfnozBPbmKF3zmhrs6Ql5dlsyn/w4/gI8DY
wuJWbOwXPZ9RUJBVVAQjs7DwcUFBWl7eo+xsUH10QsLNCNzGZGfh891f0SL5
H394sH9f+oH9zw5vlmskJbqPSQ7LHJuAMM9kvGcxPynIozqMEllyRz4nB9K7
AhrUP8nNUG+ZuFCDwewIIKVDmAeZg7d/G+bhSXA7g8ViKigg7aurq25qH154
2sDgtKEhDEs7u8qWFpHnixsaqltayvn84vr6/OrqZ5WV2WVlvOJiUD03M/PO
vXt0TxqzncA9aLvrPXIJ5dNDB0rEDr+QEGuWlBAekxySkRpnSL+RO77ElF1h
ya2xmcSG6ln/pPotKyc/yMvSPSEMBrPB74R5pHd5eTlyXSX8aFuJXu/sWQMz
M0Nzc7TL1dwcjs87OlKeF3R3946PC8fGBIODlQJBSWNjYV1dXnX107Iy8Hx8
Ssrs3Bzd88ZsJ3Tvnth9qMNw5sG/Fxw5VPWTGP/oTx1SR/ulpUaPS0/Lyiww
GWDvTyy5dZHnRameGmSVZglneAxmh4HC/OnTojAvr6Qky2ZThocDNtnaEgL8
KbI4r2tkpLfZ6IAqzlvY2kKSN7exgWFsafm8pubV5OTyysrihw9TCwvg+Zq2
tvLm5pKmpucvXjwpLU3k8XoHBuieNOYLZJ01vvefqMlwNtl/kqrY9EiTFRuG
9CwK84xl0vMbeV6kejLAr7Lk5vV06J4EBoPZDgrzurpqWlpUmAfJbxieutcU
aXgNXV1keGNj0bVXcLsV2b7AztnZ3sWFujeurZPTOQeH9s3F8CufPkGeb+zt
re3srGptLeXz82tqIMxPTU3RO2XM15h//fo+2b4m9zC6/NpwVLxd6mivtOTr
48cmGTJzcsffMhkf5WXB55/ZTBjr5OMKS25RjrE0MkL36WMwmC8DAlcnwzwk
eVGGR7eMJfvgbGR4MLypKRgeEjvo3fbSJRD7RXd3J6p9gbe3m7e3q5eXk6cn
aJ/6s2+Xl3snJ1uGh5v6+uqEQqoHQmZR0RtcrtnZdGVmpJJbX8vIZTZtUht5
fpyB6jag+kUmA2wPwR7c/kbu+GxONt2njMFgfo+2jg4NMsxThodBLbChOp3p
GBqC3iG9W9rZQXQHt1/y8ACxX/bx8bh+/Yqf39WAAK+AAG8OBwbVwQDkD392
fnm5Z2qqfWREMDTE7++v7eoq4/N5JSV0TxfzR+nnZeUdPlghfqTxKFpRKTwm
2SctNSQjBcIflpGaiI2h+wQxGMwfRUtPT26zFC+noKAkulmsiQmV3kHvF9zc
ILeD26/4+18LDLx+86ZfSEhAWJiog4H/lg4G3JSU+bW1gdlZaoEleL6xp6dC
IOAVF9M9VwwGg9l1lJaXU1UaKsOD4bWpLpZWVufs7e1dXJw8Pd19fCCx+wYF
gdh/vn37ZkRESFQU2t8UG4tGTExodHRwRMR//fIL6mDA4Sx8/vxqcbFnerpr
fLzt9eum3l5013g6bo+IwWAwu5yNOjy5WlJVUxMMb2BmZmptfd7REQK8q7f3
FT8/Su9Bd+6AzMPj4u7evx/58GF0QkJMYmJMUhI8RnG5EQ8ewI9CIiM54eHZ
RUXDi4t9b950T05CmG/q6yvl8+meKAaDwexG0FoaZWVRlQYyvOn589aOjo7u
7pevXfPmcPxCQiCih0ZF3Y6PB7eD1eNTU++npz/MyOBmZnKzsuARju+npcUl
J9998CAsOhpeApLvn53tJivzDT09xXV1dE8Ug8Fgdh25eXmQ4ak+BppnzuiR
hocMf9HdHfWBDwyEAH8zIgIiOgT12KSke2lpoPSkp09Tc3MfP39OjfT8fNS+
ICcnkceDX4jkcoMjIwfn5yHJC8k1NlWtrXRPFIPBYHYjugYGVJXmlI6OrrGx
saWllYOD4+XLl318fH7+mXPrVkhk5C/x8dEJCfEpKQ8zMx9lZ4PVn5aWFtXV
FW32LsgpL4dneMXFGQUFoPoHjx/fuXevpr29Z3q6Y3QUYvzY5CTdE8VgMJjd
CPvECcjwVMNJAzMzdI8/V1e3a9cgwyPDR0WBrmMSE++np0NKT332DEyeW1lZ
1tjY1N3dNjzc1NNT19kJti+orc2rrs6pqMgqLk7JyflHSgocdI6N8fv7m4VC
umeJwWAwuxRlNTVqx9MZE5OzVlY2ly45X73qFRDgHxoKGR4MH5uUBMk86enT
9Px88HZ+TU1Fc7Ogt3dkenpqcfH17GzX2FhtZydqX0B2qsmtqsoqKkrg8SDz
N/X1teAbQmEwGAx9qGpqaunp6RobG5qbW9rZOV6+7HH9+o3g4KC7d3+Jj4cM
D4ZPBsM/f/6kpAQyPJgconvv6Oi7jx8Jsn3B2Py8YHCQal9Q/vJlcUPDs8rK
tLw8eOHE9DTd88NgMJhdjbq2to6hob6pqZm1NcR4Vy+va4GBgbdv34qNjUpI
uJeWlkQZvrQ0r6qqsL4eTM7v63s1Pb366RP1F+bev+8YGYEn64XCmvZ2iPSQ
5yHMF1VV0Ts1DAaDwWieOXPGxMTIwsLc1vaCmxvEeL+QkODIyLv37/8jJSWR
x4NMjgxfXQ0RvaK5GRK7YGhoZH7+M/nytfX1qaWlzvHxluFhfn9/Q3c3eL6k
qSm7rKy1s5PmuWEwGMyu56qvrz7ZncbqwgUnT09vDicwPDw8Li4mMfFhRkZq
bi6vpASSOei9rrMT4rpgcLBrdHTy3buP5MtX19cn3r2j2tSA518ODNQJhRDm
s8vL6Z0XBoPBYICWtjZDc3NzGxtbJydXb2/foKCbd+9SMT7pyZOMggLI8CBt
cLtwfHxwbg7G2Nu371ZWVghinSA+QpJfXe2bmekaH+8YHUVtanp7K1taIMnT
PTMMBoPBIIwsLCzs7BxcXd19ff2Cg0OjoqK43AePH6c+e/akpKT85cuWvr7x
2dmZt28XlpdhzK+srG++do0gQPIDc3Pofq9Um5q+vgqBoBHvfsJgMJidgaOr
K7WuxvPGDf/Q0FuxsTGJidzMzPT8/GcVFVUtLd3j4++Xl0W/v77ltZ8gyS8v
o82tMzPCyUlK8mW4ERkGg8HsGCanpkDyF93dPf38AsLCwuPi4pKTE3m8xwUF
uVVVFc3NPRMTS1skv7S+/mFtbXkNUjyxsLo68v69qIMBSL6hpye/poa+2WAw
GAxmO5zg4O2Sf/Iks7AQbW7l81/29w/PzS2uri6urLxdXp5cWZlaXZ1eWZlb
Xh59/354cXFgbg5JfmJCMDRU3dZG92wwGAwGsx17FxfPGzf8QkLCYmJiScln
QJIndz+96OhoHR7uf/NmeGEBfA4DxP5qaQkeYUCM75+d7dnsNtne20v3VDAY
DAaznYnJSTdv7+tBQSFRUdEJCdysrMfPnz+rqCiqr69saakXCpsHB0HjXRMT
4HPI7ZTtYSDDT093kG1qGtrb6Z4HBoPBYL7M9MyMF4cTePv2nXv37qenp+bm
ZpeVFdTWljc3v+jsRI1ohoZEnu+dmQHVw2P31FTH6Ci/r68J737CYDCYnQ14
ngrzMYmJVFk+r6qqpLGxqrW1TiiErN4yPAye7xwbA9VTa+PhmfrubuHAAN3n
jsFgMJg/REllZWh0dGxycnJ2Nq+4OL+6uqSpCXm+q6uxt/flwEDz4KBgaAgO
Grq7a3GJBoPBYP4FqaytjXz4MCErK6OgIKeioqC2tpTPrxAIwPbVbW3ooLmZ
7nPEYDAYzP+VoVevSmpqCquqSmtr6wQCAa69YzAYWvlvzvIx/g==
               "], {{0, 0}, {503, 426}}, {0, 255}, ColorFunction -> 
               RGBColor], {
              Method -> {"ShrinkWrap" -> True}, ImageSize -> 553, 
               ImageSize -> {503, 426}, PlotRange -> {{0, 503}, {0, 426}}}], 
             ImageSizeAction -> "ShrinkToFit", ImageSize -> 400], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show bonds only", "input" -> 
         "3DStructure:ChemicalData__Show bonds only"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show space filling model", "input" -> 
         "3DStructure:ChemicalData__Show space filling model"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {
    "title" -> "Basic properties", "scanner" -> "Data", "id" -> 
     "Basic:ChemicalData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Caffeine\"], \
{EntityProperty[\"Chemical\", \"MolarMass\"], EntityProperty[\"Chemical\", \
\"Phase\"], EntityProperty[\"Chemical\", \"MeltingPoint\"], \
EntityProperty[\"Chemical\", \"Density\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"molar mass\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["194.19", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "194.19"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"mol\""}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"phase\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"solid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Solid"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"melting point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["235.3", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "235.3"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.23", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1.23"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {
            "short" -> "g/cm^3", "long" -> "grams per cubic centimeter"}, {}], 
           XMLElement[
           "unit", {"short" -> "g/mol", "long" -> "grams per mole"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], 
                    "UnitOnly", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"grams per cubic centimeter\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"mol\""}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], 
                    "UnitOnly", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"grams per mole\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}}, "Rows" -> {{0.5}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Hydrophobicity and permeability properties", "scanner" -> 
     "Data", "id" -> "HydrophobicityPermeabilityProperties:ChemicalData", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"experimental LogP hydrophobicity\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["0.5", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.5"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-0.5"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"predicted LogP hydrophobicity\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["0.23", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.23"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-0.23"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"experimental LogS\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["0.97", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.97"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-0.97"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"predicted LogS\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["1.25", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1.25"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-1.25"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                   "\"experimental Caco\[Hyphen]2 permeability\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["4.41", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "4.41"]]}]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "-4.41"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Basic drug properties", "scanner" -> "Data", "id" -> 
     "DrugNamesProperties:ChemicalData", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"approval status\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"\"approved\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"small molecule\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"drug categories\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"\"anorexigenic agent\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"central nervous system stimulant\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"phosphodiesterase inhibitor\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"dosage forms\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"\"oral: capsule\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: elixir\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: liquid\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "\"oral: pill\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: solution\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: solution / drops\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"rectal: suppository\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: suspension\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: syrup\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: tablet\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"oral: tablet, extended release\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "DrugNamesProperties:ChemicalData__More"}, {}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Solid properties (at STP)", "scanner" -> "Data", "id" -> 
     "SolidProperties:ChemicalData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.23", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1.23"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"vapor pressure\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["150", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "150"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"mmHg\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"at \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["80", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "80"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"refractive index\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.494", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1.494"]]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "1.494"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {
            "short" -> "g/cm^3", "long" -> "grams per cubic centimeter"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "mmHg", "long" -> "millimeters of mercury"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], 
                    "UnitOnly", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"grams per cubic centimeter\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    "\"mmHg\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"millimeters of mercury\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}}, "Rows" -> {{0.5}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Thermodynamic properties", "scanner" -> "Data", "id" -> 
     "Thermodynamics:ChemicalData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    TagBox["\"specific heat of fusion\"", Identity], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.11", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.11"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Right}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "Thermodynamics:ChemicalData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "1"}, {
           XMLElement[
           "unit", {"short" -> "kJ/g", "long" -> "kilojoules per gram"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Helvetica",
                     FontSize -> Smaller]}], Identity], "UnitOnly", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"kilojoules per gram\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}}, "Rows" -> {{0.5}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Chemical identifiers", "scanner" -> "Data", "id" -> 
     "ChemicalIdentifiers:ChemicalData", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Caffeine\"], \
{EntityProperty[\"Chemical\", \"CASNumber\"], EntityProperty[\"Chemical\", \
\"BeilsteinNumber\"], EntityProperty[\"Chemical\", \"CIDNumber\"], \
EntityProperty[\"Chemical\", \"SMILES\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"CAS number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"58-08-2\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"Beilstein number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"17705\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem CID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"2519\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem SID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"148854\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"SMILES identifier\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalIdentifiers:ChemicalData__More"}, {}]}]}], Typeset`pod11$$ =
    XMLElement[
   "pod", {"title" -> "NFPA label", "scanner" -> "Data", "id" -> 
     "NFPALabel:ChemicalData", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Chemical\", \"Caffeine\"][EntityProperty[\"Chemical\", \
\"NFPALabel\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{
                InsetBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[0.009], 
                    GrayLevel[0]}], 
                   RGBColor[1, 0.87, 0], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{
                    0.7071067811865475, -0.7071067811865475}, {
                    0.7071067811865475, 0.7071067811865475}}, {0, 0}}], 
                   RGBColor[0.9, 0.25, 0.1], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {
                    0, -1}], {{{-0.7071067811865475, -0.7071067811865475}, {
                    0.7071067811865475, -0.7071067811865475}}, {0, 0}}], 
                   RGBColor[0.1, 0.37, 0.9], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{-0.7071067811865475, 
                    0.7071067811865475}, {-0.7071067811865475, \
-0.7071067811865475}}, {0, 0}}], 
                   GrayLevel[1], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{0.7071067811865475, 
                    0.7071067811865475}, {-0.7071067811865475, 
                    0.7071067811865475}}, {0, 0}}], 
                   GrayLevel[0], 
                   InsetBox[
                    FormBox["0", TraditionalForm], 
                    
                    NCache[{2^Rational[-1, 2], -0.05}, {
                    0.7071067811865475, -0.05}]], 
                   GrayLevel[1], 
                   InsetBox[
                    FormBox["0", TraditionalForm], {0, 0.6821067811865474}], 
                   InsetBox[
                    FormBox["2", TraditionalForm], 
                    
                    NCache[{-2^
                    Rational[-1, 2], -0.05}, {-0.7071067811865475, -0.05}]], 
                   GrayLevel[0], 
                   InsetBox[
                    FormBox["\" \"", TraditionalForm], {
                    0, -0.7571067811865475}]}, 
                  PlotRange -> {{-1.5, 1.5}, {-1.5, 1.5}}, ImageSize -> 167, 
                  BaseStyle -> {
                   FontFamily -> "Times", FontSize -> Scaled[0.24]}, 
                  BaselinePosition -> Center], {87.675, -87.675}, 
                 ImageScaled[{0.5, 0.5}], {167, 167.}]}}, {}}, {
             ImageSize -> {40}, ImageSize -> {187.35, 187.35}, 
              PlotRangePadding -> {6, 5}, ContentSelectable -> True}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Table", "input" -> 
         "NFPALabel:ChemicalData__Table"}, {}]}]}], Typeset`pod12$$ = 
   XMLElement[
   "pod", {"title" -> "Safety properties", "scanner" -> "Data", "id" -> 
     "SafetyProperties:ChemicalData", "position" -> "1200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"Caffeine\"], \
{EntityProperty[\"Chemical\", \"AutoignitionPoint\"]}, \
\"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"autoignition point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["600", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "600"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Right}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SafetyProperties:ChemicalData__More"}, {}]}]}], Typeset`pod13$$ = 
   XMLElement[
   "pod", {"title" -> "Toxicity properties", "scanner" -> "Data", "id" -> 
     "ToxicityProperties:ChemicalData", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"lethal dosage\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["192", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "192"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Helvetica", FontSize -> 
                    Smaller], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"mg\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"kg\""}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"oral dose for rats\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ToxicityProperties:ChemicalData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "1"}, {
           XMLElement[
           "unit", {
            "short" -> "mg/kg", "long" -> "milligrams per kilogram"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    
                    RowBox[{"\"mg\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"kg\""}], FontFamily -> 
                    "Helvetica", FontSize -> Smaller]}], Identity], 
                    "UnitOnly", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 10, StripOnInput -> False], 
                    StyleBox[
                    "\"milligrams per kilogram\"", {
                    FontSize -> 10, FontFamily -> "Helvetica", FontSize -> 
                    Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}}, "Rows" -> {{0.5}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ChemicalDataSourceInformationNotes.html", "text" -> "Chemical data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ElementDataSourceInformationNotes.html", "text" -> "Element data"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "13", "datatypes" -> 
    "Chemical,MatterPhase", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "4.335", "parsetiming" -> "0.17200000000000001", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa1282510d604i2bg5c6h1g00005g6i68e2328504ad", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "41", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1282610d604i2bg5c6h1g000020996301chd706b99059329926228553144", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 42, 55.0672003`9.493467835998107}, "Line" -> 
    24, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Entity[\"Chemical\", \"Caffeine\"]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "caffeine molecule"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{165., {51., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"0d51eae4-e9df-41fe-a81f-0049f1424a4f"],

Cell[BoxData[
 TemplateBox[{"\"caffeine\"",RowBox[{"Entity", "[", 
     RowBox[{"\"Chemical\"", ",", "\"Caffeine\""}], "]"}],
   "\"Entity[\\\"Chemical\\\", \\\"Caffeine\\\"]\"","\"chemical\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.7571101469317894`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"52f7efd1-497f-4429-bb10-e62f4bb8d476"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "toast + orange juice", Typeset`newq$$ = 
   "toast + orange juice", Typeset`chosen$$ = 
   "EntityInstance[Entity[\"Food\", {EntityProperty[\"Food\", \"FoodType\"] \
-> ContainsExactly[{Entity[\"FoodType\", \"Toast\"]}], \
EntityProperty[\"Food\", \"AddedFoodTypes\"] -> ContainsExactly[{}], \
EntityProperty[\"Food\", \"CompleteItem\"] -> True}], Quantity[1, \"Items\"]] \
+ EntityInstance[Entity[\"Food\", {EntityProperty[\"Food\", \"FoodType\"] -> \
ContainsExactly[{Entity[\"FoodType\", \"OrangeJuice\"]}], \
EntityProperty[\"Food\", \"AddedFoodTypes\"] -> ContainsExactly[{}]}], \
Quantity[1, \"Servings\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "toast + orange juice", 
                  Defer[EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    Quantity[1, "Items"]] + EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], 
                    Quantity[1, "Servings"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  RowBox[{"EntityInstance", "[", 
                   RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Items\>\""}], "]"}]}], "]"}], " ", 
                  "+", " ", 
                  RowBox[{"EntityInstance", "[", 
                   RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Servings\>\""}], "]"}]}], "]"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  RowBox[{"EntityInstance", "[", 
                   RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Items\>\""}], "]"}]}], "]"}], " ", 
                  "+", " ", 
                  RowBox[{"EntityInstance", "[", 
                   RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Servings\>\""}], "]"}]}], "]"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    SelectWithContents -> True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"Items\""}], "]"}]}], "]"}], " ", "+",
                     " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], SelectWithContents -> True], ",", 
                    " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"Servings\""}], "]"}]}], "]"}]}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "toast + orange juice", 
                    Defer[EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    Quantity[1, "Items"]] + EntityInstance[
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], 
                    Quantity[1, "Servings"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\<\"Items\"\>"}], "]"}]}], "]"}], " ", 
                    "+", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\<\"Servings\"\>"}], "]"}]}], "]"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\<\"Items\"\>"}], "]"}]}], "]"}], " ", 
                    "+", " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
                    "ImplicitEntityToggle"]],
                    Entity[
                    "Food", {
                    EntityProperty["Food", "FoodType"] -> ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}],
                    SelectWithContents->True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\<\"Servings\"\>"}], "]"}]}], "]"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"complete item\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""},
                     "GrayEntityFrame"], "\":\"", "True"}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "Toast"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}], 
                    EntityProperty["Food", "CompleteItem"] -> True}], 
                    SelectWithContents -> True], ",", " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"Items\""}], "]"}]}], "]"}], " ", "+",
                     " ", 
                    RowBox[{"EntityInstance", "[", 
                    RowBox[{
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"foods\""}, "ImplicitEntityBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{"\"food type\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
                    "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{
                    TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                    "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    TemplateBox[{"\"added food types\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                    "\"EntityProperty[\\\"Food\\\", \
\\\"AddedFoodTypes\\\"]\""}, "GrayEntityFrame"], "\":\"", 
                    RowBox[{
                    StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                    TemplateBox[{}, "EntityContainsSequence"]}]}, 
                    "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""}, "ImplicitEntityToggle"]], 
                    Entity[
                    "Food", {EntityProperty["Food", "FoodType"] -> 
                    ContainsExactly[{
                    Entity["FoodType", "OrangeJuice"]}], 
                    EntityProperty["Food", "AddedFoodTypes"] -> 
                    ContainsExactly[{}]}], SelectWithContents -> True], ",", 
                    " ", 
                    RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"Servings\""}], "]"}]}], "]"}]}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[24]:=",ExpressionUUID->"7a86afeb-080e-4a24-a2d6-1d6d30eb423f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EntityInstance", "[", 
   RowBox[{
    InterpretationBox[
     DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
      TemplateBox[{TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
         GridBox[{{
            TemplateBox[{
              TemplateBox[{"\"food type\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
               "GrayEntityFrame"], "\":\"", 
              RowBox[{
                StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                TemplateBox[{
                  TemplateBox[{"\"orange juice\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"OrangeJuice\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"OrangeJuice\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                 "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
            TemplateBox[{
              TemplateBox[{"\"added food types\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""}, 
               "GrayEntityFrame"], "\":\"", 
              RowBox[{
                StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                TemplateBox[{}, "EntityContainsSequence"]}]}, 
             "ImplicitEntityInfoRow"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "GeneralizedEntityInfoGrid", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
        Dynamic[EntityFramework`Formatting`Private`open],
        "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"OrangeJuice\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] \
-> ContainsExactly[{}]}]\""},
       "ImplicitEntityToggle"]],
     Entity["Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
          Entity["FoodType", "OrangeJuice"]}], 
       EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}]}],
     SelectWithContents->True], ",", 
    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
     RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
      RowBox[{"1", ",", "\<\"Servings\"\>"}], "]"}], "]"}]}], "]"}], "+", 
  RowBox[{"EntityInstance", "[", 
   RowBox[{
    InterpretationBox[
     DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
      TemplateBox[{TemplateBox[{"\"foods\""}, "ImplicitEntityBase"],TagBox[
         GridBox[{{
            TemplateBox[{
              TemplateBox[{"\"food type\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Food\"", ",", "\"FoodType\""}], "]"}], 
                "\"EntityProperty[\\\"Food\\\", \\\"FoodType\\\"]\""}, 
               "GrayEntityFrame"], "\":\"", 
              RowBox[{
                StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                TemplateBox[{
                  TemplateBox[{"\"toast\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"FoodType\"", ",", "\"Toast\""}], "]"}], 
                    "\"Entity[\\\"FoodType\\\", \\\"Toast\\\"]\"", 
                    "\"food type\""}, "Entity"]}, 
                 "EntityContainsSequence"]}]}, "ImplicitEntityInfoRow"]}, {
            TemplateBox[{
              TemplateBox[{"\"added food types\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Food\"", ",", "\"AddedFoodTypes\""}], "]"}], 
                "\"EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"]\""}, 
               "GrayEntityFrame"], "\":\"", 
              RowBox[{
                StyleBox["\"exactly\"", "ImplicitEntityContains"], 
                TemplateBox[{}, "EntityContainsSequence"]}]}, 
             "ImplicitEntityInfoRow"]}, {
            TemplateBox[{
              TemplateBox[{"\"complete item\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Food\"", ",", "\"CompleteItem\""}], "]"}], 
                "\"EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"]\""}, 
               "GrayEntityFrame"], "\":\"", "True"}, 
             "ImplicitEntityInfoRow"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "GeneralizedEntityInfoGrid", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
        Dynamic[EntityFramework`Formatting`Private`open],
        "\"Entity[\\\"Food\\\", {EntityProperty[\\\"Food\\\", \
\\\"FoodType\\\"] -> ContainsExactly[{Entity[\\\"FoodType\\\", \
\\\"Toast\\\"]}], EntityProperty[\\\"Food\\\", \\\"AddedFoodTypes\\\"] -> \
ContainsExactly[{}], EntityProperty[\\\"Food\\\", \\\"CompleteItem\\\"] -> \
True}]\""},
       "ImplicitEntityToggle"]],
     Entity["Food", {EntityProperty["Food", "FoodType"] -> ContainsExactly[{
          Entity["FoodType", "Toast"]}], 
       EntityProperty["Food", "AddedFoodTypes"] -> ContainsExactly[{}], 
       EntityProperty["Food", "CompleteItem"] -> True}],
     SelectWithContents->True], ",", 
    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
     RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
      RowBox[{"1", ",", "\<\"Items\"\>"}], "]"}], "]"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.757110228943694*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"c058e1e9-5aa4-4697-95f8-fe1247e51811"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(GDP of turkey)/(number of turkeys in turkey)", Typeset`newq$$ = 
   "(GDP of turkey)/(number of turkeys in turkey)", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Turkey\"][EntityProperty[\"Country\", \"GDP\", \
{\"CurrencyUnit\" -> \"CurrentUSDollar\"}]]/Entity[\"Country\", \
\"Turkey\"][EntityProperty[\"Country\", \"LivestockPopulation\", \
{\"FAOLivestockType\" -> \"Turkeys\"}]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {3., 11.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "(GDP of turkey)/(number of turkeys in turkey)", 
                  Defer[Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}]]/
                   Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  RowBox[{
                   TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                   InterpretationBox[
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"],
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"",
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}], "/", 
                  RowBox[{
                   TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                   InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  RowBox[{
                   TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                   InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"],
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"",
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}], "/", 
                  RowBox[{
                   TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                   InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}], 
                    SelectWithContents -> True], "]"}], "/", 
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "(GDP of turkey)/(number of turkeys in turkey)", 
                    Defer[Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}]]/
                    Entity["Country", "Turkey"][
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"],
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"",
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}], "/", 
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"],
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"",
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}],
                    SelectWithContents->True], "]"}], "/", 
                    RowBox[{
                    TemplateBox[{"\"Turkey\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}],
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"",
                    "\"country\""},
                    "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    
                    TemplateBox[{
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"],TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"],Dynamic[
                    EntityFramework`Formatting`Private`open],
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"",TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]},
                    "ImplicitEntityPropertyToggle"]],
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}],
                    SelectWithContents->True], "]"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\"}]\"", 
                    
                    TemplateBox[{"\"nominal\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "GDP", {"CurrencyUnit" -> "CurrentUSDollar"}], 
                    SelectWithContents -> True], "]"}], "/", 
                    RowBox[{
                    TemplateBox[{"\"Turkey\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Turkey\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Turkey\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    InterpretationBox[
                    
                    DynamicModuleBox[{
                    EntityFramework`Formatting`Private`open = False}, 
                    TemplateBox[{
                    
                    TemplateBox[{"\"livestock population\""}, 
                    "ImplicitEntityPropertyBase"], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"FAOLivestockType\""}], "\":\"", 
                    "\"turkeys\""}, "ImplicitEntityInfoRow"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    Dynamic[EntityFramework`Formatting`Private`open], 
                    "\"EntityProperty[\\\"Country\\\", \
\\\"LivestockPopulation\\\", {\\\"FAOLivestockType\\\" -> \
\\\"Turkeys\\\"}]\"", 
                    
                    TemplateBox[{"\"turkeys\""}, 
                    "ImplicitEntityPropertySequence"]}, 
                    "ImplicitEntityPropertyToggle"]], 
                    EntityProperty[
                    "Country", "LivestockPopulation", {
                    "FAOLivestockType" -> "Turkeys"}], SelectWithContents -> 
                    True], "]"}]}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[25]:=",ExpressionUUID->"63eef8ef-b90a-43e1-9b6e-529ce864b777"],

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
   RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
    RowBox[{"8.51102411118116`*^11", ",", 
     FractionBox["\<\"USDollars\"\>", "\<\"Years\"\>"]}], "]"}], "]"}], "/", 
  RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
   RowBox[{"QuantityUnits`Private`UnknownQuantity", "[", 
    RowBox[{"3.183`3.*^6", ",", "\<\"PureUnities\"\>"}], "]"}], 
   "]"}]}]], "Output",
 CellChangeTimes->{3.757110284752948*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"5787d0f2-abfb-4603-8433-f284bfb7833d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "30-year mortgage of $250,000 at 5%", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "MonthlyPayments", "Monthly payments", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Formula", "title" -> 
     "Input information"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox["\"fixed rate mortgage\"", 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"loan period\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["30", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"loan amount\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["250\[ThinSpace]000", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "250000"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"US dollars\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"annual percentage rate\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "5"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MonthlyPayments", "numsubpods" -> "1",
      "position" -> "200", "primary" -> "true", "scanner" -> "Formula", 
     "title" -> "Monthly payments"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"monthly payment\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"effective interest rate\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    TagBox[
                    InterpretationBox[
                    "\"5.116\"", 5.116189788173364, AutoDelete -> True], 
                    NumberForm[#, {10, 3}]& ], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MortgageTotals", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "Formula", "title" -> 
     "Mortgage totals"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"principal paid\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["250000", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"total interest paid\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["233139", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"total payments\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["483139", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False], 
                GraphicsBox[{
                  EdgeForm[
                   RGBColor[0.59, 0.615, 0.71]], 
                  RGBColor[
                   NCache[{
                    Rational[254, 255], 
                    Rational[248, 255], 
                    Rational[236, 255]}, {0.996078431372549, 
                    0.9725490196078431, 0.9254901960784314}]], 
                  DiskBox[{0, 0}, 1, {0, 3.2512275533932087`}], 
                  Hue[0.67, 0.6, 0.6, 0.15], 
                  
                  DiskBox[{0, 0}, 1, {3.2512275533932087`, 
                   6.283185307179586}], 
                  RGBColor[0.59, 0.615, 0.71], 
                  PointBox[{-0.05479000005125369, 0.9984978997946784}], 
                  PointBox[{0.05479000005125356, -0.9984978997946784}], 
                  LineBox[
                   NCache[{{-0.05479000005125369, 0.9984978997946784}, {
                    Rational[-21, 20], 0.9984978997946784}, {-1.15, 
                    0.9984978997946784}}, {{-0.05479000005125369, 
                    0.9984978997946784}, {-1.05, 0.9984978997946784}, {-1.15, 
                    0.9984978997946784}}]], 
                  LineBox[
                   NCache[{{0.05479000005125356, -0.9984978997946784}, {
                    Rational[21, 20], -0.9984978997946784}, {
                    1.15, -0.9984978997946784}}, {{
                    0.05479000005125356, -0.9984978997946784}, {
                    1.05, -0.9984978997946784}, {
                    1.15, -0.9984978997946784}}]], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    StyleBox["\"principal\"", 
                    Opacity[1], FontFamily -> "Helvetica", LineBreakWithin -> 
                    False, StripOnInput -> False], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[-6, 5], 0.9984978997946784}, {-1.2, 
                    0.9984978997946784}], {1, 0}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    StyleBox["\"interest\"", 
                    Opacity[1], FontFamily -> "Helvetica", LineBreakWithin -> 
                    False, StripOnInput -> False], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[6, 5], -0.9984978997946784}, {
                    1.2, -0.9984978997946784}], {-1, 0}]}, 
                 ImageSize -> {250, 100}, {
                 Background -> None, ImageSize -> {Automatic, 120}, 
                  LabelStyle -> Automatic, RotateLabel -> False, 
                  AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> 
                  False, AxesLabel -> None, AxesOrigin -> Automatic, 
                  AxesStyle -> {}, Background -> None, BaselinePosition -> 
                  Automatic, BaseStyle -> {}, ColorOutput -> Automatic, 
                  ContentSelectable -> Automatic, CoordinatesToolOptions -> 
                  Automatic, DisplayFunction :> $DisplayFunction, 
                  Epilog -> {}, FormatType :> TraditionalForm, Frame -> False,
                   FrameLabel -> None, FrameStyle -> {}, FrameTicks -> 
                  Automatic, FrameTicksStyle -> {}, GridLines -> None, 
                  GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                  All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, 
                  LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
                  PlotRange -> Automatic, PlotRangeClipping -> False, 
                  PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
                  PreserveImageOptions -> Automatic, Prolog -> {}, 
                  RotateLabel -> True, Ticks -> Automatic, 
                  TicksStyle -> {}}]}}, AutoDelete -> False, 
              GridBoxItemSize -> {"Columns" -> {{Automatic}}}, RowsEqual -> 
              True], "Grid"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Payments and balances", "scanner" -> "Formula", "id" -> 
     "PaymentsAndBalances", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{{1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, 1342.05, \
1342.05, 1342.05}, {1041.67, 1040.42, 1039.16, 1037.9, 1036.63, 1035.36, \
1034.08, 1032.8, 1031.51, 1030.21, 1028.91, 1027.61, 1026.3, 1024.98, \
1023.66, 1022.33, 1021., 1019.66, 1018.32, 1016.97, 1015.62, 1014.26, \
1012.89, 1011.52, 1010.14, 1008.76, 1007.37, 1005.98, 1004.58, 1003.17, \
1001.76, 1000.34, 998.917, 997.487, 996.052, 994.61, 993.162, 991.709, \
990.249, 988.783, 987.311, 985.833, 984.349, 982.858, 981.362, 979.859, \
978.35, 976.834, 975.312, 973.784, 972.25, 970.709, 969.162, 967.608, \
966.048, 964.481, 962.908, 961.328, 959.742, 958.149, 956.549, 954.943, \
953.33, 951.71, 950.084, 948.451, 946.811, 945.164, 943.51, 941.85, 940.182, \
938.508, 936.826, 935.138, 933.442, 931.74, 930.03, 928.313, 926.589, \
924.858, 923.12, 921.374, 919.622, 917.861, 916.094, 914.319, 912.537, \
910.747, 908.95, 907.145, 905.333, 903.514, 901.686, 899.852, 898.009, \
896.159, 894.301, 892.435, 890.562, 888.681, 886.792, 884.895, 882.99, \
881.077, 879.156, 877.228, 875.291, 873.346, 871.393, 869.432, 867.463, \
865.485, 863.5, 861.506, 859.503, 857.493, 855.474, 853.446, 851.41, 849.366, \
847.313, 845.252, 843.182, 841.103, 839.016, 836.92, 834.815, 832.702, \
830.579, 828.448, 826.308, 824.159, 822.001, 819.834, 817.658, 815.474, \
813.279, 811.076, 808.864, 806.642, 804.411, 802.171, 799.922, 797.663, \
795.394, 793.117, 790.829, 788.533, 786.226, 783.91, 781.585, 779.249, \
776.904, 774.55, 772.185, 769.811, 767.426, 765.032, 762.628, 760.213, \
757.789, 755.355, 752.91, 750.455, 747.99, 745.515, 743.029, 740.534, \
738.027, 735.51, 732.983, 730.445, 727.897, 725.338, 722.768, 720.188, \
717.597, 714.995, 712.382, 709.759, 707.124, 704.479, 701.822, 699.154, \
696.476, 693.786, 691.085, 688.372, 685.648, 682.913, 680.167, 677.409, \
674.64, 671.859, 669.066, 666.262, 663.447, 660.619, 657.78, 654.929, \
652.066, 649.191, 646.304, 643.405, 640.494, 637.57, 634.635, 631.688, \
628.728, 625.755, 622.771, 619.774, 616.764, 613.742, 610.708, 607.66, 604.6, \
601.528, 598.442, 595.344, 592.233, 589.108, 585.971, 582.821, 579.657, \
576.481, 573.291, 570.087, 566.871, 563.641, 560.398, 557.141, 553.87, \
550.586, 547.288, 543.977, 540.652, 537.312, 533.959, 530.592, 527.211, \
523.816, 520.407, 516.983, 513.545, 510.093, 506.627, 503.146, 499.65, \
496.14, 492.616, 489.076, 485.522, 481.953, 478.37, 474.771, 471.157, \
467.528, 463.885, 460.226, 456.551, 452.862, 449.157, 445.436, 441.7, \
437.949, 434.182, 430.399, 426.6, 422.786, 418.956, 415.11, 411.247, 407.369, \
403.474, 399.564, 395.637, 391.693, 387.733, 383.757, 379.764, 375.755, \
371.728, 367.685, 363.625, 359.549, 355.455, 351.344, 347.216, 343.071, \
338.909, 334.729, 330.532, 326.317, 322.085, 317.835, 313.567, 309.282, \
304.979, 300.657, 296.318, 291.961, 287.586, 283.192, 278.78, 274.35, \
269.901, 265.434, 260.948, 256.443, 251.92, 247.378, 242.816, 238.236, \
233.637, 229.019, 224.381, 219.724, 215.048, 210.352, 205.636, 200.901, \
196.147, 191.372, 186.577, 181.763, 176.928, 172.074, 167.199, 162.304, \
157.388, 152.452, 147.495, 142.518, 137.52, 132.501, 127.461, 122.4, 117.318, \
112.215, 107.091, 101.945, 96.7781, 91.5895, 86.3792, 81.1472, 75.8935, \
70.6178, 65.3201, 60.0004, 54.6585, 49.2944, 43.9079, 38.4989, 33.0674, \
27.6133, 22.1365, 16.6368, 11.1143, 5.56869}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{}, 
                GraphicsComplexBox[CompressedData["
1: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
SePKZpvIkgaBLVteDdGTVRrMHL54etoIMjRwcUTeKBuyWoPP7+XOvXxsBuVr
ELJ8uNF1IdmigWag+d+oCLKiQezQXZX4H9mqwbJZXr/fuTWd8rUY+pfjgtAt
ZDst/CoH35ulJ6u0eOF+otToSnbSwq2fS0Kfd9Po+rQIN8c+XXWIHKBFizkP
21UWk9VahEmT5GMTyVot2k5e/iS/DVnWwmHQmv6vL079zyVaYO/zm86ryBYt
Dh++Vu0YTy7TYveOsBO3u5MVLazpbfWJtVP+8xktAmrl4lUbyVYtDrQ6WLE4
m1ynhcmz7InvILKkg41L9X7l0WTqr8NMc/GNp+VklQ7LRpY7/G0iO+kwyO7D
T5cNI0OH3cYXe5u8/Jz66+CydlHJoF/Iah1uDNoYbz+VrNVhweED1/e6kWUd
Fv/e4nSXN3nUX4fipsY/h+8jW3T4Sr+yos00cpkO/odPeG9wIyv11/fpR7b/
vjJTfx3Kn318vtEvZKsOwRPdAv74nFxXf/3nvnf1HkaW9Bgb0tkz/5mJ+uvx
m6FNL1M5WaXHorBdi7vryE56rPS/7jnXkQw95hR2vfvDP0bqr0f0hu9G5P9A
VutROC/+TusUslaPnTdubYzqRpb18KiePii6xkD99RhV0Xlg2xVkix59LieE
FoSQy/Tw3PRt1A8fkxU9FjeqfDC7Qk/99TBmrz1kX0i26lF1O/UL9WhynR69
53V7GvdSR/0N2P+p/FObcrKdAR+9rNZPzSarDIhxG357eS+ykwG9rnv9lnlN
S/0N6DAobmvdUnKAAT8mFkT3m0RWGyCHqafYf0DWGvDeb7VWM11D/Q2wXbuk
qP29XOpvwKn9rxeqosgWA5xtcu9/9UcO9a/Pz6p+nOhMVgwIPpv/enn9c/e/
/gaMHXg/fvCHZKsByy4/z+ufl0X966/n/OGVRdczqb8RRumYg4cf2c6Ij5OV
yNgdGdTfiF4Z2y1VXchORth2rvMum51O/Y3onNx2Xe0/adTfCA/fd02mBJHV
Rrzod+XXjN2p1N8I1+cdeu3sSpaN+Dk9szC6IIX6G+E37rRTTG0y9TfCMH+2
eZcPucyIrns+XJ+xJYn6GzHj/oCWJlvyGSP6DLn3uEqTSP2NGLV50eaFZxKo
vxHnD/0wc40TWTLBmPV8T7MSNfU3Yd6cJj75NfHU34Rj33drXboijvqbUJrj
HRsfEkv96/8drHm078hHMdTfhNC6NgfO/h5F/U3oHtT2/oxpkdTfBJv4U+dP
DI6g/iZYNy18t+dWGPU3IblL58djl4dSfxPWeyxzyfYJof4mtN747UTHl0HU
34RZnw7fP3dDIPU3YY17ZdPpIQHU34RdJQX+H0n+1N+ECZcLR/uG+FF/M6pX
11VtXT+e+psx8reKj1yejqP+ZlSFXTt3dbQn9TdjWo8dndYWg/qb0SRYtaxx
qRv1N2N22NXvHnUfSv3NqAh906f5Oifqb0a7FbMq8kf0pv5mzJvcPSvMqwNd
T91oqeGPzJ5TkvR/BEBKhQ==
                 "], {{{}, {}, {}, {
                    EdgeForm[], 
                    Hue[0.67, 0.6, 0.6, 0.15], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1FV4EAQUBeCNUpAUJCUGCArSCCidUgKCCgYdwgaM3NiIURsw2OiO0TW6
Nrq7RtugKCEoiglK/Hw8/OfhvN7vnqBOoS17pwoICAgkWPTgnOI8KZzlDKc5
xUlOcJxjHOUIhznEQQ6wn33sZQ+72cVOdrCdZJLYxla2sJlNbGQD61nHWtaQ
yGpWsZIVLGcZS1nCYhaxkAQWMJ95zGUOs5nFTGYwnWlMZQqTmcRE4oljAuOJ
ZRxjGUMM0YxmFCMZwXCiGMZQhjCYSCIYRDhhDGQA/elHX/oQyrMD9aInIQTT
g+58Tje60oXOdKIjHWhPO9ryGZ/yCR/ThtZ8xId8QCta8j4taE4z3qMpTWhM
IxryLg2oTz3qUofa1KImNahONaryDm9ThcpU4i0qUoHylKMsZShNKd6kJCV4
g9cpTjFeoyhFKEwQhShIAfLzKvnISx5yk4ucvEIOsvMy2chKFjKTiYy8RAbS
8yIvkI60pCE1qQgkgCf+6TGP+J//eMgD/uUf/uYv/uQP7vM7v3GPX/mFu9zh
Z25zi5vc4Cd+5Do/8D3XuMp3fMs3fM1XfMkXXOEyl7jIBc4/2wBSOMsZTnOK
k5zgOMc4yhEOc4iDHGA/+9jLHnazi53sYDvJJLGNrWxhM5vYyAbWs461rCGR
1axiJStYzjKWsoTFLGIhCSxgPvOYyxxmM4uZzGA605jKFCYziYnEE8cExhPL
OMYyhhiiGc0oRjKC4UQxjKEMYTCRRDCIcMIYyAD604++9CGU3vSiJyGBz3f6
KcYWxRU=
                    "]]}]}, {}, {}, {}, {
                    EdgeForm[], 
                    RGBColor[
                    NCache[{
                    Rational[254, 255], 
                    Rational[248, 255], 
                    Rational[236, 255]}, {0.996078431372549, 
                    0.9725490196078431, 0.9254901960784314}]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1mPbEAYUBuA327Zt27Ztt2zbtm3btq1t2djClt3aXX24r3N+wMGTqHH7
yu0CBwQEBOKC5jdNK1rThra0oz0d6EgnOtOFrnSjOz3oSS9604e+9KM/AxjI
IAYzhKEMYzgjGMkoRjOGsYxjPBOYyCQmM4WpTGM6M5jJLGYzh7nMYz4LWMgi
FrOEpSxjOStYySpWs4a1rGM9G9jIJjazha1sYzs72MkudrOHvexjPwc4yCEO
c4SjHOM4JzjJKU5zhrOc4zwXuMglLnOF3/mDP7nKNa5zg5vc4jZ3uMs97vOA
hzziMU/4i795yjOe84J/+JeXvOI1b3jLO97zgY984jNf+Mo3/uM7AeYrEIEJ
QlCCEZwQhCQUoQlDWMIRnghEJBKRiUJUohGdGMQkFrGJQ1ziEZ8EJCQRiUlC
UpKRnBSkJBWpSUNa0pGeDGQkE5nJQlaykZ0c5CQXuclDXvKRnwIUpBCFKUJR
ilGcEpSkFKUpQ1nKUZ4KVKQSlalCVapRnRrUpBa1qUNd6lGfBjSkEY1pQlOa
0ZwWtPyx/7SiNW1oy48D0Z4OdKQTnelCV7rRnR70pBe96UNf+tGfAQxkEIMZ
wlCGMZwRjGQUoxnDWMYxnglMZBKTmcJUpjGdGcxkFrOZw1zmMZ8FLGQRi1nC
UpaxnBWsZBWrWcNa1rGeDWxkE5vZwla2sZ0d7GQXu9nDXvaxnwMc5BCHOcJR
jnGcE5zkFKc5w1nOcT7wr/vc0h61oDnNaEoTGtOIhjSgPvWoSx1qU4ua1KA6
1ahKFSpTiYpUoDzlKEsZSlOKkpSgOMUoShEKU4iCFCA/+chLHnKTi5zkIDvZ
yEoWMpOJjGQgPelISxpSk4qUpCA5yUhKEhKTiIQkID7xiEscYhOLmMQgOtGI
ShQiE4mIRCA84QhLGEITipCEIDjBCEoQAhMo0K9H+l35j2985Quf+cRHPvCe
d7zlDa95xUv+5R9e8JxnPOVv/uIJj3nEQx5wn3vc5Q63ucVNbnCda1zlT/7g
d65wmUtc/JEBOM85znKG05ziJCc4zjGOcoTDHOIgB9jPPvayh93sYic72M42
trKFzWxiIxtYzzrWsobVrGIlK1jOMpayhMUsYiELmM885jKH2cxiJjOYzjSm
MoXJTGIiExjPOMYyhtGMYiQjGM4whjKEwQxiIAPoTz/60ofe9KInPehON7rS
hc50oiMdaE872tKG1rTiN1rSguY0oylNaEwjGtKA+tSjLnWoTS1qUoPqVKMq
VahMJSpSgfKUoyxlKE0pSlKC4hSjKEUoTCEKUoD85CMvechNLnKSg+xkIytZ
yEwmMpKB9KQjLWlITSpSkoLkJCMpSUhMIhKSgPjEIy5xiE0sYhKD6EQjKlGI
TCQiEoHwhCMsYQhNKEISguAEIyhBAn5Gm58Z+n+s1lkh
                    "]]}]}, {}, {}}, {{}, {}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[
                    NCache[
                    Rational[217, 255], 0.8509803921568627], 
                    NCache[
                    Rational[176, 255], 0.6901960784313725], 
                    NCache[
                    Rational[7, 15], 0.4666666666666667]]], 
                    LineBox[CompressedData["
1:eJwl1PefCAQYBvC7M8/enLOOc8Y5jjOOs7fD4azjrDvjojIbQsgoo4yytwYN
iqIoe5RZZBaVPaKFjEi+9+mH7/P+Ac/necNShyQODgwICHhKpN8gMpCRTGQm
C1kJJhvZyUFOcpGbPOQlH/kpQEEKUZgihFCUUIpRnBKUpBRhlKYM4ZQlgnKU
pwIViaQSUVSmCtFUpRoxVKcGNalFLLWpQxx1qUd9GtCQRjSmCU1pRnNa0JJW
xNOaNrQlgXa0pwOJdKQTnelCV5LoRneS6UFPetGbPqSQSl/60Z8BpKX3w0AG
8TTP8CyDGcJQhjGcETzH87zAi4zkJUYxmjG8zFjGMZ5XmMBEJjGZV3mNKUxl
GtN5nTeYwUxmMZs3eYs5zGUe81nAQhaxmCUsZRnLWcFK3uYd3uU9VrGa9/mA
D/mINazlYz5hHev5lM/YwEY+5ws2sZkv+YotbGUb29nBTnaxmz3s5Wu+YR/7
OcBBDnGYb/mOIxzle45xnBOc5BSn+YEfOcNZfuJnfuEc57nARS5xmStc5RrX
+ZUb3OQ3fucP/uQvbnGbO/zNXe5xnwf8w0Me8S+P+Y/08QcSRAYykonMZCEr
wWQjOznISS5yk4e85CM/BShIIQpThBCKEkoxilOCkpQijNKUIZyyRFCO8lSg
IpFUIorKVCGaqlQjhurUoCa1iKU2dYijLvWoTwMa0ojGNKEpzWhOC1rSinha
04a2JNCO9nQgkY50ojNd6EoS3ehOMj3oSS9604cUUulLP/ozgLTA///zEwOL
l1o=
                    "]]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1:eJwVyWlgDgQAgOFvQ0oUJSpXrkilpMMVOt05inJEudrGNvc2zH2zue/72Jyb
zdwb5r5ZoYiiy32Uu1I8fjzvn7d428gmEUGBQCBEQgmjE50J5+GMpAtd6UZ3
etCTXkQRTQy96UNfYulHfwYwkEEMZghDGcZwRjCSUYxmDHHEM5ZxjGcCE5nE
ZKYwlWlMZwYzmcVs5jCXecxnAQtZRAKJLGYJS1nGclaQRDIrSSGVVaSxmjWs
ZR3r2cBG0slgE5vZQiZb2cZ2drCTXexmD3vZx34OcJBDHCaLb/mOIxzlGN/z
A8c5wY+c5BQ/8TOnOcMv/Mpv/M4fnOUc57nARS5xmStc5Rp/8hfXucFNbnGb
O9zlb/7hX+7xH/9zn0BwIBBEMNnITg4eISeP8hi5eJzc5OEJniQv+XiKp8nP
MxSgIM/yHM9TiMIUoSjFeIHilKAkpSjNi5ShLC9Rjpd5hVcpz2u8TgXeoCJv
8hZv8w6VqEwVqlKNd6lODWryHu/zAR/yER9Ti9rUoS71qE8DPqEhjWhMEz7l
M5rSjM/5gua0oCWt+JLWtOErvqYt7WhPBzryDSGEEkYnOhNOBJF0oSvd6E4P
etKLKKKJoTd96Ess/ejPAAYyiMEMYSjDGM4IRjKK0YwhjnjGMo7xTGAik5jM
FKYyjenMYCazmM0c5jKP+SxgIYtIIJHFLGEpy1jOCpJIZiUppLKKNFazhrWs
Yz0b2Eg6GWxiM1vIZCvb2M4OdrKL3exhL/vYzwEOcojDZPEAiurDag==
                    "]]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, AxesOrigin -> {0., 0}, 
                PlotRange -> {{0, 360.}, {0, 1342.0540575303899`}}, 
                PlotRangeClipping -> True, ImagePadding -> All, 
                DisplayFunction -> Identity, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0., 0}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, Epilog -> {
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"principal\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], {251.99999999999997`, 
                   1006.540543147782}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"interest\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], {90., 201.30810862955224`}]}, 
                Frame -> {{True, False}, {True, False}}, 
                FrameLabel -> {{None, None}, {
                   FormBox[
                    StyleBox[
                    "\"years\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], None}}, FrameStyle -> Directive[
                  AbsoluteThickness[0.2]], FrameTicks -> {{{{0., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["200", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {400., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["400", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {600., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["600", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {800., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["800", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1200., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["1.2", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "1.2"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {100., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {150., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {250., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {300., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {350., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {450., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {550., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {650., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {700., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {750., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {850., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {900., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {950., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1050., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1100., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1150., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1250., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1300., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, None}, {{{60, 
                    FormBox["5", TraditionalForm]}, {120, 
                    FormBox["10", TraditionalForm]}, {180, 
                    FormBox["15", TraditionalForm]}, {240, 
                    FormBox["20", TraditionalForm]}, {300, 
                    FormBox["25", TraditionalForm]}, {360, 
                    FormBox["30", TraditionalForm]}}, None}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], 
                GridLines -> {None, None}, GridLinesStyle -> Automatic, 
                ImageSize -> 200, 
                LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                PlotRange -> {{0, 360.}, {0, 1342.0540575303899`}}, 
                PlotRangeClipping -> True, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"monthly payment breakdown\"", 
                 "\[NoBreak]", "\")\""}], {
               FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{{0, 250000.}, {1, 249700.}, {2, 249398.}, {3, \
249095.}, {4, 248791.}, {5, 248485.}, {6, 248179.}, {7, 247871.}, {8, \
247562.}, {9, 247251.}, {10, 246939.}, {11, 246626.}, {12, 246312.}, {13, \
245996.}, {14, 245679.}, {15, 245360.}, {16, 245041.}, {17, 244720.}, {18, \
244397.}, {19, 244073.}, {20, 243748.}, {21, 243422.}, {22, 243094.}, {23, \
242765.}, {24, 242434.}, {25, 242103.}, {26, 241769.}, {27, 241435.}, {28, \
241099.}, {29, 240761.}, {30, 240422.}, {31, 240082.}, {32, 239740.}, {33, \
239397.}, {34, 239052.}, {35, 238706.}, {36, 238359.}, {37, 238010.}, {38, \
237660.}, {39, 237308.}, {40, 236955.}, {41, 236600.}, {42, 236244.}, {43, \
235886.}, {44, 235527.}, {45, 235166.}, {46, 234804.}, {47, 234440.}, {48, \
234075.}, {49, 233708.}, {50, 233340.}, {51, 232970.}, {52, 232599.}, {53, \
232226.}, {54, 231851.}, {55, 231475.}, {56, 231098.}, {57, 230719.}, {58, \
230338.}, {59, 229956.}, {60, 229572.}, {61, 229186.}, {62, 228799.}, {63, \
228410.}, {64, 228020.}, {65, 227628.}, {66, 227235.}, {67, 226839.}, {68, \
226442.}, {69, 226044.}, {70, 225644.}, {71, 225242.}, {72, 224838.}, {73, \
224433.}, {74, 224026.}, {75, 223618.}, {76, 223207.}, {77, 222795.}, {78, \
222381.}, {79, 221966.}, {80, 221549.}, {81, 221130.}, {82, 220709.}, {83, \
220287.}, {84, 219863.}, {85, 219437.}, {86, 219009.}, {87, 218579.}, {88, \
218148.}, {89, 217715.}, {90, 217280.}, {91, 216843.}, {92, 216405.}, {93, \
215964.}, {94, 215522.}, {95, 215078.}, {96, 214632.}, {97, 214184.}, {98, \
213735.}, {99, 213283.}, {100, 212830.}, {101, 212375.}, {102, 211918.}, \
{103, 211459.}, {104, 210998.}, {105, 210535.}, {106, 210070.}, {107, \
209603.}, {108, 209134.}, {109, 208664.}, {110, 208191.}, {111, 207716.}, \
{112, 207240.}, {113, 206761.}, {114, 206281.}, {115, 205798.}, {116, \
205314.}, {117, 204827.}, {118, 204338.}, {119, 203848.}, {120, 203355.}, \
{121, 202860.}, {122, 202364.}, {123, 201865.}, {124, 201364.}, {125, \
200861.}, {126, 200356.}, {127, 199848.}, {128, 199339.}, {129, 198828.}, \
{130, 198314.}, {131, 197798.}, {132, 197280.}, {133, 196760.}, {134, \
196238.}, {135, 195714.}, {136, 195187.}, {137, 194658.}, {138, 194127.}, \
{139, 193594.}, {140, 193059.}, {141, 192521.}, {142, 191981.}, {143, \
191439.}, {144, 190895.}, {145, 190348.}, {146, 189799.}, {147, 189248.}, \
{148, 188694.}, {149, 188138.}, {150, 187580.}, {151, 187020.}, {152, \
186457.}, {153, 185892.}, {154, 185324.}, {155, 184755.}, {156, 184182.}, \
{157, 183608.}, {158, 183031.}, {159, 182451.}, {160, 181869.}, {161, \
181285.}, {162, 180698.}, {163, 180109.}, {164, 179518.}, {165, 178924.}, \
{166, 178327.}, {167, 177728.}, {168, 177127.}, {169, 176523.}, {170, \
175916.}, {171, 175307.}, {172, 174695.}, {173, 174081.}, {174, 173464.}, \
{175, 172845.}, {176, 172223.}, {177, 171599.}, {178, 170972.}, {179, \
170342.}, {180, 169710.}, {181, 169075.}, {182, 168437.}, {183, 167797.}, \
{184, 167154.}, {185, 166509.}, {186, 165860.}, {187, 165209.}, {188, \
164556.}, {189, 163899.}, {190, 163240.}, {191, 162578.}, {192, 161914.}, \
{193, 161246.}, {194, 160576.}, {195, 159903.}, {196, 159227.}, {197, \
158549.}, {198, 157867.}, {199, 157183.}, {200, 156496.}, {201, 155806.}, \
{202, 155113.}, {203, 154417.}, {204, 153718.}, {205, 153017.}, {206, \
152312.}, {207, 151605.}, {208, 150895.}, {209, 150181.}, {210, 149465.}, \
{211, 148746.}, {212, 148023.}, {213, 147298.}, {214, 146570.}, {215, \
145839.}, {216, 145104.}, {217, 144367.}, {218, 143626.}, {219, 142883.}, \
{220, 142136.}, {221, 141386.}, {222, 140633.}, {223, 139877.}, {224, \
139118.}, {225, 138355.}, {226, 137590.}, {227, 136821.}, {228, 136049.}, \
{229, 135274.}, {230, 134495.}, {231, 133714.}, {232, 132929.}, {233, \
132141.}, {234, 131349.}, {235, 130554.}, {236, 129756.}, {237, 128955.}, \
{238, 128150.}, {239, 127342.}, {240, 126531.}, {241, 125716.}, {242, \
124898.}, {243, 124076.}, {244, 123251.}, {245, 122422.}, {246, 121590.}, \
{247, 120755.}, {248, 119916.}, {249, 119074.}, {250, 118228.}, {251, \
117378.}, {252, 116525.}, {253, 115669.}, {254, 114809.}, {255, 113945.}, \
{256, 113078.}, {257, 112207.}, {258, 111332.}, {259, 110454.}, {260, \
109572.}, {261, 108687.}, {262, 107798.}, {263, 106905.}, {264, 106008.}, \
{265, 105108.}, {266, 104204.}, {267, 103296.}, {268, 102384.}, {269, \
101469.}, {270, 100549.}, {271, 99626.3}, {272, 98699.3}, {273, 97768.5}, \
{274, 96833.9}, {275, 95895.3}, {276, 94952.8}, {277, 94006.4}, {278, \
93056.}, {279, 92101.7}, {280, 91143.4}, {281, 90181.1}, {282, 89214.8}, \
{283, 88244.5}, {284, 87270.1}, {285, 86291.7}, {286, 85309.2}, {287, \
84322.6}, {288, 83331.9}, {289, 82337.}, {290, 81338.}, {291, 80334.9}, {292, \
79327.6}, {293, 78316.}, {294, 77300.3}, {295, 76280.3}, {296, 75256.1}, \
{297, 74227.6}, {298, 73194.9}, {299, 72157.8}, {300, 71116.4}, {301, \
70070.7}, {302, 69020.6}, {303, 67966.1}, {304, 66907.2}, {305, 65844.}, \
{306, 64776.3}, {307, 63704.1}, {308, 62627.5}, {309, 61546.4}, {310, \
60460.8}, {311, 59370.6}, {312, 58276.}, {313, 57176.7}, {314, 56072.9}, \
{315, 54964.5}, {316, 53851.4}, {317, 52733.8}, {318, 51611.4}, {319, \
50484.4}, {320, 49352.7}, {321, 48216.3}, {322, 47075.2}, {323, 45929.3}, \
{324, 44778.6}, {325, 43623.1}, {326, 42462.8}, {327, 41297.7}, {328, \
40127.7}, {329, 38952.8}, {330, 37773.1}, {331, 36588.4}, {332, 35398.8}, \
{333, 34204.3}, {334, 33004.7}, {335, 31800.2}, {336, 30590.6}, {337, \
29376.1}, {338, 28156.4}, {339, 26931.7}, {340, 25701.8}, {341, 24466.9}, \
{342, 23226.8}, {343, 21981.5}, {344, 20731.}, {345, 19475.3}, {346, \
18214.4}, {347, 16948.3}, {348, 15676.8}, {349, 14400.1}, {350, 13118.}, \
{351, 11830.6}, {352, 10537.9}, {353, 9239.74}, {354, 7936.19}, {355, \
6627.2}, {356, 5312.76}, {357, 3992.84}, {358, 2667.43}, {359, 1336.49}, \
{360, 0}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{}, 
                GraphicsComplexBox[CompressedData["
1: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
                 "], {{{}, {
                    EdgeForm[], 
                    Hue[0.67, 0.6, 0.6, 0.15], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxF1FV3EAQAhuGN2GAjBozRsdEdIzZgG7XRNWB0jRoNKiEqChh0NwpKhxIm
GKCgoKCkAkoYhEUjICrgs8MFF895f8B3zheZOiJ5eIaAgIBABgc+7iDSGMgA
+tOPvqTSh970oic96E43utKFznQihY50oD3JtKMtbWhNK1rSguY0oylNSCKR
xjSiIQ2oTwLxxFGPutQhlhhqU4ua1CCa6lSjKlWoTCUqUoHylKMsZShNKUpS
gigiKU4xilKEwhSiIAXITz4iyEs4echNLsLISQ6yk41QQshKFoIJIjOZyEiG
9J0CH432UB5wn//4l3+4x9/c5Q63+Ytb3OQG17nGVa5wmT/5g9/5jV+5xEUu
cJ5f+Jmf+JFznOUMp/mB7znFSU7wHd9ynGMc5QiHOcQ3fM1BDvAVX7KffXzB
5+xlD5/xKbvZxSd8zEd8yE528AHv8x7v8g5vs51tbGULb/Emm9nERjawnnWs
ZQ2rWcUbvM5KVvAar7KcZSxlCYtZxEIWMJ95zGUOs5nFTGYwnWlMZQqv8DIv
8SKTmcREXuB5JvAcz/IM43macYxlDKN5iid5glGMZATDGcZQhjCYQaQxkAH0
px99SaUPvelFT3rQnW50pQud6UQKHelAe5JpR1va0JpWtKQFzWlGU5qQRCKN
aURDGlCfBOKJox51qUMsMdSmFjWpQTTVqUZVqlCZSlSkAuUpR1nKUJpSlKQE
UURSnGIUpQiFKURBCpCffESQl3DykJtchJGTHGQnG6GEkJUsBBNEZjKRkfS/
/h93bZgz
                    "]]}]}, {}, {}}, {{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.007333333333333334], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwl1PefCAQYBvA7ztmcfbazzp07Z++z93bucO7OOByyUhQK0aDsPduZZSuK
sreGVdmESGlYlULf+/TD93n/gOfzvGGpw+OGBQYEBAwS6TcDGQkiE8FkJgtZ
yUZ2cpCTXOQmhDzkJR/5KUBBChFKYYpQlGIUpwQlKUUYpSlDWcpRnnAqEEEk
FYkimkrEUJkqVKUa1alBTWpRmzrUpR71iaUBDWlEY5rQlGY0pwUtaUVr2tCW
drSnAx3pRGfi6EI8CXSlG91JpAdJJJNCT3rRmz6k0pd+9CeNAQxM74inGMwQ
hjKM4TzNCJ7hWUYyiud4ntGMYSwv8CLjGM8EXmIik3iZV3iV15jMFF7nDaYy
jenMYCazmM0c5jKP+SxgIYtYzBKWsow3eYu3eYd3eY/3+YDlrGAlq1jNGj7k
I9ayjvVsYCOb2MwWPuYTtrKNT/mM7ezgc75gJ7vYzR72so/9HOAghzjMEY5y
jC/5iq/5huOc4CSnOM23fMf3nOEs5zjPBS5yictc4Qeuco3r/MgNbvITt/iZ
X7jNr/zG7/zBHe5yj/s84E/+4m8e8g//8ojHPCF9/IFkICNBZCKYzGQhK9nI
Tg5ykovchJCHvOQjPwUoSCFCKUwRilKM4pSgJKUIozRlKEs5yhNOBSKIpCJR
RFOJGCpThapUozo1qEktalOHutSjPrE0oCGNaEwTmtKM5rSgJa1oTRva0o72
dKAjnehMHF2IJ4GudKM7ifQgiWRS6EkvetOHVPrSj/6kMYCBgf//6P8AaGCX
xQ==
                    "]]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, AxesOrigin -> {0., 0.}, 
                PlotRange -> {{0, 360.}, {0, 250000.}}, PlotRangeClipping -> 
                True, ImagePadding -> All, DisplayFunction -> Identity, 
                AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0., 0.}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, 
                Frame -> {{True, False}, {True, False}}, 
                FrameLabel -> {{None, None}, {
                   FormBox[
                    StyleBox[
                    "\"years\"", FontFamily -> "Helvetica", StripOnInput -> 
                    False], TraditionalForm], None}}, FrameStyle -> Directive[
                  AbsoluteThickness[0.2]], FrameTicks -> {{{{0., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["50", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "50"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "100"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["150", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "150"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["200", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "200"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {250000., 
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    RowBox[{
                    TagBox["250", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "250"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"k\"", {ShowStringCharacters -> False, FontFamily -> 
                    "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 1000& , AutoDelete -> 
                    True]}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], TraditionalForm], {0.00625, 
                    0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {230000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {240000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, None}, {{{60, 
                    FormBox["5", TraditionalForm]}, {120, 
                    FormBox["10", TraditionalForm]}, {180, 
                    FormBox["15", TraditionalForm]}, {240, 
                    FormBox["20", TraditionalForm]}, {300, 
                    FormBox["25", TraditionalForm]}, {360, 
                    FormBox["30", TraditionalForm]}}, None}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], 
                GridLines -> {None, None}, GridLinesStyle -> Automatic, 
                ImageSize -> 200, 
                LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{0, 360.}, {0, 250000.}},
                 PlotRangeClipping -> True, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"remaining balance\"", "\[NoBreak]", 
                 "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Payments table", "scanner" -> "Formula", "id" -> 
     "PaymentsTable", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"year\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"monthly payment\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"ending balance\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"yearly principal paid\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"yearly interest paid\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                  "1", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["246312", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["3688", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["12416", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "2", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["242434", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["3877", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["12228", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "3", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["238359", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4075", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["12029", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "4", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["234075", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4284", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11821", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "5", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["229572", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4503", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11601", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "6", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["224838", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4734", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11371", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "7", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["219863", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4976", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11129", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "8", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["214632", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["5230", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10874", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "9", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["209134", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["5498", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10607", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "10", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["203355", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["5779", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10325", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "11", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["197280", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["6075", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10030", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "12", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["190895", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["6386", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["9719", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "13", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["184182", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["6712", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["9392", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "14", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["177127", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7056", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["9049", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "15", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["169710", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7417", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["8688", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "16", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["161914", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7796", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["8308", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "17", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["153718", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["8195", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7910", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "18", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["145104", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["8614", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7490", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "19", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["136049", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["9055", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["7050", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "20", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["126531", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["9518", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["6586", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "21", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["116525", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10005", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["6099", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "22", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["106008", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["10517", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["5587", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "23", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["94953", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11055", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["5049", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "24", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["83332", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["11621", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["4484", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "25", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["71116", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["12215", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["3889", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "26", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["58276", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["12840", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["3264", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "27", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["44779", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["13497", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["2607", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "28", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["30591", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["14188", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1917", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "29", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["15677", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["14914", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1191", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "30", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["1342", #& ]}], Identity], #& , SyntaxForm -> Dot],
                    "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["0", #& ]}], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["15677", #& ]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}], 
                    "\[InvisibleSpace]", 
                    TagBox["428", #& ]}], Identity], #& , SyntaxForm -> Dot], 
                   "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Center, {Right}}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}, {1, 5} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "4"}, {
      XMLElement[
      "assumption", {
       "type" -> "SelectFormulaVariable", "count" -> "3", "word" -> 
        "$250,000"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "loan amount", "input" -> 
          "*FSVar.Q.*21.28-.%24250%2C000-_*FixedRateMortgage.MA-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "sale amount", "input" -> 
          "*FSVar.Q.*21.28-.%24250%2C000-_*FixedRateMortgage.SaleAmountHouse-\
"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "down payment", "input" -> 
          "*FSVar.Q.*21.28-.%24250%2C000-_*FixedRateMortgage.DP-"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SelectFormulaVariable", "count" -> "2", "word" -> "5%"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "annual percentage rate", 
          "input" -> 
          "*FSVar.Q.*33.34-.5%25-_*FixedRateMortgage.\
AnnualPercentageRateFixed-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "down payment", "input" -> 
          "*FSVar.Q.*33.34-.5%25-_*FixedRateMortgage.DP-"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming ${desc1}. Use ${desc2} instead", "count" -> "3"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage", "desc" -> "fixed rate mortgage", 
          "input" -> "FSelect_**FixedRateMortgage--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "AdjustableRateMortgage", "desc" -> 
          "adjustable rate mortgage", "input" -> 
          "FSelect_**AdjustableRateMortgage--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RentVsBuy", "desc" -> "rent vs. buy", "input" -> 
          "FSelect_**RentVsBuy--"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include ${desc1}", "count" -> "4"}, {
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.PTS", "desc" -> "points", "input" -> 
          "*FVarOpt-_**FixedRateMortgage.PTS-.*FixedRateMortgage.MA--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.IOP", "desc" -> 
          "interest\[Hyphen]only period", "input" -> 
          "*FVarOpt-_**FixedRateMortgage.IOP-.*FixedRateMortgage.MA--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.MTR", "desc" -> "tax rate", "input" -> 
          "*FVarOpt-_**FixedRateMortgage.MTR-.*FixedRateMortgage.MA--"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FixedRateMortgage.BP", "desc" -> "balloon payment", 
          "input" -> 
          "*FVarOpt-_**FixedRateMortgage.BP-.*FixedRateMortgage.MA--"}, \
{}]}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "Formula", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.423", 
    "parsetiming" -> "2.923", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa273112igf5d03hdf08hf00005189aah6i0if50e4", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "22", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa273212igf5d03hdf08hf000065ei0i98gdd8f14e2121523691492368303", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 45, 52.146056`9.469796314027501}, "Line" -> 26,
     "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "MonthlyPayments", "Monthly payments", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "30-year mortgage of $250,000 at 5%"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{312., {35., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[26]:=",ExpressionUUID->"c4dd65ca-76c6-49b4-b10a-eb49c6e40233"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      StyleBox[GridBox[{
         {
          PaneBox["\<\"monthly payment\"\>",
           
           BaseStyle->{{
             BaselinePosition -> Baseline, FontColor -> GrayLevel[0.3]}, 
             LineSpacing -> {0.9, 0, 1.5}, 
             LinebreakAdjustments -> {1, 10, 10000, 0, 100}, TextAlignment -> 
             Left},
           BaselinePosition->Baseline], 
          StyleBox[
           StyleBox[
            RowBox[{
             FormBox["\<\"$\"\>",
              TraditionalForm], "\[VeryThinSpace]", "\[InvisibleSpace]", 
             "1342"}], "Unit"],
           ZeroWidthTimes->False,
           LineIndent->0,
           LinebreakAdjustments->{1, 100, 1, 0, 100}]},
         {
          PaneBox["\<\"effective interest rate\"\>",
           
           BaseStyle->{{
             BaselinePosition -> Baseline, FontColor -> GrayLevel[0.3]}, 
             LineSpacing -> {0.9, 0, 1.5}, 
             LinebreakAdjustments -> {1, 10, 10000, 0, 100}, TextAlignment -> 
             Left},
           BaselinePosition->Baseline], 
          StyleBox[
           StyleBox[
            RowBox[{
             TagBox[
              InterpretationBox["\<\"5.116\"\>",
               5.116189788173364,
               AutoDelete->True],
              NumberForm[#, {10, 3}]& ], "\[NoBreak]", 
             StyleBox["\<\"%\"\>",
              FontFamily->"Helvetica",
              FontSize->Smaller]}], "Unit"],
           ZeroWidthTimes->False,
           LineIndent->0,
           LinebreakAdjustments->{1, 100, 1, 0, 100}]}
        },
        AllowScriptLevelChange->False,
        AutoDelete->False,
        BaselinePosition->Automatic,
        FrameStyle->GrayLevel[0.84],
        GridBoxAlignment->{
         "Columns" -> {Left, {Right}}, "Rows" -> {{Baseline}}},
        GridBoxBackground->{"Columns" -> {None, None}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}], "Grid"],
      StripOnInput->False,
      LineSpacing->{0.9, 0, 1.5},
      LineIndent->0],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "30-year mortgage of $250,000 at 5%", {{"MonthlyPayments", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.7571103574304385`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"a3c84d87-7e6e-4cf2-8bb7-e29190f9d4c0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   TagBox[
    FrameBox["function"],
    "SelectionPlaceholder"], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      FrameBox["var"],
      "Placeholder"], ",", 
     TagBox[
      FrameBox["min"],
      "Placeholder"], ",", 
     TagBox[
      FrameBox["max"],
      "Placeholder"]}], "}"}]}], "]"}]], "Input",ExpressionUUID->"44e90e84-\
3bed-405c-b94a-0a6830da7b29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.757110414798361*^9, 3.7571104504024787`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"9e4281d9-b149-4ce7-95e8-3b5f09340ca9"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
YuPAzg9yJTQDzbZ0My8/zcZaziVbtPkM5FQ0zejZLTb2vfwgeZ4ME2XYRZpI
vmVjxSQrp/HlTLRPOkQjbT0Hb/FvXD97FRO9OtUwM0Sfg0877BHfoMVEhkuD
a04bcHDpUqM497VMpNeXlCOzj4Ptc9bX9W1mojf12pweZw7OqlBc02zKRBrq
ybdUH3Gw8Z9GQYELE3UtMM0xEOfiyytCL2W7MpFRadTwS2kuzj1vPJHuxkSX
w9W7VszkYtXJUpE4TyZ63174YVSZi7mzUqX8/ZhoMkwnSFuTi6OMvRTNQpmo
YZX0f0ZWXPwrc4529zMmqk2UZ/95zMWKQ99y27OZaM1zw0DXdC7etSFcpzmH
iVIvfM0c/o+L895KbqgpYKKsP9E3Ogu4OOAnd0vuKyZawTCxcXxPPmXly039
aplIkFddKdfLxV5uJ07P4jDR/mR728zFNA404Z7aRDPR1urV0yKW0/jewoun
bAaZ6BRb7PU5TRoXfgs8mTrKRMH9RqcZ62k8vOk/h/WTTNTpPurcbUBjF/Fh
O0t5CoU4mlp32dH48o9Ldj5MCi0em5W/2YHGIQUSdgksChn+PTYz+BSNM0/N
su1WohDFy3k33YXGPR83HvVUpxDH5PDKxz40Ph519VCMNoUYciCpEUFjt7My
h0rWUqj3nqJKTxSN/Q0jDrato9CBiUsaqfdonMR/bLV4E4Ui877JScXTuM36
/YHCbRRaEOK4wTqNxpx1ew+0GFAo0X9fa8tTGo/PbLaYNKTQ5ksfnff+R2PV
8r79hiYUOvct4aB6Do0PLpq579t+Cmm6F6L9JTQ+PRljLjxAoeAQvkFQKY0v
Ns0zn3uQQsskz68pLKNxTJD23pPWFFrxPOjdSAWNGzkWZjwHCjnKhFRIfKSx
WeHDXbM8KbRJdfj2uWZyvWH7KUUvCm2Te7iX30Lj66uX5yv6UEhvtFXd+weN
izOK1RT9KORmmtFh307j+YlfB1gBFFqU4v77WxeN9X7EpbACiV7i9fx53TS2
UnE4zAqmkN22ceVjf4nekUNvqFAKvXxw0+1jL415t+TvMWMoxMIsf8SlMaPy
mwnzPtm/+UHTTprGK8QSRJixxI/aJ2tNBmhs57vSiZFAoScqeybXDdHY58Xw
XEYShTwM3Z3nDdM4mlfSKJ9M2GnpL5ERGn9w3akvn0qhBIeTTZmjNO56xhia
mU4hi7gbhz14NJ7qa0qdmUH0DbXpWD9GY50TJxkzsyg0xzxg6hGf6JO8qnLG
c3J/D+8oEwGNHdtHvGfkUshI6LaKQzjh0PVOuUIKnXrV7KT8j+gTs+u+XDGF
hreOz0wm3NjI3C1XQiGFgruFC8ZpzGU0i8qVUsil0P1YPGFps6TC6WUUWtcV
JC8/QfS8ferM9NcU2tJa8NqLsH6Vpvr0CgqJ6/680EL4oCTvi+xbCqWF/12h
M0nyt+1VkOw7Ck1cL/tzk3DIlRtbZKsoFJGyO5mct3FaqcmwzAcK/Rfif4w5
ReMKAZUuU0OhfXWmC0wI/1jfYi1TR6G9k/F/fQnz3B8xZeoptDHbMSuVMDPn
9DvpBgqddSPTiPBKrtYl6S8UUvpuvL2DsOGKMS3pbxRae243c4Sw3emyLqnv
FAqrzPpNvj/wpZSbD6RaKFR3yimffH/gmA5TM6kfJA+/rwSR7w/8fJ6CuFQb
qc/SAbt+wh+sW4um/SL383+96SvhPw+Snad1kDyUjMwqIizS5KgxrYtC1eyo
0TDCsxW0v0l2k/3xGd/sCeuY84Mleyh0x3xryUrCe0IxSPaR/bdPJnGJHk4f
A0Yk2ESfumVB6YRvSJs9leBSaEls3IXDhBN2KNpIDFCI6dJgL0H4hf8PSmKI
Querfu1PJfpzx518xXkUChX7u6WB+HfooMkywRiFztiLxNsQfpu34htXQKGm
ytLdncT/B05srZYJCok0xKR9FdJY4l3Nj09TJD9rR/duJ+yi8SyoUpSFNGS8
dj8leTL4frbzuSQL+by/imxI/rLXmoWlSrGQxSJL3Wckn7PvaurHybCQXQf3
2gjJ78AOOubWDBaanqbGcib5fpjnustGkXDuq+VTgzSeJm8+tl+JhQ75ct8y
CLs6aT/ZqcJCYz+98meTejLUGJrQUWOhZ5cCo5RI/Q2FuudMX8RCnoW+tgWk
Po/27bcRXcJC77mWmUE9NK7aoTN9bCkLJZTEmFmSeo4fH3HoWEn2C8/FfSf1
b+zkqfxCh4Wyb860uUb6Q16lZWXWehbidN05q9xG47kaum5PNrBQqNfItzTS
T4abxj7e1WMh/aGW4uzm/+nvfeWkAQsV9a56c7yRxjKPDq20NmShno/CzFef
aXxhfGOzuTELXRVNHZSvp/HOPOEafVMWMqlbFx1fQ+MRdd9ulgULzbbhGR+t
pLGtr3WkjCUL5Xs4LPR5Q/LVpIemrIiee9Xs7pbTODF04kHfERbavcdYmPyK
xrvG/XaXH2ehpX++v3MpoPGjpmv5Lu4sFDP7rvaDxzTurlzdHurBQkJUWCT9
iNRDfrtM9kUWmgEGe84lkHkUpm9LX2Khm+yAAo0HNK7ZKZBxvcFCG20a3VVD
acx/6Wp7Pppc31zT8bgnjbdkzAsOv8dCWrWHjxu4k357vy4/5wHxt77l0hxX
Gs/0WCk7FM9CXkGnp+c60niBZk++WyoLXe43LXOzJv0pyVb2QhELKYiLGpsg
GkeFzlwX9YKFWswa7iXo0bjZ95Vt/ksWqm06odi7gcYOh1QLRjALTWVNSziu
TWNvqsnWo4qFAtaoi9MaNH5yw6zAs5mFutm2CnaiNBae1rfz/sdCDbXBEXkv
yHx/uRx5TLDQm5yMa4jM84czlNXPT7GQ81nJzsrnXKyXO9R+WlwBNfp9FSlJ
42K/f2m2B6crIM5lzSqjaC4WD6VsdVUV0LNskwChCxfL5f09OrpJAZX/d2BR
5Rwutpb8qj+op4C218xNtlfi4mdWFWqcLQqoluIX8ZlcbDYe97NrmwKKjVid
P1OKi8N27Dv6ZZcCSkvwUOgY4GCF76XWeYcVUE/VovQlbzhYbSL8yHkfwn9j
VTbYk/NRx+4X93wVUEddnpbDEQ6+8F5GqcxPARUONHy4ZcHBH8KvNcheV0Az
G1n3Cww52HPx+Z1Pbiugn9eL32Uu5+D6PXt1m+IU0DUJc32JQTb2T57J0scK
qKVY8cCFi2zcbXT7g7SEIrK25az9dKYf25vYqS+apoiu7PTRVjrej3+arfPc
Kq2IxgW/Q63IefXLgXYNHzlF9EdLzL3cuB9XHF/r3a9AWAkt2rSoH8dfaV1S
t0gR7R1xsSn/0YctilbcjDRSREn1R8Y2GPbhN4trYO5tRdR0/K2GvXgvdpJO
ldCQmYU8d8juqrXtxkVJC/XfhM9CUq9WOZVqdOK6zXqV+5hKKMCtpPLNvXbM
d3q43y5UCWkVWZS8j/yOq/YmHpgxSxlNtH1/rx5aj+036qWlRSmjh57W6Wpx
5diRUzv6I0YZlUraaapZlmPXR7YG1ANlVNP78YwSoxxfkbn+2zdeGbGmbbYf
v/4axzVXq+5LVUZBF94uVmwqw9+8rcLGi5RRY88sz2j3EryrxM3bvFUZNTgn
zPiVmoPNXSSqAn4qo43fm1rbVXLwwfkxs0rbldGC61/dW0Ke41PBL/IWdymj
4/7U4Wt/svCNwyLcf2xlVOWjOZDpm4HLhHfsUyeVkefT6MWRTx/hyqx5Oa0i
KojndM5U4W4SrrHPmWKIq6DWsPwa9d4E3PrhS9wlKRX02ehB/KhfLObHqjbt
ZaigX9sTS7ZnhOMps2eLAigV5LB412ZGXyieJg4XXiqooDXD9tF3rwRjhTP2
zMUqZP/Xv6cuZlzDqvNGbI+oqqCFVPv8yis+eH7jzawwNRX0ItXDPjLjPF5+
S2micp4K0o07e6U44xjW3vzU5J8G+b32nf/9v1X2f7v62XI=
       "]]},
     Annotation[#, "Charting`Private`Tag$123069#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571104529797997`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"887dadd3-134d-4c4a-bfb2-80c1f701cd81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "+", "b"}], ")"}], "^", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.757110492886275*^9, 3.75711055369553*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"722848de-852c-4f7b-85e0-d0e1bc33972f"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["a", "10"], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["a", "9"], " ", "b"}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["a", "8"], " ", 
   SuperscriptBox["b", "2"]}], "+", 
  RowBox[{"120", " ", 
   SuperscriptBox["a", "7"], " ", 
   SuperscriptBox["b", "3"]}], "+", 
  RowBox[{"210", " ", 
   SuperscriptBox["a", "6"], " ", 
   SuperscriptBox["b", "4"]}], "+", 
  RowBox[{"252", " ", 
   SuperscriptBox["a", "5"], " ", 
   SuperscriptBox["b", "5"]}], "+", 
  RowBox[{"210", " ", 
   SuperscriptBox["a", "4"], " ", 
   SuperscriptBox["b", "6"]}], "+", 
  RowBox[{"120", " ", 
   SuperscriptBox["a", "3"], " ", 
   SuperscriptBox["b", "7"]}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["a", "2"], " ", 
   SuperscriptBox["b", "8"]}], "+", 
  RowBox[{"10", " ", "a", " ", 
   SuperscriptBox["b", "9"]}], "+", 
  SuperscriptBox["b", "10"]}]], "Output",
 CellChangeTimes->{{3.7571105315454397`*^9, 3.757110554400733*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"e3c6c610-44fd-4fe3-943a-4354642dd181"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin(x)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "2", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max12183$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min12182$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3637861$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min12182$\
3637862$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max12183$\
3637863$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max12183$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min12182$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3637861$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min12182$\
3637862$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max12183$\
3637863$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637841[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$]],
                     6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min12182$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max12183$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3637841]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637841[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637841[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3hn8AyQ+\
I43y9gVp0MGYNKAk5XtviZNYuHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d71HRyJI+\
r1eT1015oNgcbKFp4fGjMQsFwWP353mkihFBU+u4LNbxoRE7xEGP0jsfNeNeS/\
kDLQ7v8b3gUUFA02+asqopkRN9yXkGY1U7RlLemx+MmUiAkZ/\
ksfDF8OXr57vOBiMZQxaE8nVsC1knklQJOkh0DVj3jLg39zxQXn8VDAWku8F4RFR9413IiE2MIIDw3\
y8b73cTN3BxDTwGGR84TRZeY7aXqC0pDydkFmOb5xP1k5bYJCpctzcLblZpyAX/g18IEIbk/\
PYpO3ZEugXxiWj76ys/jl3AzzvtoWX4mQ1cZjfG4a8gabHRC3T+aR1nRwjVdfa6OdcXdR82WiQ50+\
Z+n/pkCq9HMbTtmGQ2ZGp8WrtLcM/\
awsvcuz6ubjvGfPZOUrAVcOhEtxHERdsHkUz5YGTaPt0VW4cDuN2xXeITp8KVjiBibPsF9sf2xV4vS\
mEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmoNkoe6go+\
zLHxW3ksuZJkPeD7gmKZFrRX8T6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNW+RHVJx+LAlubUP4l+\
WeBDwlOdNXdsz9Hl3baYTSBOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb8AtuKY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max12185$$ = 0.5,
                  
                 CalculateUtilities`GraphicsUtilities`Private`min12184$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3637946$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min12184$\
3637947$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max12185$\
3637948$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max12185$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min12184$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$3637946$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min12184$\
3637947$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max12185$\
3637948$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637926[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$]],
                     26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min12184$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max12185$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = 
                    Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3637926]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637926[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3637926[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMBEVDfEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCakZznshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9Wc\
GH9+he8TnhScGPhqGGeGgZ7uKZLPWKJrz1ixI/uTKZcJ4ewnPB7uDF+8HO54GIxlTIwBJfSwLWQ+\
U0RD2kOgK9a85UR888cH5fFTwXkM3wsQCeh71jtRhFoYKQjHfIJvvdhM3cbEDBGUKHruNDl5jtpeoI\
1iIpvAPMc3zibraVtgojLtublTcrNJQT786/hAxi4m73FJu7MjMCyMC0bfaVn9c+4GeH7dFl7J4/\
XEYX5vOPJGDDsCvUrnk9Z18oxUXeuiX3B1XvNlq0GePWXq/6UDps1qGM/ahgHzQ1vj9dpbhX/\
eFl7m2PULcd+15rN3lIDrhkMluI+SFnwRRTPlgZdo+3R1bh0e41bFd4zOkApWOJGNs+wX1x/3K/\
B6U4ixdtMtSEfUMyCCHKyLOm53WcbMaEYUSSzw4rp+2WQTWYcScGf72jNBmR1gnpBNyxOa/\
XSp7sQksy9/VNxKLqeaDHnfFwYyUBtFfwProyy5gk5kYCQxXtDUazCHVVJjooJlPyhB4pwIhpDsl/\
24b/7hciWQqj2F6lKexYErzUl4Ev2ywAcgMjNr7tiBoyu4bTGbSB7XqotYmi5Pm+\
0x3W8y3bihOdBDSQgtSfhA7zaFblP4q5vCyh7crQndmtCtCd2a0K0J/++a4CLGf6Xfp1e4xg=="]]}\
; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.961", 
    "parsetiming" -> "0.527", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa3191192b1i8f4f77f42f000067c00627424b79b0", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "21", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa3192192b1i8f4f77f42f0000634gb4ihch50c53i561598085328412281", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 50, 22.8170125`9.110833709477475}, "Line" -> 
    31, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Sin[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "plot sin(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{280., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[31]:=",ExpressionUUID->"70893892-dd89-434d-84d3-f7c920dc0c5f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$127745#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6.6, 6.6}, {-0.9999998464014627, 0.9999985917009981}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.757110601257553*^9, 3.7571106230813217`*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"068cdcc4-190b-468e-9fc5-053972890ee4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7571106410179405`*^9, 3.7571106562408423`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"1e3c7e3c-58fa-47c2-8f97-92a90e74b5b2"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
7tJvh5VNu5Gt9YlvY/IC8DfXtvatBT2IQyRy4M6iAFQI4Dpt918/ojB9BSjc
grDsd/r6Qr9+JFdpv/sNVRAWtcqmd73tR9reWkGVWwVhzBcFzUCiH93q690k
fFEQ5p8YDz3oN4CYn9RtE0sEYTgjJm9v9CBaeSwdqlEnCE/XJUiI5Q8iPgeu
z+XtgpDTTHIo7+8g2iLzl2N0RhCObaz2PS4zhLKLYb2EiBBkLxlOSHw9hMaU
h65bHROC554IyrQ+H0bTGzoC0wyEyH4pjxnIHUZLHPUvpo2EoJWObNynxmG0
/t+3oqCLQrDlA2PtqeAIUnr2RDjNUwhOm543O3xvBFkt7c6aShWCxFVh/dP/
jSKHIZUyrSwhqKTIW3LUbRS5NNFbA/OEoL3dLefZx6PoTsZ6VvFSIcgMe231
qGgUxVh3Gmp1kPmMOyx4K4yhP9WB4wGCwnCKT7nt+N8xFKEde/ScmDD0vhQ/
kzMxhoyyPr3cJCMM6wg5ahUPA9VE9R4pVxaGti8NDWZ3MVC55cEX3MeEId/8
kfhzIQwU0GjK/GMgDF/1mX7ekED6Fx2XwylnhCFd+mGd/2cGKtz6mqFrKQxr
L6ipnu9goNy55YPB3sKwgjl/cHIzE910FIk28xeGYn9CD6/uYyL1DpUx5WBh
mEJNC8k2YKKPxWZR1dHC8GPV2mbqNSZKDv0ywpcjDD39HipnZDCRDUsd6MgX
ho93DLDOFzKR/I3BiA9YGP4n05ww+IuJ4kzFwMkaYZjqL/bk6wgTRSncfPZk
WBjai91NUKYT6GzUo6GL48JQbfyX5tutBKKsSzqwfU4Yrrt/1axMk0CPmb8H
6zgo0M+emTlzikAGlsNaCbwUyMUflMj5H4HWN7KEX6dQyPOiI/qrLYGC8rdp
UegUaOX9lEK9TaAjW3XCehQp8E98t3muP4HYXlsMZKtSYP71Lo3VEAL5BoQ+
PbOfAk3vayp4xZF+fO5Nv8IhChyfqufKTCbQokPBvmldChwlYikPPxLI/dRo
X4QxBdL883WVvhNIo5htn+0FCnTd81p3rIRAkxqST3bZUOD17V1S534QKPPd
jj5OJwpsU+/NsKwjkLOk3t7m6xTokyk5JdxMoK2hlx4ne5LxljiabNsINLLm
0et+hwKdb249dqGLQCmuTzR1giiw4auS5nwfgez6k0M3hFKgbsOL2N3DBNpo
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
e18N/T9ymX8F
       "]]},
     Annotation[#, "Charting`Private`Tag$128090#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999999784391316, 0.9999999998606331}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571106570854473`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"18002cba-7bd3-4912-8105-3ebc989c0a73"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.757110669032277*^9, 3.757110673813593*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"81425f6c-5203-4f26-9db7-2bd49c3f480d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
40T/A4TgK7A=
       "]]},
     Annotation[#, "Charting`Private`Tag$128701#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.7601700305420807`, 1.7601681046181747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571106754953604`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"b0563305-673f-46c9-953b-b38fd997149c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plo", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7571106881831656`*^9, 3.757110695560156*^9}, {
  3.757110726953003*^9, 
  3.757110728261141*^9}},ExpressionUUID->"0dda673c-9570-4efc-9491-\
d30c3e63e70a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "^", "2"}], "-", "10"}]], "Input",
 CellChangeTimes->{{3.757110784116458*^9, 3.757110789724457*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"70d489b2-6536-48b8-952e-ec511d1f812d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "10"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.7571107908731885`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"140f991b-9f66-4ff7-bb5c-945ae5368fd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "10"}], "+", 
     SuperscriptBox["x", "2"]}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[35]:=",ExpressionUUID->"81098c96-7ac8-474b-818e-1d37186ebe0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      SqrtBox["10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     SqrtBox["10"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7571108052990446`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"8d7ed484-0201-43f9-bd79-d05e9739473f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "first 25 prime numbers", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Values", "Values", 1, 1, "Input", "Prime[Range[1, 25]]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"  ", "\"  \"", "\"primes\""}, 
                    "RowWithSeparators"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TemplateBox[{
                    StyleBox["\"between \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{
                    TagBox[
                    TagBox[
                    StyleBox[
                    "Prime", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], HoldForm], HoldForm], "(", 
                    "1", ")"}], 
                    StyleBox["\" and \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{
                    TagBox[
                    TagBox[
                    StyleBox[
                    "Prime", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], HoldForm], HoldForm], "(", 
                    "25", ")"}]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               Global`TagBoxWrapper["Separator" -> " | "]], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Values", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "SetTheory", 
     "title" -> "Values"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Prime[Range[1, 25]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{"2", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "3", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "5", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "7", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "11", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "13", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "17", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "19", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "23", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "29", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "31", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "37", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "41", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "43", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "47", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "53", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "59", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "61", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "67", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "71", 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 "\"\[Ellipsis]\""}], "   ", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{" ", "25", "\" primes\""}, "RowWithSeparator"],
                   "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "Values__More"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "MultiClash", "word" -> "", "template" -> 
        "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "PrimeRange", "word" -> "first 25", "desc" -> 
          " referring to prime numbers", "input" -> 
          "*MC.first+25-_*PrimeRange-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "NumberSetWord", "word" -> "first", "desc" -> 
          " referring to a type of number", "input" -> 
          "*MC.first+25-_*NumberSetWord-"}, {}]}]}]}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.843", 
    "parsetiming" -> "0.613", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa266916f6a590ac62ie970000259dieff8hfe70h2", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "42", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa267016f6a590ac62ie97000068893h0di48738144086047748590067375", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2019, 1, 22, 9, 53, 53.0245017`9.477051440507882}, "Line" -> 
    36, "SessionID" -> 26485531635112089694}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Values", "Values", 1, 1, "Input", "Prime[Range[1, 25]]"}, Typeset`open$$ =
    False, Typeset`newq$$ = "first 25 prime numbers"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{218., {59., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[36]:=",ExpressionUUID->"fd7d5afe-1fbc-4a00-88fd-ce1200cab9da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
   "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
   ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
   "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}]], "Output",
 CellChangeTimes->{3.7571108331158047`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"f0310af5-27e6-4dfd-9167-15be2470a8c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
     "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
     ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
     "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[37]:=",ExpressionUUID->"71449c87-807d-49af-9764-5dfde5540f16"],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7KEMB1SaA40WgdICUFoGTVwNSktAaS00dYZQ
WgFKG0NpJShtDqVVoLQtmrn2UFoDQjc4odrT4ALl60D5rlC+HpTvDuUbQPle
qO5q8IXyjaB8P1R3HgiA8k2g/EAo3xRCOwRB+WZQ+WBUfx0IgfItoOrDoHxL
KD/CAQCjFx/5
    "], {{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21, 22, 23, 24, 25}]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], 
       PointBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
        18, 19, 20, 21, 22, 23, 24, 25}]}, {}, {}}}], {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 25.}, {0, 97.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7571108501469474`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"575f74fb-bcb1-40c6-91b3-5f9987a13112"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
     "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
     ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
     "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[38]:=",ExpressionUUID->"0758d066-8ea3-4827-bb59-e27cef3458d1"],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQEf7KEMB1SaA40WgdICUFoGTVwNSktAaS00dYZQ
WgFKG0NpJShtDqVVoLQtmrn2UFoDQjc4odrT4ALl60D5rlC+HpTvDuUbQPle
qO5q8IXyjaB8P1R3HgiA8k2g/EAo3xRCOwRB+WZQ+WBUfx0IgfItoOrDoHxL
KD8CyofHBwOKPBAAAMjkIaM=
    "], {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[
        PolygonBox[{{1, 26, 27, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 
         14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21, 22, 23, 24, 25}]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], 
       PointBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
        18, 19, 20, 21, 22, 23, 24, 25}]}, {}, {}}}], {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 25.}, {0, 97.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.757110874328105*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"36246816-62bd-4851-98ad-7d2bb29712b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
     "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
     ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
     "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}], ",", 
   RowBox[{"Filling", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[39]:=",ExpressionUUID->"1c19c4ec-68b3-42b4-b47b-54beb1302310"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, 
     {RGBColor[0.34398, 0.49112, 0.89936], Opacity[0.3], EdgeForm[None], 
      GraphicsGroupBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQEf7KEMBzQ+FFg6YOU7REDFLaD8MCjfHEIfCIHy
zaD8YCjfFKo+CMo3gcoHQvnGUH4AlG8EoRv8oHxDKN8XyjeA8r2gfD0o3x3K
14HyXaF8LSjfBcrXgPKdoHw1KG0PpVWgtC2UVoLSUH8yKKC6m0EG1Z0MEqj2
Moig2SOApo8DTR0DXBwA6s4how==
        "]]]}, {}, {}}, {{}, {}, 
     {RGBColor[0.34398, 0.49112, 0.89936], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[3], 
      CapForm["Butt"], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7KEMB1SaA40WgdICUFoGTVwNSktAaS00dYZQ
WgFKG0NpJShtDqVVoLQtmrn2UFoDQjc4odrT4ALl60D5rlC+HpTvDuUbQPle
qO5q8IXyjaB8P1R3HgiA8k2g/EAo3xRCOwRB+WZQ+WBUfx0IgfItoOrDoHxL
KD/CAQCjFx/5
       "]]}}, {
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], CapForm["Butt"], 
      GeometricTransformationBox[InsetBox[
        GraphicsBox[
         {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
          AbsoluteThickness[3], CapForm["Butt"], 
          {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
          {AbsoluteThickness[1.5], Dashing[{}], 
           CircleBox[{0, 0}, 
            Offset[{3., 3.}, {0., 0.}]]}}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGCQBGJGIGZigIEP9lCGAyrNgUaLQGkBKC2DJq4GpSWgtBaa
OkMorQCljaG0EpQ2h9IqUNoWzVx7KK0BoRucUO1pcIHydaB8VyhfD8p3h/IN
oHwvVHc1+EL5RlC+H6o7DwRA+SZQfiCUbwqhHYKgfDOofDCqvw6EQPkWUPVh
UL4llB/hAACtYx/7
       "]]}, {}}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{True, False}, {True, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->{{
     StrokeForm[
      Opacity[0]], 
     StrokeForm[
      Opacity[0]]}, {Automatic, None}},
  FrameTicks->FrontEndValueCache[{{Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& , None}, {
     Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& , None}}, {{{{0., 
        FormBox["0", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {20., 
        FormBox["20", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {40., 
        FormBox["40", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {60., 
        FormBox["60", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {80., 
        FormBox["80", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {100., 
        FormBox["100", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}}, None}, {{{0., 
        FormBox["0", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox["5", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {10., 
        FormBox["10", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {15., 
        FormBox["15", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {20., 
        FormBox["20", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {25., 
        FormBox["25", TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}}, None}}],
  GridLines->{None, {0., 20., 40., 60., 80., 100.}},
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 25.}, {0, 97.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Charting`FindScaledTicks[
     (Charting`SimpleTicks[#, #2, 6]& )[
      SlotSequence[1]], {Identity, Identity}]& , Charting`FindScaledTicks[
     (Charting`SimpleTicks[#, #2, 6]& )[
      SlotSequence[1]], {Identity, Identity}]& }]], "Output",
 CellChangeTimes->{3.757110899779501*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"218a8bab-b083-49b8-89ac-c43c9d32ddee"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.757110941486281*^9, 
  3.7571109453533216`*^9}},ExpressionUUID->"a0d1b7ea-6075-4144-8ad3-\
7f2370c893d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1234", "/", "2468"}]], "Input",
 CellChangeTimes->{{3.7571109471491117`*^9, 3.757110950181536*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"de3915f0-45a1-4fe2-b618-1134364f1cdb"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.757110951036583*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"db4a9d76-a3a3-437f-ae7d-4a71690deb56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox["1.35", "2.46"]], "Input",
 CellChangeTimes->{{3.757110982153248*^9, 3.7571109886033564`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"86dc4333-1c1c-4271-b4d0-0aff3a45f63e"],

Cell[BoxData["0.5487804878048781`"], "Output",
 CellChangeTimes->{3.757110989322444*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"29e7dd2f-a795-4587-96d7-90dc7abc365b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox["135.7", "246"]], "Input",
 CellChangeTimes->{{3.7571109941160583`*^9, 3.7571110035897284`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"6863e582-a365-4cb5-848b-9eda2924c093"],

Cell[BoxData["0.5516260162601626`"], "Output",
 CellChangeTimes->{3.757111004320282*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"43a67ad1-34b2-4d8c-8469-4729b8ad15a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1234.0", "/", "2468"}]], "Input",
 CellChangeTimes->{{3.7571110214910746`*^9, 3.757111040509759*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"60b00025-d137-4aea-9fcf-8ed6210353a0"],

Cell[BoxData["0.5`"], "Output",
 CellChangeTimes->{3.7571110421812587`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"64167687-71bd-4008-84ac-85ac99e20dac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["1234", "5678"], "]"}]], "Input",
 CellChangeTimes->{{3.7571110610787745`*^9, 3.7571110734563694`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"16a1c8ed-8ede-43ae-95c8-a7a42f3001d5"],

Cell[BoxData["0.2173300457907714`"], "Output",
 CellChangeTimes->{3.757111074496386*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"2b0e7e06-ed0e-424a-9a54-1d99bcd512b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox["1234", "5678"], ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.7571110878185177`*^9, 
  3.7571111037223625`*^9}},ExpressionUUID->"3b1a9b29-ca48-4dee-b543-\
a533442cdb0c"],

Cell[BoxData[
 RowBox[{"0.\
217330045790771398379711165903487143360338147234941880943994364212750968650933\
4272631208171891511095456146530468475`100.", "/", 
  "\[Placeholder]"}]], "Output",
 CellChangeTimes->{3.757111100006973*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"923d4ee9-d918-4374-b3e6-75d8a4737f0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "1"], 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.757111138264632*^9, 3.7571111572404623`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"a3e1fc05-eeb4-453b-9a5d-1132db8fc3e4"],

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"Cos", "[", "1", "]"}]}]], "Output",
 CellChangeTimes->{3.7571111589047832`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"2bf91c0a-d4d6-4814-841a-f8bc6b244b1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7571111637572937`*^9, 3.757111167184513*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"2dbe98ed-f93e-42a5-890a-b4a362d9328d"],

Cell[BoxData["0.45969769413186023`"], "Output",
 CellChangeTimes->{3.757111167942847*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"bff7bbee-5676-43fb-887a-c66f33dc1d31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubsuperscriptBox["\[Integral]", "0", "1"], 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.7571111937639995`*^9, 3.7571111948800025`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"221e81f9-6f0e-4fd3-88db-a51b05a5c4cd"],

Cell[BoxData["0.45969769413186023`"], "Output",
 CellChangeTimes->{3.757111195745515*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"bf93f06e-46ef-463d-b9de-f9aed6eb0ef7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   SubsuperscriptBox["\[Integral]", "0", "1"], 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7571112077097616`*^9, 3.7571112185606413`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"e9e79efa-4e32-4bd1-8485-bdecf4166fa4"],

Cell[BoxData["0.45969769413186023`"], "Output",
 CellChangeTimes->{3.7571112193741126`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"d1ef812f-e75a-44a2-9f78-a841b6637756"]
}, Open  ]]
},
WindowSize->{759, 833},
WindowMargins->{{514, Automatic}, {Automatic, 48}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (2018\:5e743\:670828\
\:65e5)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 3, 35, "Input",ExpressionUUID->"ff7c5987-3230-417a-9832-e032d4992434"],
Cell[781, 27, 181, 2, 40, "Output",ExpressionUUID->"2dc36fe8-6f0b-4ea7-ab56-cc72adf29fcb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[999, 34, 199, 3, 35, "Input",ExpressionUUID->"f1dc3558-ae44-4b16-b04d-e1a87d17f947"],
Cell[1201, 39, 181, 2, 40, "Output",ExpressionUUID->"cb34a904-3e57-4fe2-b7af-ace9f46d53c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1419, 46, 98457, 1866, 102, "WolframAlphaShortInput",ExpressionUUID->"189d3e08-755b-401b-89f4-bdce30f2e2b8"],
Cell[99879, 1914, 16038, 280, 300, "Output",ExpressionUUID->"eb2b6ee5-d0e8-4c62-afd8-2fed7c648618"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115954, 2199, 98403, 1865, 102, "WolframAlphaShortInput",ExpressionUUID->"41fdce90-753b-490a-92d4-c534dbd8d83c"],
Cell[214360, 4066, 16038, 280, 300, "Output",ExpressionUUID->"097e7f67-7e16-453f-a8f2-8d1faed012db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230435, 4351, 98356, 1863, 102, "WolframAlphaShortInput",ExpressionUUID->"c765bf1e-0431-4ac3-a975-41b308dbedb5"],
Cell[328794, 6216, 16038, 280, 300, "Output",ExpressionUUID->"349ad743-d632-4dcc-bfaf-25be47d45784"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344869, 6501, 98472, 1866, 102, "WolframAlphaShortInput",ExpressionUUID->"346387cd-b71a-4c5e-8895-09cef271bc69"],
Cell[443344, 8369, 16040, 280, 300, "Output",ExpressionUUID->"3f9bb9be-7c38-4e3a-bc74-7e48395fa338"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459421, 8654, 43075, 905, 229, "WolframAlphaShortInput",ExpressionUUID->"2c2dcc44-1abb-4364-9bc4-e03ae063af2f"],
Cell[502499, 9561, 1229, 18, 113, "Output",ExpressionUUID->"5b75073c-3936-409d-8a9c-c0d663496730"]
}, Open  ]],
Cell[CellGroupData[{
Cell[503765, 9584, 14427, 354, 80, "WolframAlphaShortInput",ExpressionUUID->"687d0f58-f28f-4b21-b689-1f8bb2b1c309"],
Cell[518195, 9940, 603, 20, 80, "Output",ExpressionUUID->"74e244cd-f30c-46f0-a5e4-75dbcc5b8633"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518835, 9965, 317250, 5323, 102, "WolframAlphaShortInput",ExpressionUUID->"3fdd1bec-5ce4-44d1-9784-fc6ac82bf149"],
Cell[836088, 15290, 289762, 4779, 379, 177713, 2942, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"4271c068-c7c6-4a4c-bd27-e3357390bcc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1125887, 20074, 43579, 763, 202, "WolframAlphaShortInput",ExpressionUUID->"7e85ed0f-271a-4d7f-951e-c26f51b69d35"],
Cell[1169469, 20839, 9805, 175, 471, "Output",ExpressionUUID->"416a87e5-f1c2-4467-b4d2-c93c013783ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1179311, 21019, 24040, 538, 94, "WolframAlphaShortInput",ExpressionUUID->"123956bb-3790-477b-bb07-cf03ca2cace3"],
Cell[1203354, 21559, 326, 6, 70, "Output",ExpressionUUID->"e189ccfd-371e-485c-bec2-2b048152ed21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1203717, 21570, 16652, 383, 94, "WolframAlphaShortInput",ExpressionUUID->"b93cd35f-1393-49e0-8ead-19312c2e4781"],
Cell[1220372, 21955, 316, 5, 65, "Output",ExpressionUUID->"bb0084ae-3d5d-4c45-b6a9-a3d6cc6de08f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1220725, 21965, 198590, 3616, 94, "WolframAlphaShortInput",ExpressionUUID->"0d51eae4-e9df-41fe-a81f-0049f1424a4f"],
Cell[1419318, 25583, 341, 6, 53, "Output",ExpressionUUID->"52f7efd1-497f-4429-bb10-e62f4bb8d476"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1419696, 25594, 53261, 1070, 132, "WolframAlphaShortInput",ExpressionUUID->"7a86afeb-080e-4a24-a2d6-1d6d30eb423f"],
Cell[1472960, 26666, 5681, 108, 161, "Output",ExpressionUUID->"c058e1e9-5aa4-4697-95f8-fe1247e51811"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1478678, 26779, 35246, 751, 137, "WolframAlphaShortInput",ExpressionUUID->"63eef8ef-b90a-43e1-9b6e-529ce864b777"],
Cell[1513927, 27532, 573, 11, 147, "Output",ExpressionUUID->"5787d0f2-abfb-4603-8433-f284bfb7833d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1514537, 27548, 173314, 3453, 78, "WolframAlphaShortInput",ExpressionUUID->"c4dd65ca-76c6-49b4-b10a-eb49c6e40233"],
Cell[1687854, 31003, 3539, 93, 129, "Output",ExpressionUUID->"a3c84d87-7e6e-4cf2-8bb7-e29190f9d4c0"]
}, Open  ]],
Cell[1691408, 31099, 420, 17, 60, "Input",ExpressionUUID->"44e90e84-3bed-405c-b94a-0a6830da7b29"],
Cell[CellGroupData[{
Cell[1691853, 31120, 342, 8, 55, "Input",ExpressionUUID->"9e4281d9-b149-4ce7-95e8-3b5f09340ca9"],
Cell[1692198, 31130, 10514, 190, 287, "Output",ExpressionUUID->"887dadd3-134d-4c4a-bfb2-80c1f701cd81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1702749, 31325, 276, 6, 55, "Input",ExpressionUUID->"722848de-852c-4f7b-85e0-d0e1bc33972f"],
Cell[1703028, 31333, 1048, 30, 65, "Output",ExpressionUUID->"e3c6c610-44fd-4fe3-943a-4354642dd181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1704113, 31368, 98575, 1868, 102, "WolframAlphaShortInput",ExpressionUUID->"70893892-dd89-434d-84d3-f7c920dc0c5f"],
Cell[1802691, 33238, 16065, 280, 300, "Output",ExpressionUUID->"068cdcc4-190b-468e-9fc5-053972890ee4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1818793, 33523, 342, 8, 55, "Input",ExpressionUUID->"1e3c7e3c-58fa-47c2-8f97-92a90e74b5b2"],
Cell[1819138, 33533, 19846, 343, 299, "Output",ExpressionUUID->"18002cba-7bd3-4912-8105-3ebc989c0a73"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1839021, 33881, 416, 11, 55, "Input",ExpressionUUID->"81425f6c-5203-4f26-9db7-2bd49c3f480d"],
Cell[1839440, 33894, 29547, 502, 299, "Output",ExpressionUUID->"b0563305-673f-46c9-953b-b38fd997149c"]
}, Open  ]],
Cell[1869002, 34399, 241, 5, 60, "Input",ExpressionUUID->"0dda673c-9570-4efc-9491-d30c3e63e70a"],
Cell[CellGroupData[{
Cell[1869268, 34408, 218, 4, 35, "Input",ExpressionUUID->"70d489b2-6536-48b8-952e-ec511d1f812d"],
Cell[1869489, 34414, 216, 5, 40, "Output",ExpressionUUID->"140f991b-9f66-4ff7-bb5c-945ae5368fd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1869742, 34424, 289, 9, 58, "Input",ExpressionUUID->"81098c96-7ac8-474b-818e-1d37186ebe0a"],
Cell[1870034, 34435, 360, 11, 47, "Output",ExpressionUUID->"8d7ed484-0201-43f9-bd79-d05e9739473f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1870431, 34451, 15106, 305, 102, "WolframAlphaShortInput",ExpressionUUID->"fd7d5afe-1fbc-4a00-88fd-ce1200cab9da"],
Cell[1885540, 34758, 462, 8, 65, "Output",ExpressionUUID->"f0310af5-27e6-4dfd-9167-15be2470a8c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1886039, 34771, 546, 11, 100, "Input",ExpressionUUID->"71449c87-807d-49af-9764-5dfde5540f16"],
Cell[1886588, 34784, 1852, 46, 306, "Output",ExpressionUUID->"575f74fb-bcb1-40c6-91b3-5f9987a13112"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1888477, 34835, 600, 12, 145, "Input",ExpressionUUID->"0758d066-8ea3-4827-bb59-e27cef3458d1"],
Cell[1889080, 34849, 2115, 50, 306, "Output",ExpressionUUID->"36246816-62bd-4851-98ad-7d2bb29712b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1891232, 34904, 663, 13, 145, "Input",ExpressionUUID->"1c19c4ec-68b3-42b4-b47b-54beb1302310"],
Cell[1891898, 34919, 4424, 103, 306, "Output",ExpressionUUID->"218a8bab-b083-49b8-89ac-c43c9d32ddee"]
}, Open  ]],
Cell[1896337, 35025, 154, 3, 35, "Input",ExpressionUUID->"a0d1b7ea-6075-4144-8ad3-7f2370c893d3"],
Cell[CellGroupData[{
Cell[1896516, 35032, 202, 3, 35, "Input",ExpressionUUID->"de3915f0-45a1-4fe2-b618-1134364f1cdb"],
Cell[1896721, 35037, 169, 3, 57, "Output",ExpressionUUID->"db4a9d76-a3a3-437f-ae7d-4a71690deb56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1896927, 35045, 200, 3, 59, "Input",ExpressionUUID->"86dc4333-1c1c-4271-b4d0-0aff3a45f63e"],
Cell[1897130, 35050, 167, 2, 40, "Output",ExpressionUUID->"29e7dd2f-a795-4587-96d7-90dc7abc365b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1897334, 35057, 202, 3, 59, "Input",ExpressionUUID->"6863e582-a365-4cb5-848b-9eda2924c093"],
Cell[1897539, 35062, 167, 2, 40, "Output",ExpressionUUID->"43a67ad1-34b2-4d8c-8469-4729b8ad15a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1897743, 35069, 204, 3, 35, "Input",ExpressionUUID->"60b00025-d137-4aea-9fcf-8ed6210353a0"],
Cell[1897950, 35074, 154, 2, 40, "Output",ExpressionUUID->"64167687-71bd-4008-84ac-85ac99e20dac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1898141, 35081, 230, 4, 78, "Input",ExpressionUUID->"16a1c8ed-8ede-43ae-95c8-a7a42f3001d5"],
Cell[1898374, 35087, 167, 2, 40, "Output",ExpressionUUID->"2b0e7e06-ed0e-424a-9a54-1d99bcd512b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1898578, 35094, 237, 6, 78, "Input",ExpressionUUID->"3b1a9b29-ca48-4dee-b543-a533442cdb0c"],
Cell[1898818, 35102, 312, 6, 65, "Output",ExpressionUUID->"923d4ee9-d918-4374-b3e6-75d8a4737f0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1899167, 35113, 316, 7, 75, "Input",ExpressionUUID->"a3e1fc05-eeb4-453b-9a5d-1132db8fc3e4"],
Cell[1899486, 35122, 203, 4, 40, "Output",ExpressionUUID->"2bf91c0a-d4d6-4814-841a-f8bc6b244b1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1899726, 35131, 201, 3, 55, "Input",ExpressionUUID->"2dbe98ed-f93e-42a5-890a-b4a362d9328d"],
Cell[1899930, 35136, 168, 2, 40, "Output",ExpressionUUID->"bff7bbee-5676-43fb-887a-c66f33dc1d31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1900135, 35143, 346, 8, 75, "Input",ExpressionUUID->"221e81f9-6f0e-4fd3-88db-a51b05a5c4cd"],
Cell[1900484, 35153, 168, 2, 40, "Output",ExpressionUUID->"bf93f06e-46ef-463d-b9de-f9aed6eb0ef7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1900689, 35160, 350, 8, 75, "Input",ExpressionUUID->"e9e79efa-4e32-4bd1-8485-bdecf4166fa4"],
Cell[1901042, 35170, 170, 2, 72, "Output",ExpressionUUID->"d1ef812f-e75a-44a2-9f78-a841b6637756"]
}, Open  ]]
}
]
*)

